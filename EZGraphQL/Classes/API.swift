//  This file was automatically generated and should not be edited.

import Apollo
import Foundation

/// 业务模块名称
public enum enumModuleName: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// live page
  @available(*, deprecated, message: "已废弃")
  case livePageFeatureLive
  /// live page
  @available(*, deprecated, message: "已废弃")
  case livePageLive
  /// discover page
  @available(*, deprecated, message: "可使用 whatsLiveRightNow 代替，效果一样")
  case discoverPageLive
  /// 2022-11 新版 home page `What's LIVE right now 模块`
  case whatsLiveRightNow
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "livePage_featureLive": self = .livePageFeatureLive
      case "livePage_live": self = .livePageLive
      case "discoverPage_live": self = .discoverPageLive
      case "whatsLiveRightNow": self = .whatsLiveRightNow
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .livePageFeatureLive: return "livePage_featureLive"
      case .livePageLive: return "livePage_live"
      case .discoverPageLive: return "discoverPage_live"
      case .whatsLiveRightNow: return "whatsLiveRightNow"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enumModuleName, rhs: enumModuleName) -> Bool {
    switch (lhs, rhs) {
      case (.livePageFeatureLive, .livePageFeatureLive): return true
      case (.livePageLive, .livePageLive): return true
      case (.discoverPageLive, .discoverPageLive): return true
      case (.whatsLiveRightNow, .whatsLiveRightNow): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enumModuleName] {
    return [
      .livePageFeatureLive,
      .livePageLive,
      .discoverPageLive,
      .whatsLiveRightNow,
    ]
  }
}

public enum AgreementType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case auction
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "auction": self = .auction
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .auction: return "auction"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: AgreementType, rhs: AgreementType) -> Bool {
    switch (lhs, rhs) {
      case (.auction, .auction): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [AgreementType] {
    return [
      .auction,
    ]
  }
}

public enum ChangeLiveWatchListAction: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case add
  case remove
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Add": self = .add
      case "Remove": self = .remove
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .add: return "Add"
      case .remove: return "Remove"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: ChangeLiveWatchListAction, rhs: ChangeLiveWatchListAction) -> Bool {
    switch (lhs, rhs) {
      case (.add, .add): return true
      case (.remove, .remove): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [ChangeLiveWatchListAction] {
    return [
      .add,
      .remove,
    ]
  }
}

public enum LiveStreamingStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 待开播
  case notStart
  /// 直播中
  case streaming
  /// 直播暂停
  case streamStop
  /// 直播已结束
  case ended
  /// 直播已取消
  case canceled
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NotStart": self = .notStart
      case "Streaming": self = .streaming
      case "StreamStop": self = .streamStop
      case "Ended": self = .ended
      case "Canceled": self = .canceled
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .notStart: return "NotStart"
      case .streaming: return "Streaming"
      case .streamStop: return "StreamStop"
      case .ended: return "Ended"
      case .canceled: return "Canceled"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: LiveStreamingStatus, rhs: LiveStreamingStatus) -> Bool {
    switch (lhs, rhs) {
      case (.notStart, .notStart): return true
      case (.streaming, .streaming): return true
      case (.streamStop, .streamStop): return true
      case (.ended, .ended): return true
      case (.canceled, .canceled): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [LiveStreamingStatus] {
    return [
      .notStart,
      .streaming,
      .streamStop,
      .ended,
      .canceled,
    ]
  }
}

/// 产品设计上暂时只支持按百分比折扣的优惠券类型
public enum enum__discountType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 折扣百分比
  case percent
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "PERCENT": self = .percent
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .percent: return "PERCENT"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__discountType, rhs: enum__discountType) -> Bool {
    switch (lhs, rhs) {
      case (.percent, .percent): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__discountType] {
    return [
      .percent,
    ]
  }
}

public enum enum__productType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 普通商品
  case normal
  /// 拍卖商品，购买流程是拍卖，主播在解锁之前用户不可下单
  case auction
  /// 锁定商品，购买流程同普通商品，主播在解锁之前用户不可下单
  case lock
  /// 闪电购商品，购买流程同普通商品，主播在解锁之前用户不可见，也不可下单
  case flash
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NORMAL": self = .normal
      case "AUCTION": self = .auction
      case "LOCK": self = .lock
      case "FLASH": self = .flash
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .normal: return "NORMAL"
      case .auction: return "AUCTION"
      case .lock: return "LOCK"
      case .flash: return "FLASH"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__productType, rhs: enum__productType) -> Bool {
    switch (lhs, rhs) {
      case (.normal, .normal): return true
      case (.auction, .auction): return true
      case (.lock, .lock): return true
      case (.flash, .flash): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__productType] {
    return [
      .normal,
      .auction,
      .lock,
      .flash,
    ]
  }
}

public enum enum__productStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 未上架，用户不能看见
  case offSale
  /// 待销售，用户可见但不可下单
  case awaitSale
  /// 正在销售，用户可见、可以下单
  case onSale
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "OFF_SALE": self = .offSale
      case "AWAIT_SALE": self = .awaitSale
      case "ON_SALE": self = .onSale
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .offSale: return "OFF_SALE"
      case .awaitSale: return "AWAIT_SALE"
      case .onSale: return "ON_SALE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__productStatus, rhs: enum__productStatus) -> Bool {
    switch (lhs, rhs) {
      case (.offSale, .offSale): return true
      case (.awaitSale, .awaitSale): return true
      case (.onSale, .onSale): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__productStatus] {
    return [
      .offSale,
      .awaitSale,
      .onSale,
    ]
  }
}

public enum enum__shippingMethod: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case standard
  case express
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "STANDARD": self = .standard
      case "EXPRESS": self = .express
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .standard: return "STANDARD"
      case .express: return "EXPRESS"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__shippingMethod, rhs: enum__shippingMethod) -> Bool {
    switch (lhs, rhs) {
      case (.standard, .standard): return true
      case (.express, .express): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__shippingMethod] {
    return [
      .standard,
      .express,
    ]
  }
}

public enum AuctionStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 未开始拍卖
  case bidNotStart
  /// 拍卖中
  case bidding
  /// 流拍
  case passed
  /// 拍卖完成
  case done
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "BID_NOT_START": self = .bidNotStart
      case "BIDDING": self = .bidding
      case "PASSED": self = .passed
      case "DONE": self = .done
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .bidNotStart: return "BID_NOT_START"
      case .bidding: return "BIDDING"
      case .passed: return "PASSED"
      case .done: return "DONE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: AuctionStatus, rhs: AuctionStatus) -> Bool {
    switch (lhs, rhs) {
      case (.bidNotStart, .bidNotStart): return true
      case (.bidding, .bidding): return true
      case (.passed, .passed): return true
      case (.done, .done): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [AuctionStatus] {
    return [
      .bidNotStart,
      .bidding,
      .passed,
      .done,
    ]
  }
}

public enum VideoType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case normal
  case teaser
  case pastShow
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NORMAL": self = .normal
      case "TEASER": self = .teaser
      case "PAST_SHOW": self = .pastShow
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .normal: return "NORMAL"
      case .teaser: return "TEASER"
      case .pastShow: return "PAST_SHOW"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: VideoType, rhs: VideoType) -> Bool {
    switch (lhs, rhs) {
      case (.normal, .normal): return true
      case (.teaser, .teaser): return true
      case (.pastShow, .pastShow): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [VideoType] {
    return [
      .normal,
      .teaser,
      .pastShow,
    ]
  }
}

/// 用户角色
public enum enum__userRole: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 注册用户
  case user
  /// 管理员
  case admin
  /// 系统用户
  case system
  /// 卖家
  case seller
  /// 卖家子账号
  case sellerSub
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "USER": self = .user
      case "ADMIN": self = .admin
      case "SYSTEM": self = .system
      case "SELLER": self = .seller
      case "SELLER_SUB": self = .sellerSub
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .user: return "USER"
      case .admin: return "ADMIN"
      case .system: return "SYSTEM"
      case .seller: return "SELLER"
      case .sellerSub: return "SELLER_SUB"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__userRole, rhs: enum__userRole) -> Bool {
    switch (lhs, rhs) {
      case (.user, .user): return true
      case (.admin, .admin): return true
      case (.system, .system): return true
      case (.seller, .seller): return true
      case (.sellerSub, .sellerSub): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__userRole] {
    return [
      .user,
      .admin,
      .system,
      .seller,
      .sellerSub,
    ]
  }
}

public enum enumWatch: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 公开
  case `public`
  /// 好友
  case friends
  /// 仅自己
  case onlyMe
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "PUBLIC": self = .public
      case "FRIENDS": self = .friends
      case "ONLY_ME": self = .onlyMe
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .public: return "PUBLIC"
      case .friends: return "FRIENDS"
      case .onlyMe: return "ONLY_ME"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enumWatch, rhs: enumWatch) -> Bool {
    switch (lhs, rhs) {
      case (.public, .public): return true
      case (.friends, .friends): return true
      case (.onlyMe, .onlyMe): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enumWatch] {
    return [
      .public,
      .friends,
      .onlyMe,
    ]
  }
}

public enum TicketPayType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 付费票
  case paid
  /// 免费票
  case free
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "PAID": self = .paid
      case "FREE": self = .free
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .paid: return "PAID"
      case .free: return "FREE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: TicketPayType, rhs: TicketPayType) -> Bool {
    switch (lhs, rhs) {
      case (.paid, .paid): return true
      case (.free, .free): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [TicketPayType] {
    return [
      .paid,
      .free,
    ]
  }
}

public enum TicketRefundPolicy: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case refundable
  case nonRefundable
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "REFUNDABLE": self = .refundable
      case "NON_REFUNDABLE": self = .nonRefundable
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .refundable: return "REFUNDABLE"
      case .nonRefundable: return "NON_REFUNDABLE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: TicketRefundPolicy, rhs: TicketRefundPolicy) -> Bool {
    switch (lhs, rhs) {
      case (.refundable, .refundable): return true
      case (.nonRefundable, .nonRefundable): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [TicketRefundPolicy] {
    return [
      .refundable,
      .nonRefundable,
    ]
  }
}

public enum EventStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 即将开始
  case upcoming
  /// 正在进行
  case ongoing
  /// 活动结束
  case finished
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UPCOMING": self = .upcoming
      case "ONGOING": self = .ongoing
      case "FINISHED": self = .finished
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .upcoming: return "UPCOMING"
      case .ongoing: return "ONGOING"
      case .finished: return "FINISHED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: EventStatus, rhs: EventStatus) -> Bool {
    switch (lhs, rhs) {
      case (.upcoming, .upcoming): return true
      case (.ongoing, .ongoing): return true
      case (.finished, .finished): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [EventStatus] {
    return [
      .upcoming,
      .ongoing,
      .finished,
    ]
  }
}

public enum PaymentMethod: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 信用卡
  case card
  /// 苹果支付
  case applePay
  /// google支付
  case googlePay
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "CARD": self = .card
      case "APPLE_PAY": self = .applePay
      case "GOOGLE_PAY": self = .googlePay
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .card: return "CARD"
      case .applePay: return "APPLE_PAY"
      case .googlePay: return "GOOGLE_PAY"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PaymentMethod, rhs: PaymentMethod) -> Bool {
    switch (lhs, rhs) {
      case (.card, .card): return true
      case (.applePay, .applePay): return true
      case (.googlePay, .googlePay): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PaymentMethod] {
    return [
      .card,
      .applePay,
      .googlePay,
    ]
  }
}

public enum enum__cardInvalidField: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case expiryDate
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "expiryDate": self = .expiryDate
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .expiryDate: return "expiryDate"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__cardInvalidField, rhs: enum__cardInvalidField) -> Bool {
    switch (lhs, rhs) {
      case (.expiryDate, .expiryDate): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__cardInvalidField] {
    return [
      .expiryDate,
    ]
  }
}

/// 比较运算
public struct input__conditionalOperation: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: Swift.Optional<Double?> = nil, gt: Swift.Optional<Double?> = nil, gte: Swift.Optional<Double?> = nil, lt: Swift.Optional<Double?> = nil, lte: Swift.Optional<Double?> = nil) {
    graphQLMap = ["eq": eq, "gt": gt, "gte": gte, "lt": lt, "lte": lte]
  }

  /// 等于
  public var eq: Swift.Optional<Double?> {
    get {
      return graphQLMap["eq"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  /// 大于
  public var gt: Swift.Optional<Double?> {
    get {
      return graphQLMap["gt"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  /// 大于等于
  public var gte: Swift.Optional<Double?> {
    get {
      return graphQLMap["gte"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gte")
    }
  }

  /// 小于
  public var lt: Swift.Optional<Double?> {
    get {
      return graphQLMap["lt"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  /// 小于等于
  public var lte: Swift.Optional<Double?> {
    get {
      return graphQLMap["lte"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lte")
    }
  }
}

public enum InboxNotificationCategory: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 点赞
  case like
  /// 评论
  case comment
  /// 提到我
  case mention
  /// 关注
  case follow
  /// 直播相关
  case live
  /// Admin 通知
  case adminNotice
  /// 其他通知
  case other
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "LIKE": self = .like
      case "COMMENT": self = .comment
      case "MENTION": self = .mention
      case "FOLLOW": self = .follow
      case "LIVE": self = .live
      case "ADMIN_NOTICE": self = .adminNotice
      case "OTHER": self = .other
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .like: return "LIKE"
      case .comment: return "COMMENT"
      case .mention: return "MENTION"
      case .follow: return "FOLLOW"
      case .live: return "LIVE"
      case .adminNotice: return "ADMIN_NOTICE"
      case .other: return "OTHER"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: InboxNotificationCategory, rhs: InboxNotificationCategory) -> Bool {
    switch (lhs, rhs) {
      case (.like, .like): return true
      case (.comment, .comment): return true
      case (.mention, .mention): return true
      case (.follow, .follow): return true
      case (.live, .live): return true
      case (.adminNotice, .adminNotice): return true
      case (.other, .other): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [InboxNotificationCategory] {
    return [
      .like,
      .comment,
      .mention,
      .follow,
      .live,
      .adminNotice,
      .other,
    ]
  }
}

public enum enum__userType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 卖家
  case seller
  /// 普通用户
  case normal
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "SELLER": self = .seller
      case "NORMAL": self = .normal
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .seller: return "SELLER"
      case .normal: return "NORMAL"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__userType, rhs: enum__userType) -> Bool {
    switch (lhs, rhs) {
      case (.seller, .seller): return true
      case (.normal, .normal): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__userType] {
    return [
      .seller,
      .normal,
    ]
  }
}

public enum NotificationContentElementType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case liveTitle
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "liveTitle": self = .liveTitle
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .liveTitle: return "liveTitle"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: NotificationContentElementType, rhs: NotificationContentElementType) -> Bool {
    switch (lhs, rhs) {
      case (.liveTitle, .liveTitle): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [NotificationContentElementType] {
    return [
      .liveTitle,
    ]
  }
}

public enum InboxNotificationJumpType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case video
  case live
  case comment
  case user
  case followUser
  case order
  case payoutRequest
  case event
  case ticketOrder
  case webPage
  case ezzePage
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Video": self = .video
      case "Live": self = .live
      case "Comment": self = .comment
      case "User": self = .user
      case "FollowUser": self = .followUser
      case "Order": self = .order
      case "PayoutRequest": self = .payoutRequest
      case "Event": self = .event
      case "TicketOrder": self = .ticketOrder
      case "WebPage": self = .webPage
      case "EzzePage": self = .ezzePage
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .video: return "Video"
      case .live: return "Live"
      case .comment: return "Comment"
      case .user: return "User"
      case .followUser: return "FollowUser"
      case .order: return "Order"
      case .payoutRequest: return "PayoutRequest"
      case .event: return "Event"
      case .ticketOrder: return "TicketOrder"
      case .webPage: return "WebPage"
      case .ezzePage: return "EzzePage"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: InboxNotificationJumpType, rhs: InboxNotificationJumpType) -> Bool {
    switch (lhs, rhs) {
      case (.video, .video): return true
      case (.live, .live): return true
      case (.comment, .comment): return true
      case (.user, .user): return true
      case (.followUser, .followUser): return true
      case (.order, .order): return true
      case (.payoutRequest, .payoutRequest): return true
      case (.event, .event): return true
      case (.ticketOrder, .ticketOrder): return true
      case (.webPage, .webPage): return true
      case (.ezzePage, .ezzePage): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [InboxNotificationJumpType] {
    return [
      .video,
      .live,
      .comment,
      .user,
      .followUser,
      .order,
      .payoutRequest,
      .event,
      .ticketOrder,
      .webPage,
      .ezzePage,
    ]
  }
}

public enum InboxNotificationJumpButtonType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case view
  case follow
  case thumbnail
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "View": self = .view
      case "Follow": self = .follow
      case "Thumbnail": self = .thumbnail
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .view: return "View"
      case .follow: return "Follow"
      case .thumbnail: return "Thumbnail"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: InboxNotificationJumpButtonType, rhs: InboxNotificationJumpButtonType) -> Bool {
    switch (lhs, rhs) {
      case (.view, .view): return true
      case (.follow, .follow): return true
      case (.thumbnail, .thumbnail): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [InboxNotificationJumpButtonType] {
    return [
      .view,
      .follow,
      .thumbnail,
    ]
  }
}

public enum LiveWatchListItemLiveStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 直播未开始
  case notStart
  /// 直播中
  case streaming
  /// 直播已结束
  case ended
  /// 直播已删除
  case deleted
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NotStart": self = .notStart
      case "Streaming": self = .streaming
      case "Ended": self = .ended
      case "Deleted": self = .deleted
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .notStart: return "NotStart"
      case .streaming: return "Streaming"
      case .ended: return "Ended"
      case .deleted: return "Deleted"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: LiveWatchListItemLiveStatus, rhs: LiveWatchListItemLiveStatus) -> Bool {
    switch (lhs, rhs) {
      case (.notStart, .notStart): return true
      case (.streaming, .streaming): return true
      case (.ended, .ended): return true
      case (.deleted, .deleted): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [LiveWatchListItemLiveStatus] {
    return [
      .notStart,
      .streaming,
      .ended,
      .deleted,
    ]
  }
}

/// 设备类型
public enum enum__deviceType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 未知
  case unknown
  /// iOS
  case ios
  /// Android
  case android
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UNKNOWN": self = .unknown
      case "IOS": self = .ios
      case "ANDROID": self = .android
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .unknown: return "UNKNOWN"
      case .ios: return "IOS"
      case .android: return "ANDROID"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__deviceType, rhs: enum__deviceType) -> Bool {
    switch (lhs, rhs) {
      case (.unknown, .unknown): return true
      case (.ios, .ios): return true
      case (.android, .android): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__deviceType] {
    return [
      .unknown,
      .ios,
      .android,
    ]
  }
}

public enum CollaborationEvent: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 观众请求加入连麦
  case requestJoinBroadcaster
  /// 观众请求加入连麦后，取消加入连麦的请求
  @available(*, deprecated, message: "20220308 需求变化，观众无法主动取消请求，所以不会有此事件。客户端暂无需上报此事件")
  case cancelRequestJoinBroadcaster
  /// 需要发送此事件的情况：
  /// case 1. 观众请求加入连麦，主播**接受**观众连麦请求
  /// case 2. 主播邀请观众连麦，观众**接受**主播邀请连麦
  case acceptedJoinBroadcaster
  /// 需要发送此事件的情况：
  /// case 1. 观众请求加入连麦，主播**拒绝**观众连麦请求
  /// case 2. 观众请求加入连麦，主播接受观众连麦请求后，观众**拒绝**加入连麦
  /// case 3. 主播邀请观众连麦，观众**拒绝**邀请连麦
  case declineJoinBroadcaster
  /// 主播邀请用户加入连麦
  case inviteJoinBroadcaster
  /// 主播取消邀请用户加入连麦
  case cancelInviteJoinBroadcaster
  /// 断开连麦。需要发送此事件的情况：
  /// case 1. 用户主动断开连麦，用户发
  /// case 2. 主播主动断开和用户连麦，主播发
  case stopJoinBroadcasting
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "REQUEST_JOIN_BROADCASTER": self = .requestJoinBroadcaster
      case "CANCEL_REQUEST_JOIN_BROADCASTER": self = .cancelRequestJoinBroadcaster
      case "ACCEPTED_JOIN_BROADCASTER": self = .acceptedJoinBroadcaster
      case "DECLINE_JOIN_BROADCASTER": self = .declineJoinBroadcaster
      case "INVITE_JOIN_BROADCASTER": self = .inviteJoinBroadcaster
      case "CANCEL_INVITE_JOIN_BROADCASTER": self = .cancelInviteJoinBroadcaster
      case "STOP_JOIN_BROADCASTING": self = .stopJoinBroadcasting
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .requestJoinBroadcaster: return "REQUEST_JOIN_BROADCASTER"
      case .cancelRequestJoinBroadcaster: return "CANCEL_REQUEST_JOIN_BROADCASTER"
      case .acceptedJoinBroadcaster: return "ACCEPTED_JOIN_BROADCASTER"
      case .declineJoinBroadcaster: return "DECLINE_JOIN_BROADCASTER"
      case .inviteJoinBroadcaster: return "INVITE_JOIN_BROADCASTER"
      case .cancelInviteJoinBroadcaster: return "CANCEL_INVITE_JOIN_BROADCASTER"
      case .stopJoinBroadcasting: return "STOP_JOIN_BROADCASTING"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: CollaborationEvent, rhs: CollaborationEvent) -> Bool {
    switch (lhs, rhs) {
      case (.requestJoinBroadcaster, .requestJoinBroadcaster): return true
      case (.cancelRequestJoinBroadcaster, .cancelRequestJoinBroadcaster): return true
      case (.acceptedJoinBroadcaster, .acceptedJoinBroadcaster): return true
      case (.declineJoinBroadcaster, .declineJoinBroadcaster): return true
      case (.inviteJoinBroadcaster, .inviteJoinBroadcaster): return true
      case (.cancelInviteJoinBroadcaster, .cancelInviteJoinBroadcaster): return true
      case (.stopJoinBroadcasting, .stopJoinBroadcasting): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [CollaborationEvent] {
    return [
      .requestJoinBroadcaster,
      .cancelRequestJoinBroadcaster,
      .acceptedJoinBroadcaster,
      .declineJoinBroadcaster,
      .inviteJoinBroadcaster,
      .cancelInviteJoinBroadcaster,
      .stopJoinBroadcasting,
    ]
  }
}

public enum MediaResourceSearchType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case videos
  case live
  case creators
  case hashtags
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Videos": self = .videos
      case "Live": self = .live
      case "Creators": self = .creators
      case "Hashtags": self = .hashtags
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .videos: return "Videos"
      case .live: return "Live"
      case .creators: return "Creators"
      case .hashtags: return "Hashtags"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: MediaResourceSearchType, rhs: MediaResourceSearchType) -> Bool {
    switch (lhs, rhs) {
      case (.videos, .videos): return true
      case (.live, .live): return true
      case (.creators, .creators): return true
      case (.hashtags, .hashtags): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [MediaResourceSearchType] {
    return [
      .videos,
      .live,
      .creators,
      .hashtags,
    ]
  }
}

/// Address or BillingAddress
public enum enum__addressType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 收货地址
  case shipping
  /// 信用卡账单地址
  case billing
  /// 卖家店铺地址
  case sellerStore
  /// 卖家 Business 地址
  case sellerBusiness
  /// 卖家发货地址
  @available(*, deprecated, message: "2022-11-17 store 换了设计，用 SELLER_STORE/SELLER_BUSINESS address type 代替")
  case sellerShipping
  /// 卖家接收账单地址
  @available(*, deprecated, message: "2022-11-17 store 换了设计，用 SELLER_STORE/SELLER_BUSINESS address type 代替")
  case sellerBilling
  /// 卖家个人地址
  @available(*, deprecated, message: "2022-01-09 store 换了设计，PERSONAL/BUSINESS/SELLING 用 STORE/SHIPPING/BILLING address type 代替")
  case sellerPersonal
  /// 卖家发货地址
  @available(*, deprecated, message: "2022-01-09 store 换了设计，用 STORE/SHIPPING/BILLING address type 代替")
  case sellerSelling
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "SHIPPING": self = .shipping
      case "BILLING": self = .billing
      case "SELLER_STORE": self = .sellerStore
      case "SELLER_BUSINESS": self = .sellerBusiness
      case "SELLER_SHIPPING": self = .sellerShipping
      case "SELLER_BILLING": self = .sellerBilling
      case "SELLER_PERSONAL": self = .sellerPersonal
      case "SELLER_SELLING": self = .sellerSelling
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .shipping: return "SHIPPING"
      case .billing: return "BILLING"
      case .sellerStore: return "SELLER_STORE"
      case .sellerBusiness: return "SELLER_BUSINESS"
      case .sellerShipping: return "SELLER_SHIPPING"
      case .sellerBilling: return "SELLER_BILLING"
      case .sellerPersonal: return "SELLER_PERSONAL"
      case .sellerSelling: return "SELLER_SELLING"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__addressType, rhs: enum__addressType) -> Bool {
    switch (lhs, rhs) {
      case (.shipping, .shipping): return true
      case (.billing, .billing): return true
      case (.sellerStore, .sellerStore): return true
      case (.sellerBusiness, .sellerBusiness): return true
      case (.sellerShipping, .sellerShipping): return true
      case (.sellerBilling, .sellerBilling): return true
      case (.sellerPersonal, .sellerPersonal): return true
      case (.sellerSelling, .sellerSelling): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__addressType] {
    return [
      .shipping,
      .billing,
      .sellerStore,
      .sellerBusiness,
      .sellerShipping,
      .sellerBilling,
      .sellerPersonal,
      .sellerSelling,
    ]
  }
}

public struct appUpdateStoreInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(_id: GraphQLID, storeBackgroundPicture: Swift.Optional<String?> = nil) {
    graphQLMap = ["_id": _id, "storeBackgroundPicture": storeBackgroundPicture]
  }

  /// 商店 id
  public var _id: GraphQLID {
    get {
      return graphQLMap["_id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_id")
    }
  }

  /// 商店背景图片
  public var storeBackgroundPicture: Swift.Optional<String?> {
    get {
      return graphQLMap["storeBackgroundPicture"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "storeBackgroundPicture")
    }
  }
}

/// app端编辑视频，可编辑字段
public struct AppUpdateVideoInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(teaserTitle: Swift.Optional<String?> = nil, liveStartAt: Swift.Optional<Double?> = nil, coverImage: Swift.Optional<String?> = nil, describe: Swift.Optional<String?> = nil, describeMapping: Swift.Optional<inputDescribeMapping?> = nil, watch: Swift.Optional<enumWatch?> = nil, allowComment: Swift.Optional<Bool?> = nil, location: Swift.Optional<[Double?]?> = nil, placeId: Swift.Optional<String?> = nil, placeName: Swift.Optional<String?> = nil, address: Swift.Optional<input__address?> = nil, interests: Swift.Optional<[GraphQLID?]?> = nil, deleted: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["teaserTitle": teaserTitle, "liveStartAt": liveStartAt, "coverImage": coverImage, "describe": describe, "describeMapping": describeMapping, "watch": watch, "allowComment": allowComment, "location": location, "placeId": placeId, "placeName": placeName, "address": address, "interests": interests, "deleted": deleted]
  }

  /// 【teaser video】直播预告标题
  public var teaserTitle: Swift.Optional<String?> {
    get {
      return graphQLMap["teaserTitle"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "teaserTitle")
    }
  }

  /// 【teaser video】预告直播开始的日期
  public var liveStartAt: Swift.Optional<Double?> {
    get {
      return graphQLMap["liveStartAt"] as? Swift.Optional<Double?> ?? Swift.Optional<Double?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "liveStartAt")
    }
  }

  /// 封面图. 仅 NORMAL/TEASER 类型的 video 可修改封面。注意要传 img/20230222150640873_631098.png
  /// 格式的图片 key，不能传 https://dev-res.ezze.live/img/20230222150640873_631098.png 这样完整的图片链接
  public var coverImage: Swift.Optional<String?> {
    get {
      return graphQLMap["coverImage"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coverImage")
    }
  }

  /// 描述
  public var describe: Swift.Optional<String?> {
    get {
      return graphQLMap["describe"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "describe")
    }
  }

  /// 描述中 #hashtags 和 @users 的映射关系
  public var describeMapping: Swift.Optional<inputDescribeMapping?> {
    get {
      return graphQLMap["describeMapping"] as? Swift.Optional<inputDescribeMapping?> ?? Swift.Optional<inputDescribeMapping?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "describeMapping")
    }
  }

  /// 允许观看范围
  public var watch: Swift.Optional<enumWatch?> {
    get {
      return graphQLMap["watch"] as? Swift.Optional<enumWatch?> ?? Swift.Optional<enumWatch?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "watch")
    }
  }

  /// 是否允许评论
  public var allowComment: Swift.Optional<Bool?> {
    get {
      return graphQLMap["allowComment"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "allowComment")
    }
  }

  /// 经纬度位置 [lng,lat] 经度，纬度
  public var location: Swift.Optional<[Double?]?> {
    get {
      return graphQLMap["location"] as? Swift.Optional<[Double?]?> ?? Swift.Optional<[Double?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "location")
    }
  }

  /// nearBySearch 接口中返回的 place_id
  public var placeId: Swift.Optional<String?> {
    get {
      return graphQLMap["placeId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "placeId")
    }
  }

  /// 地名
  public var placeName: Swift.Optional<String?> {
    get {
      return graphQLMap["placeName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "placeName")
    }
  }

  /// 地址
  public var address: Swift.Optional<input__address?> {
    get {
      return graphQLMap["address"] as? Swift.Optional<input__address?> ?? Swift.Optional<input__address?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  /// 兴趣
  public var interests: Swift.Optional<[GraphQLID?]?> {
    get {
      return graphQLMap["interests"] as? Swift.Optional<[GraphQLID?]?> ?? Swift.Optional<[GraphQLID?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "interests")
    }
  }

  /// ***【接口权限: 普通登录用户】***
  /// 删除状态
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }
}

public struct inputDescribeMapping: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(users: Swift.Optional<[inputMapping?]?> = nil, hashtags: Swift.Optional<[inputMapping?]?> = nil) {
    graphQLMap = ["users": users, "hashtags": hashtags]
  }

  public var users: Swift.Optional<[inputMapping?]?> {
    get {
      return graphQLMap["users"] as? Swift.Optional<[inputMapping?]?> ?? Swift.Optional<[inputMapping?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "users")
    }
  }

  public var hashtags: Swift.Optional<[inputMapping?]?> {
    get {
      return graphQLMap["hashtags"] as? Swift.Optional<[inputMapping?]?> ?? Swift.Optional<[inputMapping?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hashtags")
    }
  }
}

public struct inputMapping: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(text: Swift.Optional<String?> = nil, id: Swift.Optional<GraphQLID?> = nil) {
    graphQLMap = ["text": text, "id": id]
  }

  public var text: Swift.Optional<String?> {
    get {
      return graphQLMap["text"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "text")
    }
  }

  public var id: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["id"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }
}

/// 地址
public struct input__address: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(country: Swift.Optional<String?> = nil, state: Swift.Optional<GraphQLID?> = nil, zip: Swift.Optional<Int?> = nil, city: Swift.Optional<String?> = nil, street: Swift.Optional<String?> = nil) {
    graphQLMap = ["country": country, "state": state, "zip": zip, "city": city, "street": street]
  }

  /// 国家
  public var country: Swift.Optional<String?> {
    get {
      return graphQLMap["country"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  /// 州
  public var state: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["state"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  /// 邮政编码
  public var zip: Swift.Optional<Int?> {
    get {
      return graphQLMap["zip"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "zip")
    }
  }

  /// 城市
  public var city: Swift.Optional<String?> {
    get {
      return graphQLMap["city"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  /// 街道
  public var street: Swift.Optional<String?> {
    get {
      return graphQLMap["street"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "street")
    }
  }
}

public struct OrderProductInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(productId: GraphQLID, quantity: Int, tag: Swift.Optional<String?> = nil, variant: Swift.Optional<GraphQLID?> = nil) {
    graphQLMap = ["productId": productId, "quantity": quantity, "tag": tag, "variant": variant]
  }

  /// 商品 ID
  public var productId: GraphQLID {
    get {
      return graphQLMap["productId"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "productId")
    }
  }

  /// 商品数量
  public var quantity: Int {
    get {
      return graphQLMap["quantity"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "quantity")
    }
  }

  /// 选中的商品标签
  public var tag: Swift.Optional<String?> {
    get {
      return graphQLMap["tag"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tag")
    }
  }

  /// 选中的 variant id
  public var variant: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["variant"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "variant")
    }
  }
}

public struct OrderTicketsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ticket: GraphQLID, quantity: Int) {
    graphQLMap = ["ticket": ticket, "quantity": quantity]
  }

  /// ticket id
  public var ticket: GraphQLID {
    get {
      return graphQLMap["ticket"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ticket")
    }
  }

  /// ticket 数量
  public var quantity: Int {
    get {
      return graphQLMap["quantity"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "quantity")
    }
  }
}

/// 性别
public enum enum__gender: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  @available(*, deprecated, message: "Use `UNKNOWN`.")
  case unknow
  case unknown
  case male
  case female
  @available(*, deprecated, message: "Use `FEMALE`.")
  case femail
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UNKNOW": self = .unknow
      case "UNKNOWN": self = .unknown
      case "MALE": self = .male
      case "FEMALE": self = .female
      case "FEMAIL": self = .femail
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .unknow: return "UNKNOW"
      case .unknown: return "UNKNOWN"
      case .male: return "MALE"
      case .female: return "FEMALE"
      case .femail: return "FEMAIL"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__gender, rhs: enum__gender) -> Bool {
    switch (lhs, rhs) {
      case (.unknow, .unknow): return true
      case (.unknown, .unknown): return true
      case (.male, .male): return true
      case (.female, .female): return true
      case (.femail, .femail): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__gender] {
    return [
      .unknow,
      .unknown,
      .male,
      .female,
      .femail,
    ]
  }
}

public enum OrderStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 未支付
  case unpaid
  /// 订单已确认
  case confirmed
  /// 已贴标签还未寄出
  case preTransit
  /// 邮寄过程中
  case inTransit
  /// 送货上门中
  case outForDelivery
  /// 已送到
  case delivered
  /// 退货邮寄中
  case returnToSender
  /// 失败
  case deliverFail
  /// 邮寄状态未知（包裹丢失了）
  case deliverError
  /// 订单已取消
  case canceled
  /// 已退款
  case refunded
  /// 订单被关闭. 此状态 app 端无需处理，不需要展示在界面上
  case closed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UNPAID": self = .unpaid
      case "CONFIRMED": self = .confirmed
      case "PRE_TRANSIT": self = .preTransit
      case "IN_TRANSIT": self = .inTransit
      case "OUT_FOR_DELIVERY": self = .outForDelivery
      case "DELIVERED": self = .delivered
      case "RETURN_TO_SENDER": self = .returnToSender
      case "DELIVER_FAIL": self = .deliverFail
      case "DELIVER_ERROR": self = .deliverError
      case "CANCELED": self = .canceled
      case "REFUNDED": self = .refunded
      case "CLOSED": self = .closed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .unpaid: return "UNPAID"
      case .confirmed: return "CONFIRMED"
      case .preTransit: return "PRE_TRANSIT"
      case .inTransit: return "IN_TRANSIT"
      case .outForDelivery: return "OUT_FOR_DELIVERY"
      case .delivered: return "DELIVERED"
      case .returnToSender: return "RETURN_TO_SENDER"
      case .deliverFail: return "DELIVER_FAIL"
      case .deliverError: return "DELIVER_ERROR"
      case .canceled: return "CANCELED"
      case .refunded: return "REFUNDED"
      case .closed: return "CLOSED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: OrderStatus, rhs: OrderStatus) -> Bool {
    switch (lhs, rhs) {
      case (.unpaid, .unpaid): return true
      case (.confirmed, .confirmed): return true
      case (.preTransit, .preTransit): return true
      case (.inTransit, .inTransit): return true
      case (.outForDelivery, .outForDelivery): return true
      case (.delivered, .delivered): return true
      case (.returnToSender, .returnToSender): return true
      case (.deliverFail, .deliverFail): return true
      case (.deliverError, .deliverError): return true
      case (.canceled, .canceled): return true
      case (.refunded, .refunded): return true
      case (.closed, .closed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [OrderStatus] {
    return [
      .unpaid,
      .confirmed,
      .preTransit,
      .inTransit,
      .outForDelivery,
      .delivered,
      .returnToSender,
      .deliverFail,
      .deliverError,
      .canceled,
      .refunded,
      .closed,
    ]
  }
}

/// ApplePay/GooglePay 需要主动请求此接口，CreditCard 请求 createCard 接口自动创建 PaymentMethod
public enum PaymentMethodCreateChoice: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case applePay
  case googlePay
  case paypal
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "APPLE_PAY": self = .applePay
      case "GOOGLE_PAY": self = .googlePay
      case "PAYPAL": self = .paypal
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .applePay: return "APPLE_PAY"
      case .googlePay: return "GOOGLE_PAY"
      case .paypal: return "PAYPAL"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PaymentMethodCreateChoice, rhs: PaymentMethodCreateChoice) -> Bool {
    switch (lhs, rhs) {
      case (.applePay, .applePay): return true
      case (.googlePay, .googlePay): return true
      case (.paypal, .paypal): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PaymentMethodCreateChoice] {
    return [
      .applePay,
      .googlePay,
      .paypal,
    ]
  }
}

public enum PaymentSource: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case order
  case ticketOrder
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ORDER": self = .order
      case "TICKET_ORDER": self = .ticketOrder
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .order: return "ORDER"
      case .ticketOrder: return "TICKET_ORDER"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PaymentSource, rhs: PaymentSource) -> Bool {
    switch (lhs, rhs) {
      case (.order, .order): return true
      case (.ticketOrder, .ticketOrder): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PaymentSource] {
    return [
      .order,
      .ticketOrder,
    ]
  }
}

public enum PaymentStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case unpaid
  case paid
  case refund
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UNPAID": self = .unpaid
      case "PAID": self = .paid
      case "REFUND": self = .refund
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .unpaid: return "UNPAID"
      case .paid: return "PAID"
      case .refund: return "REFUND"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PaymentStatus, rhs: PaymentStatus) -> Bool {
    switch (lhs, rhs) {
      case (.unpaid, .unpaid): return true
      case (.paid, .paid): return true
      case (.refund, .refund): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PaymentStatus] {
    return [
      .unpaid,
      .paid,
      .refund,
    ]
  }
}

public struct TicketHolderInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(firstName: String, lastName: String, email: String) {
    graphQLMap = ["firstName": firstName, "lastName": lastName, "email": email]
  }

  public var firstName: String {
    get {
      return graphQLMap["firstName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: String {
    get {
      return graphQLMap["lastName"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }
}

public enum TicketOrderStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 待支付
  case unpaid
  /// 已支付，还未到活动开启时间
  case confirmed
  /// 已支付，且部分票被激活
  case partiallyActivated
  /// 已支付，且全部票被激活，且活动正在进行中
  case activated
  /// 已支付，且活动结束
  case completed
  /// 订单支付失败，被关闭
  case closed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "UNPAID": self = .unpaid
      case "CONFIRMED": self = .confirmed
      case "PARTIALLY_ACTIVATED": self = .partiallyActivated
      case "ACTIVATED": self = .activated
      case "COMPLETED": self = .completed
      case "CLOSED": self = .closed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .unpaid: return "UNPAID"
      case .confirmed: return "CONFIRMED"
      case .partiallyActivated: return "PARTIALLY_ACTIVATED"
      case .activated: return "ACTIVATED"
      case .completed: return "COMPLETED"
      case .closed: return "CLOSED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: TicketOrderStatus, rhs: TicketOrderStatus) -> Bool {
    switch (lhs, rhs) {
      case (.unpaid, .unpaid): return true
      case (.confirmed, .confirmed): return true
      case (.partiallyActivated, .partiallyActivated): return true
      case (.activated, .activated): return true
      case (.completed, .completed): return true
      case (.closed, .closed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [TicketOrderStatus] {
    return [
      .unpaid,
      .confirmed,
      .partiallyActivated,
      .activated,
      .completed,
      .closed,
    ]
  }
}

public enum algorithmFindVideos_mudelNames: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  @available(*, deprecated, message: "用 following 代替，效果一样")
  case homePageFollowing
  @available(*, deprecated, message: "用 forYou 代替，效果一样")
  case homePageForYou
  @available(*, deprecated, message: "已废弃，用 findVideos(type: [TEASER]) 代替")
  case discoverPageUpcomingLive
  @available(*, deprecated, message: "用 highlights 代替，效果一样")
  case discoverPageShortVideo
  /// 用于 ExplorePage -> Following 数据
  case following
  /// 用于 ExplorePage -> For You 数据
  case forYou
  /// 用于 HomePage -> highlights 数据
  case highlights
  /// 用于 HomePage -> Past LIVE shows 数据
  case pastshow
  /// 用于 HomePage -> Upcoming LIVE show 数据
  case teaser
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "homePage_following": self = .homePageFollowing
      case "homePage_forYou": self = .homePageForYou
      case "discoverPage_upcomingLive": self = .discoverPageUpcomingLive
      case "discoverPage_shortVideo": self = .discoverPageShortVideo
      case "following": self = .following
      case "forYou": self = .forYou
      case "highlights": self = .highlights
      case "pastshow": self = .pastshow
      case "teaser": self = .teaser
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .homePageFollowing: return "homePage_following"
      case .homePageForYou: return "homePage_forYou"
      case .discoverPageUpcomingLive: return "discoverPage_upcomingLive"
      case .discoverPageShortVideo: return "discoverPage_shortVideo"
      case .following: return "following"
      case .forYou: return "forYou"
      case .highlights: return "highlights"
      case .pastshow: return "pastshow"
      case .teaser: return "teaser"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: algorithmFindVideos_mudelNames, rhs: algorithmFindVideos_mudelNames) -> Bool {
    switch (lhs, rhs) {
      case (.homePageFollowing, .homePageFollowing): return true
      case (.homePageForYou, .homePageForYou): return true
      case (.discoverPageUpcomingLive, .discoverPageUpcomingLive): return true
      case (.discoverPageShortVideo, .discoverPageShortVideo): return true
      case (.following, .following): return true
      case (.forYou, .forYou): return true
      case (.highlights, .highlights): return true
      case (.pastshow, .pastshow): return true
      case (.teaser, .teaser): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [algorithmFindVideos_mudelNames] {
    return [
      .homePageFollowing,
      .homePageForYou,
      .discoverPageUpcomingLive,
      .discoverPageShortVideo,
      .following,
      .forYou,
      .highlights,
      .pastshow,
      .teaser,
    ]
  }
}

/// 商品属性, 注意 **variant id, 不传 _id 表示新增，传 _id 表示修改。已存在的数据在修改时如果发现没有传，则视为删除**
public struct VariantInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(_id: Swift.Optional<GraphQLID?> = nil, name: String, sku: Swift.Optional<String?> = nil, quantity: Int, shopifyProductVariantId: Swift.Optional<GraphQLID?> = nil) {
    graphQLMap = ["_id": _id, "name": name, "sku": sku, "quantity": quantity, "shopifyProductVariantId": shopifyProductVariantId]
  }

  /// variant id, 不传 _id 表示新增，传 _id 表示修改。已存在的数据在修改时如果发现没有传，则视为删除
  public var _id: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["_id"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_id")
    }
  }

  /// 属性名
  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// sku number
  public var sku: Swift.Optional<String?> {
    get {
      return graphQLMap["sku"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sku")
    }
  }

  /// 库存
  public var quantity: Int {
    get {
      return graphQLMap["quantity"] as! Int
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "quantity")
    }
  }

  /// 关联的 shopify product.variants.id
  public var shopifyProductVariantId: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["shopifyProductVariantId"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "shopifyProductVariantId")
    }
  }
}

public struct ShippingInfoInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(companyName: Swift.Optional<String?> = nil, method: Swift.Optional<enum__shippingMethod?> = nil, price: Swift.Optional<Int?> = nil) {
    graphQLMap = ["companyName": companyName, "method": method, "price": price]
  }

  /// 运输公司名称. 从 findShippingOptions 接口中获取
  public var companyName: Swift.Optional<String?> {
    get {
      return graphQLMap["companyName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "companyName")
    }
  }

  /// 运输方式
  public var method: Swift.Optional<enum__shippingMethod?> {
    get {
      return graphQLMap["method"] as? Swift.Optional<enum__shippingMethod?> ?? Swift.Optional<enum__shippingMethod?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "method")
    }
  }

  /// 价格
  public var price: Swift.Optional<Int?> {
    get {
      return graphQLMap["price"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "price")
    }
  }
}

public struct AuctionSettingInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(duration: Swift.Optional<Int?> = nil, extendTime: Swift.Optional<Int?> = nil) {
    graphQLMap = ["duration": duration, "extendTime": extendTime]
  }

  public var duration: Swift.Optional<Int?> {
    get {
      return graphQLMap["duration"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "duration")
    }
  }

  public var extendTime: Swift.Optional<Int?> {
    get {
      return graphQLMap["extendTime"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "extendTime")
    }
  }
}

public enum VersionTarget: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// iOS
  case ios
  /// Android
  case android
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "IOS": self = .ios
      case "ANDROID": self = .android
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .ios: return "IOS"
      case .android: return "ANDROID"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: VersionTarget, rhs: VersionTarget) -> Bool {
    switch (lhs, rhs) {
      case (.ios, .ios): return true
      case (.android, .android): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [VersionTarget] {
    return [
      .ios,
      .android,
    ]
  }
}

public struct AppUpdateLiveProductInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: Swift.Optional<String?> = nil, description: Swift.Optional<String?> = nil, images: Swift.Optional<[String?]?> = nil, regularPrice: Swift.Optional<Int?> = nil, livePrice: Swift.Optional<Int?> = nil, variants: Swift.Optional<[VariantInput?]?> = nil, isFreeShipping: Swift.Optional<Bool?> = nil, shippingInfo: Swift.Optional<ShippingInfoInput?> = nil, auctionPrice: Swift.Optional<Int?> = nil, auctionSetting: Swift.Optional<AuctionSettingInput?> = nil) {
    graphQLMap = ["name": name, "description": description, "images": images, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting]
  }

  /// 名称
  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 描述
  public var description: Swift.Optional<String?> {
    get {
      return graphQLMap["description"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  /// 图片
  public var images: Swift.Optional<[String?]?> {
    get {
      return graphQLMap["images"] as? Swift.Optional<[String?]?> ?? Swift.Optional<[String?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "images")
    }
  }

  /// 常规价格
  public var regularPrice: Swift.Optional<Int?> {
    get {
      return graphQLMap["regularPrice"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "regularPrice")
    }
  }

  /// 直播价格
  public var livePrice: Swift.Optional<Int?> {
    get {
      return graphQLMap["livePrice"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "livePrice")
    }
  }

  /// 商品类目
  public var variants: Swift.Optional<[VariantInput?]?> {
    get {
      return graphQLMap["variants"] as? Swift.Optional<[VariantInput?]?> ?? Swift.Optional<[VariantInput?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "variants")
    }
  }

  /// 是否包邮
  public var isFreeShipping: Swift.Optional<Bool?> {
    get {
      return graphQLMap["isFreeShipping"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isFreeShipping")
    }
  }

  /// 快递信息
  public var shippingInfo: Swift.Optional<ShippingInfoInput?> {
    get {
      return graphQLMap["shippingInfo"] as? Swift.Optional<ShippingInfoInput?> ?? Swift.Optional<ShippingInfoInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "shippingInfo")
    }
  }

  /// 拍卖价格
  public var auctionPrice: Swift.Optional<Int?> {
    get {
      return graphQLMap["auctionPrice"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "auctionPrice")
    }
  }

  /// 拍卖时间信息
  public var auctionSetting: Swift.Optional<AuctionSettingInput?> {
    get {
      return graphQLMap["auctionSetting"] as? Swift.Optional<AuctionSettingInput?> ?? Swift.Optional<AuctionSettingInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "auctionSetting")
    }
  }
}

public enum reportType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case contentSpam
  case contentMinorGrooming
  case contentMinorSafety
  case contentPretendingMe
  case contentPretendingACelebrityOrPublicFigure
  case contentPretendingAOrganizationOrBusiness
  case contentFalseInformation
  case contentOther
  case contentHarassmentOrBullying
  case contentAnimalCruelty
  case contentHateSpeech
  case contentNudityOrSexualActivity
  case contentRacism
  case contentSuicideOrSelfNjury
  case contentIllegalActivities
  case contentDangerousOrganizationsOrIndividuals
  case contentViolentContent
  case accountSpam
  case accountPretendingMe
  case accountPretendingACelebrityOrPublicFigure
  case accountPretendingAOrganizationOrBusiness
  case accountMinorSafety
  case accountHarassmentOrBullying
  case accountAnimalCruelty
  case accountHateSpeech
  case accountNudityOrSexualActivity
  case accountSuicideOrSelfNjury
  case accountIllegalActivities
  case accountDangerousOrganizationsOrIndividuals
  case accountViolentContent
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "CONTENT_SPAM": self = .contentSpam
      case "CONTENT_MINOR_GROOMING": self = .contentMinorGrooming
      case "CONTENT_MINOR_SAFETY": self = .contentMinorSafety
      case "CONTENT_PRETENDING_ME": self = .contentPretendingMe
      case "CONTENT_PRETENDING_A_CELEBRITY_OR_PUBLIC_FIGURE": self = .contentPretendingACelebrityOrPublicFigure
      case "CONTENT_PRETENDING_A_ORGANIZATION_OR_BUSINESS": self = .contentPretendingAOrganizationOrBusiness
      case "CONTENT_FALSE_INFORMATION": self = .contentFalseInformation
      case "CONTENT_OTHER": self = .contentOther
      case "CONTENT_HARASSMENT_OR_BULLYING": self = .contentHarassmentOrBullying
      case "CONTENT_ANIMAL_CRUELTY": self = .contentAnimalCruelty
      case "CONTENT_HATE_SPEECH": self = .contentHateSpeech
      case "CONTENT_NUDITY_OR_SEXUAL_ACTIVITY": self = .contentNudityOrSexualActivity
      case "CONTENT_RACISM": self = .contentRacism
      case "CONTENT_SUICIDE_OR_SELF_NJURY": self = .contentSuicideOrSelfNjury
      case "CONTENT_ILLEGAL_ACTIVITIES": self = .contentIllegalActivities
      case "CONTENT_DANGEROUS_ORGANIZATIONS_OR_INDIVIDUALS": self = .contentDangerousOrganizationsOrIndividuals
      case "CONTENT_VIOLENT_CONTENT": self = .contentViolentContent
      case "ACCOUNT_SPAM": self = .accountSpam
      case "ACCOUNT_PRETENDING_ME": self = .accountPretendingMe
      case "ACCOUNT_PRETENDING_A_CELEBRITY_OR_PUBLIC_FIGURE": self = .accountPretendingACelebrityOrPublicFigure
      case "ACCOUNT_PRETENDING_A_ORGANIZATION_OR_BUSINESS": self = .accountPretendingAOrganizationOrBusiness
      case "ACCOUNT_MINOR_SAFETY": self = .accountMinorSafety
      case "ACCOUNT_HARASSMENT_OR_BULLYING": self = .accountHarassmentOrBullying
      case "ACCOUNT_ANIMAL_CRUELTY": self = .accountAnimalCruelty
      case "ACCOUNT_HATE_SPEECH": self = .accountHateSpeech
      case "ACCOUNT_NUDITY_OR_SEXUAL_ACTIVITY": self = .accountNudityOrSexualActivity
      case "ACCOUNT_SUICIDE_OR_SELF_NJURY": self = .accountSuicideOrSelfNjury
      case "ACCOUNT_ILLEGAL_ACTIVITIES": self = .accountIllegalActivities
      case "ACCOUNT_DANGEROUS_ORGANIZATIONS_OR_INDIVIDUALS": self = .accountDangerousOrganizationsOrIndividuals
      case "ACCOUNT_VIOLENT_CONTENT": self = .accountViolentContent
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .contentSpam: return "CONTENT_SPAM"
      case .contentMinorGrooming: return "CONTENT_MINOR_GROOMING"
      case .contentMinorSafety: return "CONTENT_MINOR_SAFETY"
      case .contentPretendingMe: return "CONTENT_PRETENDING_ME"
      case .contentPretendingACelebrityOrPublicFigure: return "CONTENT_PRETENDING_A_CELEBRITY_OR_PUBLIC_FIGURE"
      case .contentPretendingAOrganizationOrBusiness: return "CONTENT_PRETENDING_A_ORGANIZATION_OR_BUSINESS"
      case .contentFalseInformation: return "CONTENT_FALSE_INFORMATION"
      case .contentOther: return "CONTENT_OTHER"
      case .contentHarassmentOrBullying: return "CONTENT_HARASSMENT_OR_BULLYING"
      case .contentAnimalCruelty: return "CONTENT_ANIMAL_CRUELTY"
      case .contentHateSpeech: return "CONTENT_HATE_SPEECH"
      case .contentNudityOrSexualActivity: return "CONTENT_NUDITY_OR_SEXUAL_ACTIVITY"
      case .contentRacism: return "CONTENT_RACISM"
      case .contentSuicideOrSelfNjury: return "CONTENT_SUICIDE_OR_SELF_NJURY"
      case .contentIllegalActivities: return "CONTENT_ILLEGAL_ACTIVITIES"
      case .contentDangerousOrganizationsOrIndividuals: return "CONTENT_DANGEROUS_ORGANIZATIONS_OR_INDIVIDUALS"
      case .contentViolentContent: return "CONTENT_VIOLENT_CONTENT"
      case .accountSpam: return "ACCOUNT_SPAM"
      case .accountPretendingMe: return "ACCOUNT_PRETENDING_ME"
      case .accountPretendingACelebrityOrPublicFigure: return "ACCOUNT_PRETENDING_A_CELEBRITY_OR_PUBLIC_FIGURE"
      case .accountPretendingAOrganizationOrBusiness: return "ACCOUNT_PRETENDING_A_ORGANIZATION_OR_BUSINESS"
      case .accountMinorSafety: return "ACCOUNT_MINOR_SAFETY"
      case .accountHarassmentOrBullying: return "ACCOUNT_HARASSMENT_OR_BULLYING"
      case .accountAnimalCruelty: return "ACCOUNT_ANIMAL_CRUELTY"
      case .accountHateSpeech: return "ACCOUNT_HATE_SPEECH"
      case .accountNudityOrSexualActivity: return "ACCOUNT_NUDITY_OR_SEXUAL_ACTIVITY"
      case .accountSuicideOrSelfNjury: return "ACCOUNT_SUICIDE_OR_SELF_NJURY"
      case .accountIllegalActivities: return "ACCOUNT_ILLEGAL_ACTIVITIES"
      case .accountDangerousOrganizationsOrIndividuals: return "ACCOUNT_DANGEROUS_ORGANIZATIONS_OR_INDIVIDUALS"
      case .accountViolentContent: return "ACCOUNT_VIOLENT_CONTENT"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: reportType, rhs: reportType) -> Bool {
    switch (lhs, rhs) {
      case (.contentSpam, .contentSpam): return true
      case (.contentMinorGrooming, .contentMinorGrooming): return true
      case (.contentMinorSafety, .contentMinorSafety): return true
      case (.contentPretendingMe, .contentPretendingMe): return true
      case (.contentPretendingACelebrityOrPublicFigure, .contentPretendingACelebrityOrPublicFigure): return true
      case (.contentPretendingAOrganizationOrBusiness, .contentPretendingAOrganizationOrBusiness): return true
      case (.contentFalseInformation, .contentFalseInformation): return true
      case (.contentOther, .contentOther): return true
      case (.contentHarassmentOrBullying, .contentHarassmentOrBullying): return true
      case (.contentAnimalCruelty, .contentAnimalCruelty): return true
      case (.contentHateSpeech, .contentHateSpeech): return true
      case (.contentNudityOrSexualActivity, .contentNudityOrSexualActivity): return true
      case (.contentRacism, .contentRacism): return true
      case (.contentSuicideOrSelfNjury, .contentSuicideOrSelfNjury): return true
      case (.contentIllegalActivities, .contentIllegalActivities): return true
      case (.contentDangerousOrganizationsOrIndividuals, .contentDangerousOrganizationsOrIndividuals): return true
      case (.contentViolentContent, .contentViolentContent): return true
      case (.accountSpam, .accountSpam): return true
      case (.accountPretendingMe, .accountPretendingMe): return true
      case (.accountPretendingACelebrityOrPublicFigure, .accountPretendingACelebrityOrPublicFigure): return true
      case (.accountPretendingAOrganizationOrBusiness, .accountPretendingAOrganizationOrBusiness): return true
      case (.accountMinorSafety, .accountMinorSafety): return true
      case (.accountHarassmentOrBullying, .accountHarassmentOrBullying): return true
      case (.accountAnimalCruelty, .accountAnimalCruelty): return true
      case (.accountHateSpeech, .accountHateSpeech): return true
      case (.accountNudityOrSexualActivity, .accountNudityOrSexualActivity): return true
      case (.accountSuicideOrSelfNjury, .accountSuicideOrSelfNjury): return true
      case (.accountIllegalActivities, .accountIllegalActivities): return true
      case (.accountDangerousOrganizationsOrIndividuals, .accountDangerousOrganizationsOrIndividuals): return true
      case (.accountViolentContent, .accountViolentContent): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [reportType] {
    return [
      .contentSpam,
      .contentMinorGrooming,
      .contentMinorSafety,
      .contentPretendingMe,
      .contentPretendingACelebrityOrPublicFigure,
      .contentPretendingAOrganizationOrBusiness,
      .contentFalseInformation,
      .contentOther,
      .contentHarassmentOrBullying,
      .contentAnimalCruelty,
      .contentHateSpeech,
      .contentNudityOrSexualActivity,
      .contentRacism,
      .contentSuicideOrSelfNjury,
      .contentIllegalActivities,
      .contentDangerousOrganizationsOrIndividuals,
      .contentViolentContent,
      .accountSpam,
      .accountPretendingMe,
      .accountPretendingACelebrityOrPublicFigure,
      .accountPretendingAOrganizationOrBusiness,
      .accountMinorSafety,
      .accountHarassmentOrBullying,
      .accountAnimalCruelty,
      .accountHateSpeech,
      .accountNudityOrSexualActivity,
      .accountSuicideOrSelfNjury,
      .accountIllegalActivities,
      .accountDangerousOrganizationsOrIndividuals,
      .accountViolentContent,
    ]
  }
}

public enum reportObjectModel: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case video
  case live
  case user
  case comment
  case chatroomComment
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Video": self = .video
      case "Live": self = .live
      case "User": self = .user
      case "Comment": self = .comment
      case "ChatroomComment": self = .chatroomComment
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .video: return "Video"
      case .live: return "Live"
      case .user: return "User"
      case .comment: return "Comment"
      case .chatroomComment: return "ChatroomComment"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: reportObjectModel, rhs: reportObjectModel) -> Bool {
    switch (lhs, rhs) {
      case (.video, .video): return true
      case (.live, .live): return true
      case (.user, .user): return true
      case (.comment, .comment): return true
      case (.chatroomComment, .chatroomComment): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [reportObjectModel] {
    return [
      .video,
      .live,
      .user,
      .comment,
      .chatroomComment,
    ]
  }
}

public enum VideoTypeUserCreate: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case normal
  case teaser
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NORMAL": self = .normal
      case "TEASER": self = .teaser
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .normal: return "NORMAL"
      case .teaser: return "TEASER"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: VideoTypeUserCreate, rhs: VideoTypeUserCreate) -> Bool {
    switch (lhs, rhs) {
      case (.normal, .normal): return true
      case (.teaser, .teaser): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [VideoTypeUserCreate] {
    return [
      .normal,
      .teaser,
    ]
  }
}

public enum SellerRequestReviewStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case reviewing
  case approved
  case declined
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Reviewing": self = .reviewing
      case "Approved": self = .approved
      case "Declined": self = .declined
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .reviewing: return "Reviewing"
      case .approved: return "Approved"
      case .declined: return "Declined"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SellerRequestReviewStatus, rhs: SellerRequestReviewStatus) -> Bool {
    switch (lhs, rhs) {
      case (.reviewing, .reviewing): return true
      case (.approved, .approved): return true
      case (.declined, .declined): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SellerRequestReviewStatus] {
    return [
      .reviewing,
      .approved,
      .declined,
    ]
  }
}

public enum enum__listOrderAction: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case buying
  case selling
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Buying": self = .buying
      case "Selling": self = .selling
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .buying: return "Buying"
      case .selling: return "Selling"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__listOrderAction, rhs: enum__listOrderAction) -> Bool {
    switch (lhs, rhs) {
      case (.buying, .buying): return true
      case (.selling, .selling): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__listOrderAction] {
    return [
      .buying,
      .selling,
    ]
  }
}

public enum OrderSource: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case live
  case store
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "LIVE": self = .live
      case "STORE": self = .store
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .live: return "LIVE"
      case .store: return "STORE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: OrderSource, rhs: OrderSource) -> Bool {
    switch (lhs, rhs) {
      case (.live, .live): return true
      case (.store, .store): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [OrderSource] {
    return [
      .live,
      .store,
    ]
  }
}

public enum algorithmFindUsers_mudelNames: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  @available(*, deprecated, message: "可用 topCreatorsForYou 代替，效果一样")
  case discoverPageTopCreatorsForYou
  case topCreatorsForYou
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "discoverPage_topCreatorsForYou": self = .discoverPageTopCreatorsForYou
      case "topCreatorsForYou": self = .topCreatorsForYou
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .discoverPageTopCreatorsForYou: return "discoverPage_topCreatorsForYou"
      case .topCreatorsForYou: return "topCreatorsForYou"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: algorithmFindUsers_mudelNames, rhs: algorithmFindUsers_mudelNames) -> Bool {
    switch (lhs, rhs) {
      case (.discoverPageTopCreatorsForYou, .discoverPageTopCreatorsForYou): return true
      case (.topCreatorsForYou, .topCreatorsForYou): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [algorithmFindUsers_mudelNames] {
    return [
      .discoverPageTopCreatorsForYou,
      .topCreatorsForYou,
    ]
  }
}

/// 排序字段
public enum bannerTypeField: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 视频
  case video
  /// 预告
  case teaser
  /// 直播
  case live
  /// WEBVIEW
  case webview
  /// 活动 Event
  case event
  /// 空白
  case blank
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "VIDEO": self = .video
      case "TEASER": self = .teaser
      case "LIVE": self = .live
      case "WEBVIEW": self = .webview
      case "EVENT": self = .event
      case "BLANK": self = .blank
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .video: return "VIDEO"
      case .teaser: return "TEASER"
      case .live: return "LIVE"
      case .webview: return "WEBVIEW"
      case .event: return "EVENT"
      case .blank: return "BLANK"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: bannerTypeField, rhs: bannerTypeField) -> Bool {
    switch (lhs, rhs) {
      case (.video, .video): return true
      case (.teaser, .teaser): return true
      case (.live, .live): return true
      case (.webview, .webview): return true
      case (.event, .event): return true
      case (.blank, .blank): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [bannerTypeField] {
    return [
      .video,
      .teaser,
      .live,
      .webview,
      .event,
      .blank,
    ]
  }
}

/// 排序
public struct findOrders_sort: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(field: findOrders_sort_field, value: sortValue) {
    graphQLMap = ["field": field, "value": value]
  }

  /// 排序字段名称
  public var field: findOrders_sort_field {
    get {
      return graphQLMap["field"] as! findOrders_sort_field
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "field")
    }
  }

  /// 排序
  public var value: sortValue {
    get {
      return graphQLMap["value"] as! sortValue
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

/// 排序字段
public enum findOrders_sort_field: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 创建日期
  case createdAt
  /// 订单总价格
  case paidPrice
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "createdAt": self = .createdAt
      case "paidPrice": self = .paidPrice
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .createdAt: return "createdAt"
      case .paidPrice: return "paidPrice"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: findOrders_sort_field, rhs: findOrders_sort_field) -> Bool {
    switch (lhs, rhs) {
      case (.createdAt, .createdAt): return true
      case (.paidPrice, .paidPrice): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [findOrders_sort_field] {
    return [
      .createdAt,
      .paidPrice,
    ]
  }
}

/// 排序规则
public enum sortValue: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case asc
  case desc
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ASC": self = .asc
      case "DESC": self = .desc
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .asc: return "ASC"
      case .desc: return "DESC"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: sortValue, rhs: sortValue) -> Bool {
    switch (lhs, rhs) {
      case (.asc, .asc): return true
      case (.desc, .desc): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [sortValue] {
    return [
      .asc,
      .desc,
    ]
  }
}

public enum enum__oauthProvider: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case facebook
  case google
  case apple
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "FACEBOOK": self = .facebook
      case "GOOGLE": self = .google
      case "APPLE": self = .apple
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .facebook: return "FACEBOOK"
      case .google: return "GOOGLE"
      case .apple: return "APPLE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__oauthProvider, rhs: enum__oauthProvider) -> Bool {
    switch (lhs, rhs) {
      case (.facebook, .facebook): return true
      case (.google, .google): return true
      case (.apple, .apple): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__oauthProvider] {
    return [
      .facebook,
      .google,
      .apple,
    ]
  }
}

public enum enum_logoffedReason: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case privacyConcerns
  case tooManyAds
  case canNotFindPeopleToFollow
  case concernedAboutMyData
  case wantToRemoveSomething
  case tooBusyTooDistracting
  case createASecondAccount
  case troubleGettingStarted
  case somethingElse
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "PRIVACY_CONCERNS": self = .privacyConcerns
      case "TOO_MANY_ADS": self = .tooManyAds
      case "CAN_NOT_FIND_PEOPLE_TO_FOLLOW": self = .canNotFindPeopleToFollow
      case "CONCERNED_ABOUT_MY_DATA": self = .concernedAboutMyData
      case "WANT_TO_REMOVE_SOMETHING": self = .wantToRemoveSomething
      case "TOO_BUSY_TOO_DISTRACTING": self = .tooBusyTooDistracting
      case "CREATE_A_SECOND_ACCOUNT": self = .createASecondAccount
      case "TROUBLE_GETTING_STARTED": self = .troubleGettingStarted
      case "SOMETHING_ELSE": self = .somethingElse
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .privacyConcerns: return "PRIVACY_CONCERNS"
      case .tooManyAds: return "TOO_MANY_ADS"
      case .canNotFindPeopleToFollow: return "CAN_NOT_FIND_PEOPLE_TO_FOLLOW"
      case .concernedAboutMyData: return "CONCERNED_ABOUT_MY_DATA"
      case .wantToRemoveSomething: return "WANT_TO_REMOVE_SOMETHING"
      case .tooBusyTooDistracting: return "TOO_BUSY_TOO_DISTRACTING"
      case .createASecondAccount: return "CREATE_A_SECOND_ACCOUNT"
      case .troubleGettingStarted: return "TROUBLE_GETTING_STARTED"
      case .somethingElse: return "SOMETHING_ELSE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum_logoffedReason, rhs: enum_logoffedReason) -> Bool {
    switch (lhs, rhs) {
      case (.privacyConcerns, .privacyConcerns): return true
      case (.tooManyAds, .tooManyAds): return true
      case (.canNotFindPeopleToFollow, .canNotFindPeopleToFollow): return true
      case (.concernedAboutMyData, .concernedAboutMyData): return true
      case (.wantToRemoveSomething, .wantToRemoveSomething): return true
      case (.tooBusyTooDistracting, .tooBusyTooDistracting): return true
      case (.createASecondAccount, .createASecondAccount): return true
      case (.troubleGettingStarted, .troubleGettingStarted): return true
      case (.somethingElse, .somethingElse): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum_logoffedReason] {
    return [
      .privacyConcerns,
      .tooManyAds,
      .canNotFindPeopleToFollow,
      .concernedAboutMyData,
      .wantToRemoveSomething,
      .tooBusyTooDistracting,
      .createASecondAccount,
      .troubleGettingStarted,
      .somethingElse,
    ]
  }
}

/// 短信动作类型
public enum enum__msmAction: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 注册
  case register
  /// 登录
  case login
  /// 绑定手机号
  case bindPhone
  /// 验证现有手机号
  case verifyPhone
  /// 修改手机号
  case changePhone
  /// 重置密码
  case resetPassword
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "REGISTER": self = .register
      case "LOGIN": self = .login
      case "BIND_PHONE": self = .bindPhone
      case "VERIFY_PHONE": self = .verifyPhone
      case "CHANGE_PHONE": self = .changePhone
      case "RESET_PASSWORD": self = .resetPassword
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .register: return "REGISTER"
      case .login: return "LOGIN"
      case .bindPhone: return "BIND_PHONE"
      case .verifyPhone: return "VERIFY_PHONE"
      case .changePhone: return "CHANGE_PHONE"
      case .resetPassword: return "RESET_PASSWORD"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__msmAction, rhs: enum__msmAction) -> Bool {
    switch (lhs, rhs) {
      case (.register, .register): return true
      case (.login, .login): return true
      case (.bindPhone, .bindPhone): return true
      case (.verifyPhone, .verifyPhone): return true
      case (.changePhone, .changePhone): return true
      case (.resetPassword, .resetPassword): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__msmAction] {
    return [
      .register,
      .login,
      .bindPhone,
      .verifyPhone,
      .changePhone,
      .resetPassword,
    ]
  }
}

public enum shareType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 视频
  case video
  /// 直播
  case live
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "VIDEO": self = .video
      case "LIVE": self = .live
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .video: return "VIDEO"
      case .live: return "LIVE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: shareType, rhs: shareType) -> Bool {
    switch (lhs, rhs) {
      case (.video, .video): return true
      case (.live, .live): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [shareType] {
    return [
      .video,
      .live,
    ]
  }
}

public struct UpdateCouponInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(live: Swift.Optional<GraphQLID?> = nil, discountType: Swift.Optional<enum__discountType?> = nil, value: Swift.Optional<Int?> = nil, quantity: Swift.Optional<Int?> = nil, deleted: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["live": live, "discountType": discountType, "value": value, "quantity": quantity, "deleted": deleted]
  }

  public var live: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["live"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "live")
    }
  }

  public var discountType: Swift.Optional<enum__discountType?> {
    get {
      return graphQLMap["discountType"] as? Swift.Optional<enum__discountType?> ?? Swift.Optional<enum__discountType?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "discountType")
    }
  }

  public var value: Swift.Optional<Int?> {
    get {
      return graphQLMap["value"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }

  public var quantity: Swift.Optional<Int?> {
    get {
      return graphQLMap["quantity"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "quantity")
    }
  }

  /// ***【接口权限: 管理员】***
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }
}

public struct inputUpdateOrder: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(trackingNumber: Swift.Optional<String?> = nil, shippingCarrier: Swift.Optional<String?> = nil, status: Swift.Optional<UpdateOrderStatus?> = nil, deleted: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["trackingNumber": trackingNumber, "shippingCarrier": shippingCarrier, "status": status, "deleted": deleted]
  }

  /// **快递单号**
  /// 
  /// 
  /// 测试环境 Test Tracking Codes：
  /// EZ1000000001	pre_transit
  /// EZ2000000002	in_transit
  /// EZ3000000003	out_for_delivery
  /// EZ4000000004	delivered
  /// EZ5000000005	return_to_sender
  /// EZ6000000006	failure
  /// EZ7000000007	unknown
  public var trackingNumber: Swift.Optional<String?> {
    get {
      return graphQLMap["trackingNumber"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "trackingNumber")
    }
  }

  /// 快递公司，从 findShippingOptions 接口中获取
  public var shippingCarrier: Swift.Optional<String?> {
    get {
      return graphQLMap["shippingCarrier"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "shippingCarrier")
    }
  }

  /// ***【接口权限: 管理员】***
  /// 更新订单状态
  public var status: Swift.Optional<UpdateOrderStatus?> {
    get {
      return graphQLMap["status"] as? Swift.Optional<UpdateOrderStatus?> ?? Swift.Optional<UpdateOrderStatus?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  /// 用户或管理员删除订单时传该字段
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }
}

public enum UpdateOrderStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 订单已取消
  case canceled
  /// 已退款
  case refunded
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "CANCELED": self = .canceled
      case "REFUNDED": self = .refunded
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .canceled: return "CANCELED"
      case .refunded: return "REFUNDED"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: UpdateOrderStatus, rhs: UpdateOrderStatus) -> Bool {
    switch (lhs, rhs) {
      case (.canceled, .canceled): return true
      case (.refunded, .refunded): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [UpdateOrderStatus] {
    return [
      .canceled,
      .refunded,
    ]
  }
}

public struct ProductUpdatesInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(deleted: Swift.Optional<Bool?> = nil, status: Swift.Optional<enum__productStatus?> = nil, name: Swift.Optional<String?> = nil, description: Swift.Optional<String?> = nil, images: Swift.Optional<[String?]?> = nil, stock: Swift.Optional<Int?> = nil, regularPrice: Swift.Optional<Int?> = nil, livePrice: Swift.Optional<Int?> = nil, category: Swift.Optional<GraphQLID?> = nil, tags: Swift.Optional<[String?]?> = nil, variants: Swift.Optional<[VariantInput?]?> = nil, liveHost: Swift.Optional<GraphQLID?> = nil, isFreeShipping: Swift.Optional<Bool?> = nil, shippingInfo: Swift.Optional<ShippingInfoInput?> = nil, displayInStore: Swift.Optional<Bool?> = nil, liveOnly: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["deleted": deleted, "status": status, "name": name, "description": description, "images": images, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "category": category, "tags": tags, "variants": variants, "liveHost": liveHost, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo, "displayInStore": displayInStore, "liveOnly": liveOnly]
  }

  /// 是否删除商品，传 true 删除. **此参数和其他参数互斥，传此参数，会忽略其他所有 update 参数**
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }

  /// 商品上架状态。上架的商品才能售卖
  public var status: Swift.Optional<enum__productStatus?> {
    get {
      return graphQLMap["status"] as? Swift.Optional<enum__productStatus?> ?? Swift.Optional<enum__productStatus?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  /// 名称
  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 描述
  public var description: Swift.Optional<String?> {
    get {
      return graphQLMap["description"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  /// 图片
  public var images: Swift.Optional<[String?]?> {
    get {
      return graphQLMap["images"] as? Swift.Optional<[String?]?> ?? Swift.Optional<[String?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "images")
    }
  }

  /// **DEPRECATED** 商品数量
  public var stock: Swift.Optional<Int?> {
    get {
      return graphQLMap["stock"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "stock")
    }
  }

  /// 常规价格
  public var regularPrice: Swift.Optional<Int?> {
    get {
      return graphQLMap["regularPrice"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "regularPrice")
    }
  }

  /// 直播价格
  public var livePrice: Swift.Optional<Int?> {
    get {
      return graphQLMap["livePrice"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "livePrice")
    }
  }

  /// 【Seller Dashboard 专用】商品分类
  public var category: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["category"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "category")
    }
  }

  /// **DEPRECATED** 商品款式标签
  public var tags: Swift.Optional<[String?]?> {
    get {
      return graphQLMap["tags"] as? Swift.Optional<[String?]?> ?? Swift.Optional<[String?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tags")
    }
  }

  /// 商品类目
  public var variants: Swift.Optional<[VariantInput?]?> {
    get {
      return graphQLMap["variants"] as? Swift.Optional<[VariantInput?]?> ?? Swift.Optional<[VariantInput?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "variants")
    }
  }

  /// 带货主播
  public var liveHost: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["liveHost"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "liveHost")
    }
  }

  /// 是否包邮
  public var isFreeShipping: Swift.Optional<Bool?> {
    get {
      return graphQLMap["isFreeShipping"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isFreeShipping")
    }
  }

  /// 快递信息
  public var shippingInfo: Swift.Optional<ShippingInfoInput?> {
    get {
      return graphQLMap["shippingInfo"] as? Swift.Optional<ShippingInfoInput?> ?? Swift.Optional<ShippingInfoInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "shippingInfo")
    }
  }

  /// 是否展示在 store 里，true 表示展示，false 不展示. 默认 true
  public var displayInStore: Swift.Optional<Bool?> {
    get {
      return graphQLMap["displayInStore"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "displayInStore")
    }
  }

  /// 是否只更新 live 商品信息。此参数传 true 时，其他参数对 product 的修改，如库存、价格等，不会涉及小店中的商品，只会影响下一场直播时的商品信息（UX 上先调用 updateProduct 修改商品信息后再开启直播）
  public var liveOnly: Swift.Optional<Bool?> {
    get {
      return graphQLMap["liveOnly"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "liveOnly")
    }
  }
}

public enum TransferStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case success
  case failed
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Success": self = .success
      case "Failed": self = .failed
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .success: return "Success"
      case .failed: return "Failed"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: TransferStatus, rhs: TransferStatus) -> Bool {
    switch (lhs, rhs) {
      case (.success, .success): return true
      case (.failed, .failed): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [TransferStatus] {
    return [
      .success,
      .failed,
    ]
  }
}

public struct commentSort: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(field: commentSortField, value: sortValue) {
    graphQLMap = ["field": field, "value": value]
  }

  /// 排序字段名称
  public var field: commentSortField {
    get {
      return graphQLMap["field"] as! commentSortField
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "field")
    }
  }

  /// 排序
  public var value: sortValue {
    get {
      return graphQLMap["value"] as! sortValue
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

/// 排序字段
public enum commentSortField: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 创建日期
  case createdAt
  /// 点赞数
  case likeCount
  /// 回复数
  @available(*, deprecated, message: "需求上不需要 reply 功能了")
  case replyCount
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "createdAt": self = .createdAt
      case "likeCount": self = .likeCount
      case "replyCount": self = .replyCount
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .createdAt: return "createdAt"
      case .likeCount: return "likeCount"
      case .replyCount: return "replyCount"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: commentSortField, rhs: commentSortField) -> Bool {
    switch (lhs, rhs) {
      case (.createdAt, .createdAt): return true
      case (.likeCount, .likeCount): return true
      case (.replyCount, .replyCount): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [commentSortField] {
    return [
      .createdAt,
      .likeCount,
      .replyCount,
    ]
  }
}

/// card 存储于 stripe，stripe 只允许更新 expiryDate 和 billingAddress
public struct updateCardInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(firstName: Swift.Optional<String?> = nil, lastName: Swift.Optional<String?> = nil, email: Swift.Optional<String?> = nil, expiryDate: Swift.Optional<String?> = nil, isDefaultCard: Swift.Optional<Bool?> = nil, billingAddress: Swift.Optional<GraphQLID?> = nil) {
    graphQLMap = ["firstName": firstName, "lastName": lastName, "email": email, "expiryDate": expiryDate, "isDefaultCard": isDefaultCard, "billingAddress": billingAddress]
  }

  public var firstName: Swift.Optional<String?> {
    get {
      return graphQLMap["firstName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "firstName")
    }
  }

  public var lastName: Swift.Optional<String?> {
    get {
      return graphQLMap["lastName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastName")
    }
  }

  public var email: Swift.Optional<String?> {
    get {
      return graphQLMap["email"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var expiryDate: Swift.Optional<String?> {
    get {
      return graphQLMap["expiryDate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "expiryDate")
    }
  }

  public var isDefaultCard: Swift.Optional<Bool?> {
    get {
      return graphQLMap["isDefaultCard"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isDefaultCard")
    }
  }

  public var billingAddress: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["billingAddress"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "billingAddress")
    }
  }
}

/// app 端修改 live 属性参数列表
public struct inputUpdateLive: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(status: Swift.Optional<Bool?> = nil, explainProduct: Swift.Optional<GraphQLID?> = nil, feedback: Swift.Optional<String?> = nil, coverImage: Swift.Optional<String?> = nil, title: Swift.Optional<String?> = nil, scheduleStartAt: Swift.Optional<String?> = nil, location: Swift.Optional<[Double?]?> = nil, deleted: Swift.Optional<Bool?> = nil, suspendNote: Swift.Optional<String?> = nil) {
    graphQLMap = ["status": status, "explainProduct": explainProduct, "feedback": feedback, "coverImage": coverImage, "title": title, "scheduleStartAt": scheduleStartAt, "location": location, "deleted": deleted, "suspendNote": suspendNote]
  }

  /// 设置是否正在直播。传 true 表示开启直播，传 false 表示结束直播，结束直播会触发环信和 ivs STOP_LIVE 聊天室事件广播
  public var status: Swift.Optional<Bool?> {
    get {
      return graphQLMap["status"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  /// 主播正在讲解的商品。更新该值时，同时会触发环信和 ivs EXPLAIN_PRODUCT 聊天室事件广播
  public var explainProduct: Swift.Optional<GraphQLID?> {
    get {
      return graphQLMap["explainProduct"] as? Swift.Optional<GraphQLID?> ?? Swift.Optional<GraphQLID?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "explainProduct")
    }
  }

  /// 直播反馈
  public var feedback: Swift.Optional<String?> {
    get {
      return graphQLMap["feedback"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "feedback")
    }
  }

  /// 【仅对 live schedule 有效】封面图
  public var coverImage: Swift.Optional<String?> {
    get {
      return graphQLMap["coverImage"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "coverImage")
    }
  }

  /// 【仅对 live schedule 有效】标题
  public var title: Swift.Optional<String?> {
    get {
      return graphQLMap["title"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "title")
    }
  }

  /// 【仅对 live schedule 有效】直播预告时间
  public var scheduleStartAt: Swift.Optional<String?> {
    get {
      return graphQLMap["scheduleStartAt"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleStartAt")
    }
  }

  /// （【DEPRECATED】客户端不会编辑此字段）经纬度位置 type:[lng,lat] 经度，纬度
  public var location: Swift.Optional<[Double?]?> {
    get {
      return graphQLMap["location"] as? Swift.Optional<[Double?]?> ?? Swift.Optional<[Double?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "location")
    }
  }

  /// （【DEPRECATED】客户端不可编辑此字段）删除
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }

  /// （【DEPRECATED】客户端不可编辑此字段）直播被管理员禁止时，管理员填写的原因备注
  public var suspendNote: Swift.Optional<String?> {
    get {
      return graphQLMap["suspendNote"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "suspendNote")
    }
  }
}

public struct inputUpdateUser: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(username: Swift.Optional<String?> = nil, name: Swift.Optional<String?> = nil, gender: Swift.Optional<enum__gender?> = nil, birthday: Swift.Optional<String?> = nil, bio: Swift.Optional<String?> = nil, avatar: Swift.Optional<String?> = nil, website: Swift.Optional<String?> = nil, instagram: Swift.Optional<inputInstagram?> = nil, facebook: Swift.Optional<inputFacebook?> = nil, pushNotifications: Swift.Optional<InputPushNotifications?> = nil, role: Swift.Optional<enum__role?> = nil, tags: Swift.Optional<[String]?> = nil, deleted: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["username": username, "name": name, "gender": gender, "birthday": birthday, "bio": bio, "avatar": avatar, "website": website, "instagram": instagram, "facebook": facebook, "pushNotifications": pushNotifications, "role": role, "tags": tags, "deleted": deleted]
  }

  /// 用户名
  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  /// 名称
  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 性别
  public var gender: Swift.Optional<enum__gender?> {
    get {
      return graphQLMap["gender"] as? Swift.Optional<enum__gender?> ?? Swift.Optional<enum__gender?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  /// 生日 (日/月/年) 格式 DD/MM/YYYY
  public var birthday: Swift.Optional<String?> {
    get {
      return graphQLMap["birthday"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "birthday")
    }
  }

  /// 个人简历
  public var bio: Swift.Optional<String?> {
    get {
      return graphQLMap["bio"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "bio")
    }
  }

  /// 头像
  public var avatar: Swift.Optional<String?> {
    get {
      return graphQLMap["avatar"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "avatar")
    }
  }

  /// 个人网站
  public var website: Swift.Optional<String?> {
    get {
      return graphQLMap["website"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "website")
    }
  }

  /// instagram 信息。传 null 表示取消 instagram 授权，删去相关信息
  public var instagram: Swift.Optional<inputInstagram?> {
    get {
      return graphQLMap["instagram"] as? Swift.Optional<inputInstagram?> ?? Swift.Optional<inputInstagram?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "instagram")
    }
  }

  /// facebook 信息。传 null 表示取消 facebook 授权，删去相关信息
  public var facebook: Swift.Optional<inputFacebook?> {
    get {
      return graphQLMap["facebook"] as? Swift.Optional<inputFacebook?> ?? Swift.Optional<inputFacebook?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "facebook")
    }
  }

  /// follow、like、comment、mention 推送的开关
  public var pushNotifications: Swift.Optional<InputPushNotifications?> {
    get {
      return graphQLMap["pushNotifications"] as? Swift.Optional<InputPushNotifications?> ?? Swift.Optional<InputPushNotifications?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "pushNotifications")
    }
  }

  /// ***【接口权限: 管理员】***
  /// 个人角色
  public var role: Swift.Optional<enum__role?> {
    get {
      return graphQLMap["role"] as? Swift.Optional<enum__role?> ?? Swift.Optional<enum__role?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "role")
    }
  }

  /// ***【接口权限: 管理员】***
  /// 标识
  public var tags: Swift.Optional<[String]?> {
    get {
      return graphQLMap["tags"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tags")
    }
  }

  /// ***【接口权限: 管理员】***
  /// 是否被删除
  public var deleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["deleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "deleted")
    }
  }
}

public struct inputInstagram: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: Swift.Optional<String?> = nil, username: Swift.Optional<String?> = nil, homePage: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "username": username, "homePage": homePage]
  }

  public var id: Swift.Optional<String?> {
    get {
      return graphQLMap["id"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  public var homePage: Swift.Optional<String?> {
    get {
      return graphQLMap["homePage"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "homePage")
    }
  }
}

public struct inputFacebook: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: Swift.Optional<String?> = nil, username: Swift.Optional<String?> = nil, homePage: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "username": username, "homePage": homePage]
  }

  public var id: Swift.Optional<String?> {
    get {
      return graphQLMap["id"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  public var homePage: Swift.Optional<String?> {
    get {
      return graphQLMap["homePage"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "homePage")
    }
  }
}

public struct InputPushNotifications: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(interactions: Swift.Optional<Bool?> = nil, live: Swift.Optional<Bool?> = nil, video: Swift.Optional<Bool?> = nil, order: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["interactions": interactions, "live": live, "video": video, "order": order]
  }

  /// follow、like、comment、mention 推送的开关
  public var interactions: Swift.Optional<Bool?> {
    get {
      return graphQLMap["interactions"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "interactions")
    }
  }

  /// live
  public var live: Swift.Optional<Bool?> {
    get {
      return graphQLMap["live"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "live")
    }
  }

  /// video
  public var video: Swift.Optional<Bool?> {
    get {
      return graphQLMap["video"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "video")
    }
  }

  /// order
  public var order: Swift.Optional<Bool?> {
    get {
      return graphQLMap["order"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "order")
    }
  }
}

/// 用户角色
public enum enum__role: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case user
  case admin
  case system
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "USER": self = .user
      case "ADMIN": self = .admin
      case "SYSTEM": self = .system
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .user: return "USER"
      case .admin: return "ADMIN"
      case .system: return "SYSTEM"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: enum__role, rhs: enum__role) -> Bool {
    switch (lhs, rhs) {
      case (.user, .user): return true
      case (.admin, .admin): return true
      case (.system, .system): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [enum__role] {
    return [
      .user,
      .admin,
      .system,
    ]
  }
}

public final class AlgorithmFindLivesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AlgorithmFindLives($page: Int, $pageSize: Int, $moduleName: enumModuleName) {
      algorithmFindLives(page: $page, pageSize: $pageSize, moduleName: $moduleName) {
        __typename
        title
        _id
        status
        coverImage
        ivsLiveAddress
        viewCount
        likeCount
        chatroomId
        newFansCount
        startAt
        endAt
        shareLink
        collaboratingUser
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
      }
    }
    """

  public let operationName = "AlgorithmFindLives"

  public var page: Int?
  public var pageSize: Int?
  public var moduleName: enumModuleName?

  public init(page: Int? = nil, pageSize: Int? = nil, moduleName: enumModuleName? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.moduleName = moduleName
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "moduleName": moduleName]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("algorithmFindLives", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "moduleName": GraphQLVariable("moduleName")], type: .list(.object(AlgorithmFindLife.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(algorithmFindLives: [AlgorithmFindLife?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "algorithmFindLives": algorithmFindLives.flatMap { (value: [AlgorithmFindLife?]) -> [ResultMap?] in value.map { (value: AlgorithmFindLife?) -> ResultMap? in value.flatMap { (value: AlgorithmFindLife) -> ResultMap in value.resultMap } } }])
    }

    /// 客户端根据页面模块查询直播列表
    public var algorithmFindLives: [AlgorithmFindLife?]? {
      get {
        return (resultMap["algorithmFindLives"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindLife?] in value.map { (value: ResultMap?) -> AlgorithmFindLife? in value.flatMap { (value: ResultMap) -> AlgorithmFindLife in AlgorithmFindLife(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindLife?]) -> [ResultMap?] in value.map { (value: AlgorithmFindLife?) -> ResultMap? in value.flatMap { (value: AlgorithmFindLife) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindLives")
      }
    }

    public struct AlgorithmFindLife: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(title: String? = nil, _id: GraphQLID? = nil, status: Bool? = nil, coverImage: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, chatroomId: String? = nil, newFansCount: Int? = nil, startAt: Double? = nil, endAt: Double? = nil, shareLink: String? = nil, collaboratingUser: GraphQLID? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "title": title, "_id": _id, "status": status, "coverImage": coverImage, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "likeCount": likeCount, "chatroomId": chatroomId, "newFansCount": newFansCount, "startAt": startAt, "endAt": endAt, "shareLink": shareLink, "collaboratingUser": collaboratingUser, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }
    }
  }
}

public final class AppAcceptUserAgreementMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppAcceptUserAgreement($agreementType: AgreementType!) {
      appAcceptUserAgreement(agreementType: $agreementType) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppAcceptUserAgreement"

  public var agreementType: AgreementType

  public init(agreementType: AgreementType) {
    self.agreementType = agreementType
  }

  public var variables: GraphQLMap? {
    return ["agreementType": agreementType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appAcceptUserAgreement", arguments: ["agreementType": GraphQLVariable("agreementType")], type: .object(AppAcceptUserAgreement.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appAcceptUserAgreement: AppAcceptUserAgreement? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appAcceptUserAgreement": appAcceptUserAgreement.flatMap { (value: AppAcceptUserAgreement) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端接口用户协议
    public var appAcceptUserAgreement: AppAcceptUserAgreement? {
      get {
        return (resultMap["appAcceptUserAgreement"] as? ResultMap).flatMap { AppAcceptUserAgreement(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appAcceptUserAgreement")
      }
    }

    public struct AppAcceptUserAgreement: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppChangeLiveWatchListMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppChangeLiveWatchList($action: ChangeLiveWatchListAction!, $live: ID!) {
      appChangeLiveWatchList(action: $action, live: $live) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppChangeLiveWatchList"

  public var action: ChangeLiveWatchListAction
  public var live: GraphQLID

  public init(action: ChangeLiveWatchListAction, live: GraphQLID) {
    self.action = action
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["action": action, "live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appChangeLiveWatchList", arguments: ["action": GraphQLVariable("action"), "live": GraphQLVariable("live")], type: .nonNull(.object(AppChangeLiveWatchList.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appChangeLiveWatchList: AppChangeLiveWatchList) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appChangeLiveWatchList": appChangeLiveWatchList.resultMap])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 将一个 live 添加到 watch list 或从 watch list 删除
    public var appChangeLiveWatchList: AppChangeLiveWatchList {
      get {
        return AppChangeLiveWatchList(unsafeResultMap: resultMap["appChangeLiveWatchList"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "appChangeLiveWatchList")
      }
    }

    public struct AppChangeLiveWatchList: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppDeleteLiveScheduleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppDeleteLiveSchedule($id: ID!) {
      appDeleteLiveSchedule(_id: $id) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppDeleteLiveSchedule"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appDeleteLiveSchedule", arguments: ["_id": GraphQLVariable("id")], type: .object(AppDeleteLiveSchedule.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appDeleteLiveSchedule: AppDeleteLiveSchedule? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appDeleteLiveSchedule": appDeleteLiveSchedule.flatMap { (value: AppDeleteLiveSchedule) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 删除 live schedule
    public var appDeleteLiveSchedule: AppDeleteLiveSchedule? {
      get {
        return (resultMap["appDeleteLiveSchedule"] as? ResultMap).flatMap { AppDeleteLiveSchedule(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appDeleteLiveSchedule")
      }
    }

    public struct AppDeleteLiveSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppExpressDashboardLoginQueryQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appExpressDashboardLoginQuery {
      appExpressDashboardLogin
    }
    """

  public let operationName = "appExpressDashboardLoginQuery"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appExpressDashboardLogin", type: .nonNull(.scalar(String.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appExpressDashboardLogin: String) {
      self.init(unsafeResultMap: ["__typename": "Query", "appExpressDashboardLogin": appExpressDashboardLogin])
    }

    /// ***【接口权限: 卖家】***
    /// stripe express dashboard 登陆链接
    public var appExpressDashboardLogin: String {
      get {
        return resultMap["appExpressDashboardLogin"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "appExpressDashboardLogin")
      }
    }
  }
}

public final class AppFindFriendsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appFindFriends($page: Int, $pageSize: Int, $username: String, $name: String) {
      appFindFriends(page: $page, pageSize: $pageSize, username: $username, name: $name) {
        __typename
        _id
        avatar
        username
        name
        uid
      }
    }
    """

  public let operationName = "appFindFriends"

  public var page: Int?
  public var pageSize: Int?
  public var username: String?
  public var name: String?

  public init(page: Int? = nil, pageSize: Int? = nil, username: String? = nil, name: String? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.username = username
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "username": username, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appFindFriends", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "username": GraphQLVariable("username"), "name": GraphQLVariable("name")], type: .list(.object(AppFindFriend.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appFindFriends: [AppFindFriend?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appFindFriends": appFindFriends.flatMap { (value: [AppFindFriend?]) -> [ResultMap?] in value.map { (value: AppFindFriend?) -> ResultMap? in value.flatMap { (value: AppFindFriend) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 同时查询 `follower` 和 `following`
    public var appFindFriends: [AppFindFriend?]? {
      get {
        return (resultMap["appFindFriends"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AppFindFriend?] in value.map { (value: ResultMap?) -> AppFindFriend? in value.flatMap { (value: ResultMap) -> AppFindFriend in AppFindFriend(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AppFindFriend?]) -> [ResultMap?] in value.map { (value: AppFindFriend?) -> ResultMap? in value.flatMap { (value: AppFindFriend) -> ResultMap in value.resultMap } } }, forKey: "appFindFriends")
      }
    }

    public struct AppFindFriend: GraphQLSelectionSet {
      public static let possibleTypes = ["SimpleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("uid", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 用户名字
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
      public var uid: String? {
        get {
          return resultMap["uid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uid")
        }
      }
    }
  }
}

public final class AppFindLiveQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppFindLive($_id: ID) {
      appFindLive(_id: $_id) {
        __typename
        scheduleStartAt
        streamingStatus
        status
        _id
        chatroomId
        ivsLiveAddress
        viewCount
        newFansCount
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
        likeCount
        orderCount
        coverImage
        title
        hasShownCoupon
        collaboratingUser
        coupons {
          __typename
          _id
          discountType
          value
          quantity
          receiveCount
        }
        products {
          __typename
          _id
          productType
        }
        moments {
          __typename
          video
          coverImage
        }
        shareLink
        teaserVideo {
          __typename
          _id
        }
        startRecords {
          __typename
          endAt
          startAt
        }
        startAt
        endAt
        explainProductDetail {
          __typename
          _id
          live {
            __typename
            _id
          }
          status
          productType
          name
          description
          images {
            __typename
            image
            key
          }
          labels
          stock
          regularPrice
          livePrice
          variants {
            __typename
            _id
            name
            quantity
          }
          isFreeShipping
          shippingInfo {
            __typename
            companyName
            method
            price
          }
          shopifyProductId
          auctionPrice
          auctionSetting {
            __typename
            duration
            extendTime
            auctionStartedAt
          }
          auctionStatus
          auctionBidInfo {
            __typename
            auctionStatus
            endBidTime
            extendBidTime
            latestBidPrice
            recommendBidPrice
            bidsCount
            latestBidder {
              __typename
              _id
              avatar
              username
              name
              uid
            }
          }
          edited
        }
      }
    }
    """

  public let operationName = "AppFindLive"

  public var _id: GraphQLID?

  public init(_id: GraphQLID? = nil) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appFindLive", arguments: ["_id": GraphQLVariable("_id")], type: .object(AppFindLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appFindLive: AppFindLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appFindLive": appFindLive.flatMap { (value: AppFindLive) -> ResultMap in value.resultMap }])
    }

    /// 客户端查询 live 详情
    public var appFindLive: AppFindLive? {
      get {
        return (resultMap["appFindLive"] as? ResultMap).flatMap { AppFindLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appFindLive")
      }
    }

    public struct AppFindLive: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("scheduleStartAt", type: .scalar(String.self)),
        GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("orderCount", type: .scalar(Int.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("coupons", type: .list(.object(Coupon.selections))),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("moments", type: .list(.object(Moment.selections))),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("teaserVideo", type: .object(TeaserVideo.selections)),
        GraphQLField("startRecords", type: .list(.object(StartRecord.selections))),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("explainProductDetail", type: .object(ExplainProductDetail.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil, status: Bool? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, collaboratingUser: GraphQLID? = nil, coupons: [Coupon?]? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil, shareLink: String? = nil, teaserVideo: TeaserVideo? = nil, startRecords: [StartRecord?]? = nil, startAt: Double? = nil, endAt: Double? = nil, explainProductDetail: ExplainProductDetail? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus, "status": status, "_id": _id, "chatroomId": chatroomId, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "collaboratingUser": collaboratingUser, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "teaserVideo": teaserVideo.flatMap { (value: TeaserVideo) -> ResultMap in value.resultMap }, "startRecords": startRecords.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, "startAt": startAt, "endAt": endAt, "explainProductDetail": explainProductDetail.flatMap { (value: ExplainProductDetail) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// live schedule 开始时间
      public var scheduleStartAt: String? {
        get {
          return resultMap["scheduleStartAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "scheduleStartAt")
        }
      }

      /// 直播状态，可替代早期的 status
      public var streamingStatus: LiveStreamingStatus? {
        get {
          return resultMap["streamingStatus"] as? LiveStreamingStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "streamingStatus")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 本场直播订单数量
      public var orderCount: Int? {
        get {
          return resultMap["orderCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCount")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
      public var hasShownCoupon: Bool? {
        get {
          return resultMap["hasShownCoupon"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasShownCoupon")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 直播间正在派发的优惠劵
      public var coupons: [Coupon?]? {
        get {
          return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
        }
      }

      /// 直播间正在出售的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 直播片段
      public var moments: [Moment?]? {
        get {
          return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// live 关联的 teaser video
      public var teaserVideo: TeaserVideo? {
        get {
          return (resultMap["teaserVideo"] as? ResultMap).flatMap { TeaserVideo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "teaserVideo")
        }
      }

      /// 直播开播记录
      public var startRecords: [StartRecord?]? {
        get {
          return (resultMap["startRecords"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [StartRecord?] in value.map { (value: ResultMap?) -> StartRecord? in value.flatMap { (value: ResultMap) -> StartRecord in StartRecord(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, forKey: "startRecords")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// 主播正在讲解的商品详情
      public var explainProductDetail: ExplainProductDetail? {
        get {
          return (resultMap["explainProductDetail"] as? ResultMap).flatMap { ExplainProductDetail(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "explainProductDetail")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct Coupon: GraphQLSelectionSet {
        public static let possibleTypes = ["Coupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("discountType", type: .scalar(enum__discountType.self)),
          GraphQLField("value", type: .scalar(Int.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("receiveCount", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var discountType: enum__discountType? {
          get {
            return resultMap["discountType"] as? enum__discountType
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountType")
          }
        }

        public var value: Int? {
          get {
            return resultMap["value"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        public var receiveCount: Int? {
          get {
            return resultMap["receiveCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "receiveCount")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["Product"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(String.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: String? = nil, productType: enum__productType? = nil) {
          self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "productType": productType])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: String? {
          get {
            return resultMap["_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }
      }

      public struct Moment: GraphQLSelectionSet {
        public static let possibleTypes = ["moment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("video", type: .scalar(String.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(video: String? = nil, coverImage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 视频
        public var video: String? {
          get {
            return resultMap["video"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// 封面
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }
      }

      public struct TeaserVideo: GraphQLSelectionSet {
        public static let possibleTypes = ["video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil) {
          self.init(unsafeResultMap: ["__typename": "video", "_id": _id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }
      }

      public struct StartRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveStartRecord"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("endAt", type: .scalar(String.self)),
          GraphQLField("startAt", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endAt: String? = nil, startAt: String) {
          self.init(unsafeResultMap: ["__typename": "LiveStartRecord", "endAt": endAt, "startAt": startAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 本次结束 live 的时间
        public var endAt: String? {
          get {
            return resultMap["endAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endAt")
          }
        }

        /// 本次开始 live 的时间
        public var startAt: String {
          get {
            return resultMap["startAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "startAt")
          }
        }
      }

      public struct ExplainProductDetail: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("live", type: .object(Live.selections)),
          GraphQLField("status", type: .scalar(enum__productStatus.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("labels", type: .list(.scalar(String.self))),
          GraphQLField("stock", type: .scalar(Int.self)),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
          GraphQLField("shopifyProductId", type: .scalar(GraphQLID.self)),
          GraphQLField("auctionPrice", type: .scalar(Int.self)),
          GraphQLField("auctionSetting", type: .object(AuctionSetting.selections)),
          GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
          GraphQLField("auctionBidInfo", type: .object(AuctionBidInfo.selections)),
          GraphQLField("edited", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, live: Live? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, labels: [String?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, shopifyProductId: GraphQLID? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSetting? = nil, auctionStatus: AuctionStatus? = nil, auctionBidInfo: AuctionBidInfo? = nil, edited: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "status": status, "productType": productType, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "labels": labels, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "shopifyProductId": shopifyProductId, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting.flatMap { (value: AuctionSetting) -> ResultMap in value.resultMap }, "auctionStatus": auctionStatus, "auctionBidInfo": auctionBidInfo.flatMap { (value: AuctionBidInfo) -> ResultMap in value.resultMap }, "edited": edited])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 关联的 live
        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
        public var status: enum__productStatus? {
          get {
            return resultMap["status"] as? enum__productStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品 label，拍卖商品 UI 上需要一些字段展示商品属性，如“颜色”、“尺码”等，同时这些属性不关联库存，所以和 variant 不是一个概念。此属性当前是拍卖商品专属。
        public var labels: [String?]? {
          get {
            return resultMap["labels"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "labels")
          }
        }

        /// 商品总数量。是 variants 中各种款式商品数量总和
        public var stock: Int? {
          get {
            return resultMap["stock"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 运输/快递
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        /// 通过shopify创建的商品id
        public var shopifyProductId: GraphQLID? {
          get {
            return resultMap["shopifyProductId"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "shopifyProductId")
          }
        }

        /// 拍卖价格, productType == AUCTION 时有
        public var auctionPrice: Int? {
          get {
            return resultMap["auctionPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionPrice")
          }
        }

        /// 拍卖配置信息, productType == AUCTION 时有
        public var auctionSetting: AuctionSetting? {
          get {
            return (resultMap["auctionSetting"] as? ResultMap).flatMap { AuctionSetting(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionSetting")
          }
        }

        /// 拍卖状态, productType == AUCTION 时有
        public var auctionStatus: AuctionStatus? {
          get {
            return resultMap["auctionStatus"] as? AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStatus")
          }
        }

        /// 拍卖出价信息, productType == AUCTION 时且已经开始拍卖时有
        public var auctionBidInfo: AuctionBidInfo? {
          get {
            return (resultMap["auctionBidInfo"] as? ResultMap).flatMap { AuctionBidInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionBidInfo")
          }
        }

        /// 从小店商品 Product 同步过来时，是否已编辑过。
        /// 
        /// 调用 appCreateLiveProduct 创建的商品和调用过 appUpdateLiveProduct 修改的商品，都会被标记为已编辑过。
        /// 
        /// appBatchCreateLiveProducts 接口每次都会清空原直播商品编辑临时数据，重新创建直播商品。但标记已编辑过的商品，如果在调用
        /// appBatchCreateLiveProducts 时在参数里将 id 传过来了，则不会重新创建，会保留原编辑的信息。
        public var edited: Bool? {
          get {
            return resultMap["edited"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "edited")
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "_id": _id])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["ShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
            GraphQLField("price", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 运输公司名称
          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          /// 运输方式
          public var method: enum__shippingMethod? {
            get {
              return resultMap["method"] as? enum__shippingMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }

          /// 价格
          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }
        }

        public struct AuctionSetting: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionSetting"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("duration", type: .scalar(Int.self)),
            GraphQLField("extendTime", type: .scalar(Int.self)),
            GraphQLField("auctionStartedAt", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(duration: Int? = nil, extendTime: Int? = nil, auctionStartedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionSetting", "duration": duration, "extendTime": extendTime, "auctionStartedAt": auctionStartedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 初始拍卖时长，单位：秒
          public var duration: Int? {
            get {
              return resultMap["duration"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 每次延长拍卖时，延长的时间，单位：秒
          public var extendTime: Int? {
            get {
              return resultMap["extendTime"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "extendTime")
            }
          }

          /// 开始拍卖时间, productType == AUCTION 时且已经开始拍卖时有
          public var auctionStartedAt: String? {
            get {
              return resultMap["auctionStartedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStartedAt")
            }
          }
        }

        public struct AuctionBidInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionBidInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionStatus", type: .nonNull(.scalar(AuctionStatus.self))),
            GraphQLField("endBidTime", type: .nonNull(.scalar(String.self))),
            GraphQLField("extendBidTime", type: .scalar(Int.self)),
            GraphQLField("latestBidPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("recommendBidPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("bidsCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("latestBidder", type: .object(LatestBidder.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(auctionStatus: AuctionStatus, endBidTime: String, extendBidTime: Int? = nil, latestBidPrice: Int, recommendBidPrice: Int, bidsCount: Int, latestBidder: LatestBidder? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionBidInfo", "auctionStatus": auctionStatus, "endBidTime": endBidTime, "extendBidTime": extendBidTime, "latestBidPrice": latestBidPrice, "recommendBidPrice": recommendBidPrice, "bidsCount": bidsCount, "latestBidder": latestBidder.flatMap { (value: LatestBidder) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 当前拍卖状态
          public var auctionStatus: AuctionStatus {
            get {
              return resultMap["auctionStatus"]! as! AuctionStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStatus")
            }
          }

          /// 当前出价结束时间
          public var endBidTime: String {
            get {
              return resultMap["endBidTime"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endBidTime")
            }
          }

          /// 延长出价时间，单位：秒。此字段有值时，表示出价时间延长 {extendBidTime} 秒；为 null 时，表示无延长时间逻辑，即客户端不需要做处理
          public var extendBidTime: Int? {
            get {
              return resultMap["extendBidTime"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "extendBidTime")
            }
          }

          /// 最新出价
          public var latestBidPrice: Int {
            get {
              return resultMap["latestBidPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "latestBidPrice")
            }
          }

          /// 建议出价
          public var recommendBidPrice: Int {
            get {
              return resultMap["recommendBidPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "recommendBidPrice")
            }
          }

          /// 出价次数
          public var bidsCount: Int {
            get {
              return resultMap["bidsCount"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "bidsCount")
            }
          }

          /// 最新出价用户信息
          public var latestBidder: LatestBidder? {
            get {
              return (resultMap["latestBidder"] as? ResultMap).flatMap { LatestBidder(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "latestBidder")
            }
          }

          public struct LatestBidder: GraphQLSelectionSet {
            public static let possibleTypes = ["SimpleUser"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("uid", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 用户名字
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }
          }
        }
      }
    }
  }
}

public final class AppFindVideoQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppFindVideo($id: ID!) {
      appFindVideo(_id: $id) {
        __typename
        _id
        videoType
        user {
          __typename
          avatar
          _id
          username
          role
        }
        coverImage
        video
        duration
        describe
        describeMapping {
          __typename
          users {
            __typename
            id {
              __typename
              _id
            }
            text
          }
        }
        viewCount
        likeCount
        commentCount
        shareCount
        watch
        allowComment
        location
        placeName
        shareLink
        interests {
          __typename
          _id
          name
          priority
          videoCount
          userCount
          followed
          isSuspended
        }
        music {
          __typename
          _id
          title
        }
        teaserTitle
        deleted
        liveStartAt
        liked
        products {
          __typename
          product
          name
          description
          images {
            __typename
            image
            key
          }
          regularPrice
          livePrice
          productType
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
        }
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
    }
    """

  public let operationName = "AppFindVideo"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appFindVideo", arguments: ["_id": GraphQLVariable("id")], type: .object(AppFindVideo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appFindVideo: AppFindVideo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appFindVideo": appFindVideo.flatMap { (value: AppFindVideo) -> ResultMap in value.resultMap }])
    }

    /// 客户端查询单个视频详情
    public var appFindVideo: AppFindVideo? {
      get {
        return (resultMap["appFindVideo"] as? ResultMap).flatMap { AppFindVideo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appFindVideo")
      }
    }

    public struct AppFindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("describeMapping", type: .object(DescribeMapping.selections)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("watch", type: .scalar(enumWatch.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("location", type: .list(.scalar(Double.self))),
        GraphQLField("placeName", type: .scalar(String.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("interests", type: .list(.object(Interest.selections))),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, user: User? = nil, coverImage: String? = nil, video: String? = nil, duration: Double? = nil, describe: String? = nil, describeMapping: DescribeMapping? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, shareCount: Int? = nil, watch: enumWatch? = nil, allowComment: Bool? = nil, location: [Double?]? = nil, placeName: String? = nil, shareLink: String? = nil, interests: [Interest?]? = nil, music: Music? = nil, teaserTitle: String? = nil, deleted: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, products: [Product?]? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "coverImage": coverImage, "video": video, "duration": duration, "describe": describe, "describeMapping": describeMapping.flatMap { (value: DescribeMapping) -> ResultMap in value.resultMap }, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "shareCount": shareCount, "watch": watch, "allowComment": allowComment, "location": location, "placeName": placeName, "shareLink": shareLink, "interests": interests.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "teaserTitle": teaserTitle, "deleted": deleted, "liveStartAt": liveStartAt, "liked": liked, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 描述中 #hashtags 和 @users 的映射关系
      public var describeMapping: DescribeMapping? {
        get {
          return (resultMap["describeMapping"] as? ResultMap).flatMap { DescribeMapping(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "describeMapping")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 允许观看范围
      public var watch: enumWatch? {
        get {
          return resultMap["watch"] as? enumWatch
        }
        set {
          resultMap.updateValue(newValue, forKey: "watch")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 经纬度位置 type:[lng,lat] 经度，纬度
      public var location: [Double?]? {
        get {
          return resultMap["location"] as? [Double?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      /// 地名
      public var placeName: String? {
        get {
          return resultMap["placeName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeName")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 兴趣
      public var interests: [Interest?]? {
        get {
          return (resultMap["interests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Interest?] in value.map { (value: ResultMap?) -> Interest? in value.flatMap { (value: ResultMap) -> Interest in Interest(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, forKey: "interests")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// ***【接口权限: 普通登录用户】***
      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(avatar: String? = nil, _id: GraphQLID? = nil, username: String? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "avatar": avatar, "_id": _id, "username": username, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct DescribeMapping: GraphQLSelectionSet {
        public static let possibleTypes = ["describeMapping"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", type: .list(.object(User.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(users: [User?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "describeMapping", "users": users.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var users: [User?]? {
          get {
            return (resultMap["users"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [User?] in value.map { (value: ResultMap?) -> User? in value.flatMap { (value: ResultMap) -> User in User(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }, forKey: "users")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["mappingUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .object(Id.selections)),
            GraphQLField("text", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: Id? = nil, text: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "mappingUser", "id": id.flatMap { (value: Id) -> ResultMap in value.resultMap }, "text": text])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: Id? {
            get {
              return (resultMap["id"] as? ResultMap).flatMap { Id(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "id")
            }
          }

          public var text: String? {
            get {
              return resultMap["text"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "text")
            }
          }

          public struct Id: GraphQLSelectionSet {
            public static let possibleTypes = ["mappingUserDetail"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil) {
              self.init(unsafeResultMap: ["__typename": "mappingUserDetail", "_id": _id])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }
          }
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("priority", type: .scalar(Int.self)),
          GraphQLField("videoCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("userCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("isSuspended", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, priority: Int? = nil, videoCount: Int, userCount: Int, followed: Bool, isSuspended: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "priority": priority, "videoCount": videoCount, "userCount": userCount, "followed": followed, "isSuspended": isSuspended])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 优先级
        public var priority: Int? {
          get {
            return resultMap["priority"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "priority")
          }
        }

        /// 携带该 interest 的视频数量
        public var videoCount: Int {
          get {
            return resultMap["videoCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "videoCount")
          }
        }

        /// 对该 Interest 感兴趣的用户数量
        public var userCount: Int {
          get {
            return resultMap["userCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "userCount")
          }
        }

        /// 用户是否关注该 interest
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 是否被封禁
        public var isSuspended: Bool? {
          get {
            return resultMap["isSuspended"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSuspended")
          }
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["PastShowProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 商品 ID
        public var product: String? {
          get {
            return resultMap["product"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "product")
          }
        }

        /// 商品名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 商品描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 商品图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 商品直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }
  }
}

public final class AppGetEventQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appGetEvent($_id: ID!) {
      appGetEvent(_id: $_id) {
        __typename
        coverImages {
          __typename
          key
          image
        }
        name
        description
        organizer {
          __typename
          _id
          name
        }
        startDate
        endDate
        openTime
        closeTime
        placeId
        placeName
        placeAddress
        location
        timezone
        timezoneAbbr
        shareLink
        tickets {
          __typename
          _id
          name
          price
          serviceFeePrice
          quantity
          payType
          timezone
          description
          timezone
          timezoneAbbr
          saleDate {
            __typename
            startDate
            endDate
          }
          activateDates {
            __typename
            startDate
            endDate
          }
        }
        refundPolicy
        refundPolicyNotice
        about
        status
      }
    }
    """

  public let operationName = "appGetEvent"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetEvent", arguments: ["_id": GraphQLVariable("_id")], type: .object(AppGetEvent.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetEvent: AppGetEvent? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetEvent": appGetEvent.flatMap { (value: AppGetEvent) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【ezze app 专用】用户查看活动详情
    public var appGetEvent: AppGetEvent? {
      get {
        return (resultMap["appGetEvent"] as? ResultMap).flatMap { AppGetEvent(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appGetEvent")
      }
    }

    public struct AppGetEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["Event"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("coverImages", type: .nonNull(.list(.nonNull(.object(CoverImage.selections))))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("description", type: .nonNull(.scalar(String.self))),
        GraphQLField("organizer", type: .nonNull(.object(Organizer.selections))),
        GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("openTime", type: .nonNull(.scalar(String.self))),
        GraphQLField("closeTime", type: .nonNull(.scalar(String.self))),
        GraphQLField("placeId", type: .nonNull(.scalar(String.self))),
        GraphQLField("placeName", type: .nonNull(.scalar(String.self))),
        GraphQLField("placeAddress", type: .nonNull(.scalar(String.self))),
        GraphQLField("location", type: .nonNull(.list(.nonNull(.scalar(Double.self))))),
        GraphQLField("timezone", type: .nonNull(.scalar(String.self))),
        GraphQLField("timezoneAbbr", type: .nonNull(.scalar(String.self))),
        GraphQLField("shareLink", type: .nonNull(.scalar(String.self))),
        GraphQLField("tickets", type: .nonNull(.list(.nonNull(.object(Ticket.selections))))),
        GraphQLField("refundPolicy", type: .nonNull(.scalar(TicketRefundPolicy.self))),
        GraphQLField("refundPolicyNotice", type: .nonNull(.scalar(String.self))),
        GraphQLField("about", type: .nonNull(.scalar(String.self))),
        GraphQLField("status", type: .nonNull(.scalar(EventStatus.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(coverImages: [CoverImage], name: String, description: String, organizer: Organizer, startDate: String, endDate: String, openTime: String, closeTime: String, placeId: String, placeName: String, placeAddress: String, location: [Double], timezone: String, timezoneAbbr: String, shareLink: String, tickets: [Ticket], refundPolicy: TicketRefundPolicy, refundPolicyNotice: String, about: String, status: EventStatus) {
        self.init(unsafeResultMap: ["__typename": "Event", "coverImages": coverImages.map { (value: CoverImage) -> ResultMap in value.resultMap }, "name": name, "description": description, "organizer": organizer.resultMap, "startDate": startDate, "endDate": endDate, "openTime": openTime, "closeTime": closeTime, "placeId": placeId, "placeName": placeName, "placeAddress": placeAddress, "location": location, "timezone": timezone, "timezoneAbbr": timezoneAbbr, "shareLink": shareLink, "tickets": tickets.map { (value: Ticket) -> ResultMap in value.resultMap }, "refundPolicy": refundPolicy, "refundPolicyNotice": refundPolicyNotice, "about": about, "status": status])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 活动描述图片
      public var coverImages: [CoverImage] {
        get {
          return (resultMap["coverImages"] as! [ResultMap]).map { (value: ResultMap) -> CoverImage in CoverImage(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: CoverImage) -> ResultMap in value.resultMap }, forKey: "coverImages")
        }
      }

      /// 活动标题
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 活动副标题
      public var description: String {
        get {
          return resultMap["description"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 活动组织者
      public var organizer: Organizer {
        get {
          return Organizer(unsafeResultMap: resultMap["organizer"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "organizer")
        }
      }

      /// 活动开始时间时间戳，单位：毫秒
      public var startDate: String {
        get {
          return resultMap["startDate"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "startDate")
        }
      }

      /// 活动结束时间时间戳，单位：毫秒
      public var endDate: String {
        get {
          return resultMap["endDate"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "endDate")
        }
      }

      /// 活动开始时间点，24h 制，格式 HH:mm:ss
      public var openTime: String {
        get {
          return resultMap["openTime"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openTime")
        }
      }

      /// 活动结束时间点，24h 制，格式 HH:mm:ss
      public var closeTime: String {
        get {
          return resultMap["closeTime"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "closeTime")
        }
      }

      /// google map 地址 id
      public var placeId: String {
        get {
          return resultMap["placeId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeId")
        }
      }

      /// 地名
      public var placeName: String {
        get {
          return resultMap["placeName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeName")
        }
      }

      /// 地址详情字符串
      public var placeAddress: String {
        get {
          return resultMap["placeAddress"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeAddress")
        }
      }

      /// 经纬度位置 type:[lng,lat] 经度，纬度
      public var location: [Double] {
        get {
          return resultMap["location"]! as! [Double]
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      /// 活动日期对应时区，如 America/Los_Angeles  Asia/Hong_Kong 等。参考：https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
      public var timezone: String {
        get {
          return resultMap["timezone"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "timezone")
        }
      }

      /// 活动日期对应时区名称缩写，如 PST、PDT
      public var timezoneAbbr: String {
        get {
          return resultMap["timezoneAbbr"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "timezoneAbbr")
        }
      }

      /// 分享链接
      public var shareLink: String {
        get {
          return resultMap["shareLink"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 活动关联的票券
      public var tickets: [Ticket] {
        get {
          return (resultMap["tickets"] as! [ResultMap]).map { (value: ResultMap) -> Ticket in Ticket(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Ticket) -> ResultMap in value.resultMap }, forKey: "tickets")
        }
      }

      /// 退款政策
      public var refundPolicy: TicketRefundPolicy {
        get {
          return resultMap["refundPolicy"]! as! TicketRefundPolicy
        }
        set {
          resultMap.updateValue(newValue, forKey: "refundPolicy")
        }
      }

      /// 退款政策描述文本
      public var refundPolicyNotice: String {
        get {
          return resultMap["refundPolicyNotice"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "refundPolicyNotice")
        }
      }

      /// 活动详情描述
      public var about: String {
        get {
          return resultMap["about"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "about")
        }
      }

      /// 活动状态
      public var status: EventStatus {
        get {
          return resultMap["status"]! as! EventStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      public struct CoverImage: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("key", type: .scalar(String.self)),
          GraphQLField("image", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String? = nil, image: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "key": key, "image": image])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }
      }

      public struct Organizer: GraphQLSelectionSet {
        public static let possibleTypes = ["SimpleUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 用户名字
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }
      }

      public struct Ticket: GraphQLSelectionSet {
        public static let possibleTypes = ["Ticket"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("price", type: .nonNull(.scalar(Int.self))),
          GraphQLField("serviceFeePrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
          GraphQLField("payType", type: .nonNull(.scalar(TicketPayType.self))),
          GraphQLField("timezone", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .nonNull(.scalar(String.self))),
          GraphQLField("timezone", type: .nonNull(.scalar(String.self))),
          GraphQLField("timezoneAbbr", type: .nonNull(.scalar(String.self))),
          GraphQLField("saleDate", type: .nonNull(.object(SaleDate.selections))),
          GraphQLField("activateDates", type: .nonNull(.list(.nonNull(.object(ActivateDate.selections))))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, price: Int, serviceFeePrice: Int, quantity: Int, payType: TicketPayType, timezone: String, description: String, timezoneAbbr: String, saleDate: SaleDate, activateDates: [ActivateDate]) {
          self.init(unsafeResultMap: ["__typename": "Ticket", "_id": _id, "name": name, "price": price, "serviceFeePrice": serviceFeePrice, "quantity": quantity, "payType": payType, "timezone": timezone, "description": description, "timezoneAbbr": timezoneAbbr, "saleDate": saleDate.resultMap, "activateDates": activateDates.map { (value: ActivateDate) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 票券名称, maxlength: 66
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 价格，单位：分
        public var price: Int {
          get {
            return resultMap["price"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }

        /// 手续费，单位：分
        public var serviceFeePrice: Int {
          get {
            return resultMap["serviceFeePrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "serviceFeePrice")
          }
        }

        /// 票券库存
        public var quantity: Int {
          get {
            return resultMap["quantity"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        /// 付费类型
        public var payType: TicketPayType {
          get {
            return resultMap["payType"]! as! TicketPayType
          }
          set {
            resultMap.updateValue(newValue, forKey: "payType")
          }
        }

        /// 日期对应时区名称，如 America/Los_Angeles  Asia/Hong_Kong 等。参考：https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
        public var timezone: String {
          get {
            return resultMap["timezone"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "timezone")
          }
        }

        /// 票券描述，maxlength: 1500
        public var description: String {
          get {
            return resultMap["description"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 活动日期对应时区名称缩写，如 PST、PDT
        public var timezoneAbbr: String {
          get {
            return resultMap["timezoneAbbr"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "timezoneAbbr")
          }
        }

        /// 可售票时间
        public var saleDate: SaleDate {
          get {
            return SaleDate(unsafeResultMap: resultMap["saleDate"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "saleDate")
          }
        }

        /// 可验票时间
        public var activateDates: [ActivateDate] {
          get {
            return (resultMap["activateDates"] as! [ResultMap]).map { (value: ResultMap) -> ActivateDate in ActivateDate(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: ActivateDate) -> ResultMap in value.resultMap }, forKey: "activateDates")
          }
        }

        public struct SaleDate: GraphQLSelectionSet {
          public static let possibleTypes = ["TicketDate"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(startDate: String, endDate: String) {
            self.init(unsafeResultMap: ["__typename": "TicketDate", "startDate": startDate, "endDate": endDate])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 起始日期时间戳，单位：毫秒，举例:1660042761137
          public var startDate: String {
            get {
              return resultMap["startDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "startDate")
            }
          }

          /// 结束日期时间戳，单位：毫秒，举例：1660042761137
          public var endDate: String {
            get {
              return resultMap["endDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endDate")
            }
          }
        }

        public struct ActivateDate: GraphQLSelectionSet {
          public static let possibleTypes = ["TicketDate"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(startDate: String, endDate: String) {
            self.init(unsafeResultMap: ["__typename": "TicketDate", "startDate": startDate, "endDate": endDate])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 起始日期时间戳，单位：毫秒，举例:1660042761137
          public var startDate: String {
            get {
              return resultMap["startDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "startDate")
            }
          }

          /// 结束日期时间戳，单位：毫秒，举例：1660042761137
          public var endDate: String {
            get {
              return resultMap["endDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endDate")
            }
          }
        }
      }
    }
  }
}

public final class AppGetFeatureHashtagQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppGetFeatureHashtag($hashtag: ID, $hashtagName: String, $page: Int, $pageSize: Int) {
      appGetFeatureHashtag(hashtag: $hashtag, hashtagName: $hashtagName) {
        __typename
        _id
        name
        viewCount
        videos(page: $page, pageSize: $pageSize) {
          __typename
          edges {
            __typename
            _id
            videoType
            coverImage
            video
            duration
            describe
            music {
              __typename
              _id
              title
            }
            user {
              __typename
              _id
              avatar
              username
              followed
              uid
              role
            }
            teaserTitle
            liveStartAt
            viewCount
            likeCount
            commentCount
            shareCount
            shareLink
            liked
            hasSubscribedLive
            live {
              __typename
              _id
              coverImage
              title
              status
              scheduleStartAt
              streamingStatus
            }
            allowComment
          }
          pageInfo {
            __typename
            hashNextPage
          }
        }
      }
    }
    """

  public let operationName = "AppGetFeatureHashtag"

  public var hashtag: GraphQLID?
  public var hashtagName: String?
  public var page: Int?
  public var pageSize: Int?

  public init(hashtag: GraphQLID? = nil, hashtagName: String? = nil, page: Int? = nil, pageSize: Int? = nil) {
    self.hashtag = hashtag
    self.hashtagName = hashtagName
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["hashtag": hashtag, "hashtagName": hashtagName, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetFeatureHashtag", arguments: ["hashtag": GraphQLVariable("hashtag"), "hashtagName": GraphQLVariable("hashtagName")], type: .object(AppGetFeatureHashtag.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetFeatureHashtag: AppGetFeatureHashtag? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetFeatureHashtag": appGetFeatureHashtag.flatMap { (value: AppGetFeatureHashtag) -> ResultMap in value.resultMap }])
    }

    /// hashtags 详情
    /// 
    /// 1. 可用于 Discover page hashtag videos 滑到最后点击 view more 后的信息展示
    /// 2. 可用于 video description 中点击 hashtag 跳转到 hashtag 视频列表
    public var appGetFeatureHashtag: AppGetFeatureHashtag? {
      get {
        return (resultMap["appGetFeatureHashtag"] as? ResultMap).flatMap { AppGetFeatureHashtag(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appGetFeatureHashtag")
      }
    }

    public struct AppGetFeatureHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["Hashtag"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("videos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(Video.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, viewCount: Int, videos: Video? = nil) {
        self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "viewCount": viewCount, "videos": videos.flatMap { (value: Video) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// name
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 带此 hashtag 的 video 浏览次数总和
      public var viewCount: Int {
        get {
          return resultMap["viewCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 该 hashtag 下的 video 列表
      public var videos: Video? {
        get {
          return (resultMap["videos"] as? ResultMap).flatMap { Video(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "videos")
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["hashtagVideosResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("edges", type: .list(.object(Edge.selections))),
          GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "hashtagVideosResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var edges: [Edge?]? {
          get {
            return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
          }
        }

        public var pageInfo: PageInfo? {
          get {
            return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
          }
        }

        public struct Edge: GraphQLSelectionSet {
          public static let possibleTypes = ["video"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("videoType", type: .scalar(VideoType.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("video", type: .scalar(String.self)),
            GraphQLField("duration", type: .scalar(Double.self)),
            GraphQLField("describe", type: .scalar(String.self)),
            GraphQLField("music", type: .object(Music.selections)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("teaserTitle", type: .scalar(String.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("commentCount", type: .scalar(Int.self)),
            GraphQLField("shareCount", type: .scalar(Int.self)),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("liked", type: .scalar(Bool.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
            GraphQLField("live", type: .object(Live.selections)),
            GraphQLField("allowComment", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, coverImage: String? = nil, video: String? = nil, duration: Double? = nil, describe: String? = nil, music: Music? = nil, user: User? = nil, teaserTitle: String? = nil, liveStartAt: Double? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, shareCount: Int? = nil, shareLink: String? = nil, liked: Bool? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil, allowComment: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "coverImage": coverImage, "video": video, "duration": duration, "describe": describe, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "teaserTitle": teaserTitle, "liveStartAt": liveStartAt, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "shareCount": shareCount, "shareLink": shareLink, "liked": liked, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "allowComment": allowComment])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
          public var videoType: VideoType? {
            get {
              return resultMap["videoType"] as? VideoType
            }
            set {
              resultMap.updateValue(newValue, forKey: "videoType")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 视频播放地址
          public var video: String? {
            get {
              return resultMap["video"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// 视频时长
          public var duration: Double? {
            get {
              return resultMap["duration"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 描述
          public var describe: String? {
            get {
              return resultMap["describe"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "describe")
            }
          }

          /// 视频中搭配的音乐
          public var music: Music? {
            get {
              return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "music")
            }
          }

          /// 作者
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          /// 【teaser 短视频】预告直播标题
          public var teaserTitle: String? {
            get {
              return resultMap["teaserTitle"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "teaserTitle")
            }
          }

          /// 【teaser / past show 短视频】直播开始日期
          public var liveStartAt: Double? {
            get {
              return resultMap["liveStartAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveStartAt")
            }
          }

          /// 浏览次数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 点赞次数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 评论次数
          public var commentCount: Int? {
            get {
              return resultMap["commentCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "commentCount")
            }
          }

          /// 分享次数
          public var shareCount: Int? {
            get {
              return resultMap["shareCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareCount")
            }
          }

          /// video 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 是否点赞
          public var liked: Bool? {
            get {
              return resultMap["liked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "liked")
            }
          }

          /// 【teaser 短视频】是否已订阅对应的 live
          public var hasSubscribedLive: Bool? {
            get {
              return resultMap["hasSubscribedLive"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
            }
          }

          /// 【teaser / past show 短视频】直播预告关联的直播
          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          /// 是否允许评论
          public var allowComment: Bool? {
            get {
              return resultMap["allowComment"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "allowComment")
            }
          }

          public struct Music: GraphQLSelectionSet {
            public static let possibleTypes = ["music"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 音乐标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("uid", type: .scalar(String.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, uid: String? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "uid": uid, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("coverImage", type: .scalar(String.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("status", type: .scalar(Bool.self)),
              GraphQLField("scheduleStartAt", type: .scalar(String.self)),
              GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
              self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 封面图
            public var coverImage: String? {
              get {
                return resultMap["coverImage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "coverImage")
              }
            }

            /// 标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }

            /// 是否正在直播
            public var status: Bool? {
              get {
                return resultMap["status"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "status")
              }
            }

            /// live schedule 开始时间
            public var scheduleStartAt: String? {
              get {
                return resultMap["scheduleStartAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "scheduleStartAt")
              }
            }

            /// 直播状态，可替代早期的 status
            public var streamingStatus: LiveStreamingStatus? {
              get {
                return resultMap["streamingStatus"] as? LiveStreamingStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "streamingStatus")
              }
            }
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["PageInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("hashNextPage", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(hashNextPage: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
          public var hashNextPage: Bool? {
            get {
              return resultMap["hashNextPage"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hashNextPage")
            }
          }
        }
      }
    }
  }
}

public final class AppGetLiveProductQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppGetLiveProduct($id: ID!) {
      appGetLiveProduct(_id: $id) {
        __typename
        _id
        live {
          __typename
          _id
        }
        status
        productType
        name
        description
        images {
          __typename
          image
          key
        }
        labels
        stock
        regularPrice
        livePrice
        variants {
          __typename
          _id
          name
          quantity
        }
        isFreeShipping
        shippingInfo {
          __typename
          companyName
          method
          price
        }
        shopifyProductId
        auctionPrice
        auctionSetting {
          __typename
          duration
          extendTime
          auctionStartedAt
        }
        auctionStatus
        auctionBidInfo {
          __typename
          auctionStatus
          endBidTime
          extendBidTime
          latestBidPrice
          recommendBidPrice
          bidsCount
          latestBidder {
            __typename
            _id
            avatar
            username
            name
            uid
          }
        }
        edited
      }
      getServerTime {
        __typename
        time
      }
    }
    """

  public let operationName = "AppGetLiveProduct"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetLiveProduct", arguments: ["_id": GraphQLVariable("id")], type: .object(AppGetLiveProduct.selections)),
      GraphQLField("getServerTime", type: .object(GetServerTime.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetLiveProduct: AppGetLiveProduct? = nil, getServerTime: GetServerTime? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetLiveProduct": appGetLiveProduct.flatMap { (value: AppGetLiveProduct) -> ResultMap in value.resultMap }, "getServerTime": getServerTime.flatMap { (value: GetServerTime) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端查询直播商品详情
    public var appGetLiveProduct: AppGetLiveProduct? {
      get {
        return (resultMap["appGetLiveProduct"] as? ResultMap).flatMap { AppGetLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appGetLiveProduct")
      }
    }

    /// 获取服务器时间
    public var getServerTime: GetServerTime? {
      get {
        return (resultMap["getServerTime"] as? ResultMap).flatMap { GetServerTime(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getServerTime")
      }
    }

    public struct AppGetLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["LiveProduct"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("live", type: .object(Live.selections)),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("labels", type: .list(.scalar(String.self))),
        GraphQLField("stock", type: .scalar(Int.self)),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        GraphQLField("shopifyProductId", type: .scalar(GraphQLID.self)),
        GraphQLField("auctionPrice", type: .scalar(Int.self)),
        GraphQLField("auctionSetting", type: .object(AuctionSetting.selections)),
        GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
        GraphQLField("auctionBidInfo", type: .object(AuctionBidInfo.selections)),
        GraphQLField("edited", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, live: Live? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, labels: [String?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, shopifyProductId: GraphQLID? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSetting? = nil, auctionStatus: AuctionStatus? = nil, auctionBidInfo: AuctionBidInfo? = nil, edited: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "status": status, "productType": productType, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "labels": labels, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "shopifyProductId": shopifyProductId, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting.flatMap { (value: AuctionSetting) -> ResultMap in value.resultMap }, "auctionStatus": auctionStatus, "auctionBidInfo": auctionBidInfo.flatMap { (value: AuctionBidInfo) -> ResultMap in value.resultMap }, "edited": edited])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 关联的 live
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 商品 label，拍卖商品 UI 上需要一些字段展示商品属性，如“颜色”、“尺码”等，同时这些属性不关联库存，所以和 variant 不是一个概念。此属性当前是拍卖商品专属。
      public var labels: [String?]? {
        get {
          return resultMap["labels"] as? [String?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "labels")
        }
      }

      /// 商品总数量。是 variants 中各种款式商品数量总和
      public var stock: Int? {
        get {
          return resultMap["stock"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "stock")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      /// 通过shopify创建的商品id
      public var shopifyProductId: GraphQLID? {
        get {
          return resultMap["shopifyProductId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "shopifyProductId")
        }
      }

      /// 拍卖价格, productType == AUCTION 时有
      public var auctionPrice: Int? {
        get {
          return resultMap["auctionPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionPrice")
        }
      }

      /// 拍卖配置信息, productType == AUCTION 时有
      public var auctionSetting: AuctionSetting? {
        get {
          return (resultMap["auctionSetting"] as? ResultMap).flatMap { AuctionSetting(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "auctionSetting")
        }
      }

      /// 拍卖状态, productType == AUCTION 时有
      public var auctionStatus: AuctionStatus? {
        get {
          return resultMap["auctionStatus"] as? AuctionStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionStatus")
        }
      }

      /// 拍卖出价信息, productType == AUCTION 时且已经开始拍卖时有
      public var auctionBidInfo: AuctionBidInfo? {
        get {
          return (resultMap["auctionBidInfo"] as? ResultMap).flatMap { AuctionBidInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "auctionBidInfo")
        }
      }

      /// 从小店商品 Product 同步过来时，是否已编辑过。
      /// 
      /// 调用 appCreateLiveProduct 创建的商品和调用过 appUpdateLiveProduct 修改的商品，都会被标记为已编辑过。
      /// 
      /// appBatchCreateLiveProducts 接口每次都会清空原直播商品编辑临时数据，重新创建直播商品。但标记已编辑过的商品，如果在调用
      /// appBatchCreateLiveProducts 时在参数里将 id 传过来了，则不会重新创建，会保留原编辑的信息。
      public var edited: Bool? {
        get {
          return resultMap["edited"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "edited")
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }

      public struct AuctionSetting: GraphQLSelectionSet {
        public static let possibleTypes = ["AuctionSetting"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("duration", type: .scalar(Int.self)),
          GraphQLField("extendTime", type: .scalar(Int.self)),
          GraphQLField("auctionStartedAt", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(duration: Int? = nil, extendTime: Int? = nil, auctionStartedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AuctionSetting", "duration": duration, "extendTime": extendTime, "auctionStartedAt": auctionStartedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 初始拍卖时长，单位：秒
        public var duration: Int? {
          get {
            return resultMap["duration"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "duration")
          }
        }

        /// 每次延长拍卖时，延长的时间，单位：秒
        public var extendTime: Int? {
          get {
            return resultMap["extendTime"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "extendTime")
          }
        }

        /// 开始拍卖时间, productType == AUCTION 时且已经开始拍卖时有
        public var auctionStartedAt: String? {
          get {
            return resultMap["auctionStartedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStartedAt")
          }
        }
      }

      public struct AuctionBidInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["AuctionBidInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("auctionStatus", type: .nonNull(.scalar(AuctionStatus.self))),
          GraphQLField("endBidTime", type: .nonNull(.scalar(String.self))),
          GraphQLField("extendBidTime", type: .scalar(Int.self)),
          GraphQLField("latestBidPrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("recommendBidPrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("bidsCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("latestBidder", type: .object(LatestBidder.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(auctionStatus: AuctionStatus, endBidTime: String, extendBidTime: Int? = nil, latestBidPrice: Int, recommendBidPrice: Int, bidsCount: Int, latestBidder: LatestBidder? = nil) {
          self.init(unsafeResultMap: ["__typename": "AuctionBidInfo", "auctionStatus": auctionStatus, "endBidTime": endBidTime, "extendBidTime": extendBidTime, "latestBidPrice": latestBidPrice, "recommendBidPrice": recommendBidPrice, "bidsCount": bidsCount, "latestBidder": latestBidder.flatMap { (value: LatestBidder) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 当前拍卖状态
        public var auctionStatus: AuctionStatus {
          get {
            return resultMap["auctionStatus"]! as! AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStatus")
          }
        }

        /// 当前出价结束时间
        public var endBidTime: String {
          get {
            return resultMap["endBidTime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endBidTime")
          }
        }

        /// 延长出价时间，单位：秒。此字段有值时，表示出价时间延长 {extendBidTime} 秒；为 null 时，表示无延长时间逻辑，即客户端不需要做处理
        public var extendBidTime: Int? {
          get {
            return resultMap["extendBidTime"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "extendBidTime")
          }
        }

        /// 最新出价
        public var latestBidPrice: Int {
          get {
            return resultMap["latestBidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "latestBidPrice")
          }
        }

        /// 建议出价
        public var recommendBidPrice: Int {
          get {
            return resultMap["recommendBidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "recommendBidPrice")
          }
        }

        /// 出价次数
        public var bidsCount: Int {
          get {
            return resultMap["bidsCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "bidsCount")
          }
        }

        /// 最新出价用户信息
        public var latestBidder: LatestBidder? {
          get {
            return (resultMap["latestBidder"] as? ResultMap).flatMap { LatestBidder(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "latestBidder")
          }
        }

        public struct LatestBidder: GraphQLSelectionSet {
          public static let possibleTypes = ["SimpleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("uid", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
          public var uid: String? {
            get {
              return resultMap["uid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "uid")
            }
          }
        }
      }
    }

    public struct GetServerTime: GraphQLSelectionSet {
      public static let possibleTypes = ["getServerTime"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("time", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(time: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "getServerTime", "time": time])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var time: Double? {
        get {
          return resultMap["time"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "time")
        }
      }
    }
  }
}

public final class AppGetMultiUploadUrlQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppGetMultiUploadURL($type: String!, $quantity: Int!) {
      appGetMultiUploadURL(type: $type, quantity: $quantity) {
        __typename
        uploadURL
        key
        url
      }
    }
    """

  public let operationName = "AppGetMultiUploadURL"

  public var type: String
  public var quantity: Int

  public init(type: String, quantity: Int) {
    self.type = type
    self.quantity = quantity
  }

  public var variables: GraphQLMap? {
    return ["type": type, "quantity": quantity]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetMultiUploadURL", arguments: ["type": GraphQLVariable("type"), "quantity": GraphQLVariable("quantity")], type: .list(.object(AppGetMultiUploadUrl.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetMultiUploadUrl: [AppGetMultiUploadUrl?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetMultiUploadURL": appGetMultiUploadUrl.flatMap { (value: [AppGetMultiUploadUrl?]) -> [ResultMap?] in value.map { (value: AppGetMultiUploadUrl?) -> ResultMap? in value.flatMap { (value: AppGetMultiUploadUrl) -> ResultMap in value.resultMap } } }])
    }

    /// 一次性获取多个预授权的文件上传地址
    public var appGetMultiUploadUrl: [AppGetMultiUploadUrl?]? {
      get {
        return (resultMap["appGetMultiUploadURL"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AppGetMultiUploadUrl?] in value.map { (value: ResultMap?) -> AppGetMultiUploadUrl? in value.flatMap { (value: ResultMap) -> AppGetMultiUploadUrl in AppGetMultiUploadUrl(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AppGetMultiUploadUrl?]) -> [ResultMap?] in value.map { (value: AppGetMultiUploadUrl?) -> ResultMap? in value.flatMap { (value: AppGetMultiUploadUrl) -> ResultMap in value.resultMap } } }, forKey: "appGetMultiUploadURL")
      }
    }

    public struct AppGetMultiUploadUrl: GraphQLSelectionSet {
      public static let possibleTypes = ["uploadURL"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadURL", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
        GraphQLField("url", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(uploadUrl: String? = nil, key: String? = nil, url: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "uploadURL", "uploadURL": uploadUrl, "key": key, "url": url])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 文件上传地址
      public var uploadUrl: String? {
        get {
          return resultMap["uploadURL"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uploadURL")
        }
      }

      /// 文件名，将此字段传给后端保存(头像、短视频文件等…)，后端返回对应的字段时，应先使用ctx.helper.formatFileUrl方法拼接，方便后续启用aws的CDN功能。
      public var key: String? {
        get {
          return resultMap["key"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      /// 文件下载地址
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }
    }
  }
}

public final class AppGetTicketOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppGetTicketOrder($id: ID!) {
      appGetTicketOrder(_id: $id) {
        __typename
        _id
        event {
          __typename
          _id
          name
          startDate
          endDate
          location
          placeId
          placeName
          placeAddress
          timezoneAbbr
          organizer {
            __typename
            name
            email
          }
        }
        receipts {
          __typename
          _id
          applePKPass
          holder {
            __typename
            firstName
            lastName
            email
          }
          qrCodeContent
          ticket {
            __typename
            _id
            name
            activateDates {
              __typename
              startDate
              endDate
            }
          }
          activatedAt
          activateLimit
          event {
            __typename
            name
            _id
            startDate
            endDate
            openTime
            closeTime
            location
            placeId
            placeName
            placeAddress
            status
            timezone
            timezoneAbbr
            shareLink
            organizer {
              __typename
              name
              email
            }
          }
          ticketOrder {
            __typename
            paidAt
            orderCode
          }
        }
        paidAt
        orderCode
      }
    }
    """

  public let operationName = "AppGetTicketOrder"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetTicketOrder", arguments: ["_id": GraphQLVariable("id")], type: .object(AppGetTicketOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetTicketOrder: AppGetTicketOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetTicketOrder": appGetTicketOrder.flatMap { (value: AppGetTicketOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【客户端专用接口】买家查找自己购买过的 ticket order 详情
    public var appGetTicketOrder: AppGetTicketOrder? {
      get {
        return (resultMap["appGetTicketOrder"] as? ResultMap).flatMap { AppGetTicketOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appGetTicketOrder")
      }
    }

    public struct AppGetTicketOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["TicketOrder"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("event", type: .nonNull(.object(Event.selections))),
        GraphQLField("receipts", type: .nonNull(.list(.nonNull(.object(Receipt.selections))))),
        GraphQLField("paidAt", type: .scalar(Double.self)),
        GraphQLField("orderCode", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, event: Event, receipts: [Receipt], paidAt: Double? = nil, orderCode: String) {
        self.init(unsafeResultMap: ["__typename": "TicketOrder", "_id": _id, "event": event.resultMap, "receipts": receipts.map { (value: Receipt) -> ResultMap in value.resultMap }, "paidAt": paidAt, "orderCode": orderCode])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// event 信息
      public var event: Event {
        get {
          return Event(unsafeResultMap: resultMap["event"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "event")
        }
      }

      /// 购买的票券
      public var receipts: [Receipt] {
        get {
          return (resultMap["receipts"] as! [ResultMap]).map { (value: ResultMap) -> Receipt in Receipt(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Receipt) -> ResultMap in value.resultMap }, forKey: "receipts")
        }
      }

      /// 支付时间
      public var paidAt: Double? {
        get {
          return resultMap["paidAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "paidAt")
        }
      }

      /// 订单编号
      public var orderCode: String {
        get {
          return resultMap["orderCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCode")
        }
      }

      public struct Event: GraphQLSelectionSet {
        public static let possibleTypes = ["Event"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("location", type: .nonNull(.list(.nonNull(.scalar(Double.self))))),
          GraphQLField("placeId", type: .nonNull(.scalar(String.self))),
          GraphQLField("placeName", type: .nonNull(.scalar(String.self))),
          GraphQLField("placeAddress", type: .nonNull(.scalar(String.self))),
          GraphQLField("timezoneAbbr", type: .nonNull(.scalar(String.self))),
          GraphQLField("organizer", type: .nonNull(.object(Organizer.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, startDate: String, endDate: String, location: [Double], placeId: String, placeName: String, placeAddress: String, timezoneAbbr: String, organizer: Organizer) {
          self.init(unsafeResultMap: ["__typename": "Event", "_id": _id, "name": name, "startDate": startDate, "endDate": endDate, "location": location, "placeId": placeId, "placeName": placeName, "placeAddress": placeAddress, "timezoneAbbr": timezoneAbbr, "organizer": organizer.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 活动标题
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 活动开始时间时间戳，单位：毫秒
        public var startDate: String {
          get {
            return resultMap["startDate"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "startDate")
          }
        }

        /// 活动结束时间时间戳，单位：毫秒
        public var endDate: String {
          get {
            return resultMap["endDate"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endDate")
          }
        }

        /// 经纬度位置 type:[lng,lat] 经度，纬度
        public var location: [Double] {
          get {
            return resultMap["location"]! as! [Double]
          }
          set {
            resultMap.updateValue(newValue, forKey: "location")
          }
        }

        /// google map 地址 id
        public var placeId: String {
          get {
            return resultMap["placeId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "placeId")
          }
        }

        /// 地名
        public var placeName: String {
          get {
            return resultMap["placeName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "placeName")
          }
        }

        /// 地址详情字符串
        public var placeAddress: String {
          get {
            return resultMap["placeAddress"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "placeAddress")
          }
        }

        /// 活动日期对应时区名称缩写，如 PST、PDT
        public var timezoneAbbr: String {
          get {
            return resultMap["timezoneAbbr"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "timezoneAbbr")
          }
        }

        /// 活动组织者
        public var organizer: Organizer {
          get {
            return Organizer(unsafeResultMap: resultMap["organizer"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "organizer")
          }
        }

        public struct Organizer: GraphQLSelectionSet {
          public static let possibleTypes = ["SimpleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(name: String? = nil, email: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "SimpleUser", "name": name, "email": email])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 邮箱
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }
        }
      }

      public struct Receipt: GraphQLSelectionSet {
        public static let possibleTypes = ["TicketReceipt"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("applePKPass", type: .nonNull(.scalar(String.self))),
          GraphQLField("holder", type: .nonNull(.object(Holder.selections))),
          GraphQLField("qrCodeContent", type: .nonNull(.scalar(String.self))),
          GraphQLField("ticket", type: .nonNull(.object(Ticket.selections))),
          GraphQLField("activatedAt", type: .nonNull(.list(.nonNull(.scalar(Double.self))))),
          GraphQLField("activateLimit", type: .nonNull(.scalar(Int.self))),
          GraphQLField("event", type: .nonNull(.object(Event.selections))),
          GraphQLField("ticketOrder", type: .nonNull(.object(TicketOrder.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, applePkPass: String, holder: Holder, qrCodeContent: String, ticket: Ticket, activatedAt: [Double], activateLimit: Int, event: Event, ticketOrder: TicketOrder) {
          self.init(unsafeResultMap: ["__typename": "TicketReceipt", "_id": _id, "applePKPass": applePkPass, "holder": holder.resultMap, "qrCodeContent": qrCodeContent, "ticket": ticket.resultMap, "activatedAt": activatedAt, "activateLimit": activateLimit, "event": event.resultMap, "ticketOrder": ticketOrder.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 【ios 专用】获取 pkpass 文件 URL
        public var applePkPass: String {
          get {
            return resultMap["applePKPass"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "applePKPass")
          }
        }

        /// 持票人
        public var holder: Holder {
          get {
            return Holder(unsafeResultMap: resultMap["holder"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "holder")
          }
        }

        /// 票据对应的 qrcode 内容（注意内容是一串 json 字符串，非图片链接）
        /// 
        /// json 结构：{ data: { certificate: String!  } }
        public var qrCodeContent: String {
          get {
            return resultMap["qrCodeContent"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "qrCodeContent")
          }
        }

        /// 关联的票券
        public var ticket: Ticket {
          get {
            return Ticket(unsafeResultMap: resultMap["ticket"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "ticket")
          }
        }

        /// 验票时间
        public var activatedAt: [Double] {
          get {
            return resultMap["activatedAt"]! as! [Double]
          }
          set {
            resultMap.updateValue(newValue, forKey: "activatedAt")
          }
        }

        /// 验票次数上限
        public var activateLimit: Int {
          get {
            return resultMap["activateLimit"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "activateLimit")
          }
        }

        /// 关联的活动
        public var event: Event {
          get {
            return Event(unsafeResultMap: resultMap["event"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "event")
          }
        }

        /// 关联的 Ticket 订单
        public var ticketOrder: TicketOrder {
          get {
            return TicketOrder(unsafeResultMap: resultMap["ticketOrder"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "ticketOrder")
          }
        }

        public struct Holder: GraphQLSelectionSet {
          public static let possibleTypes = ["TicketHolder"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
            GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
            GraphQLField("email", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(firstName: String, lastName: String, email: String) {
            self.init(unsafeResultMap: ["__typename": "TicketHolder", "firstName": firstName, "lastName": lastName, "email": email])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var firstName: String {
            get {
              return resultMap["firstName"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "firstName")
            }
          }

          public var lastName: String {
            get {
              return resultMap["lastName"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastName")
            }
          }

          public var email: String {
            get {
              return resultMap["email"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }
        }

        public struct Ticket: GraphQLSelectionSet {
          public static let possibleTypes = ["Ticket"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("activateDates", type: .nonNull(.list(.nonNull(.object(ActivateDate.selections))))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String, activateDates: [ActivateDate]) {
            self.init(unsafeResultMap: ["__typename": "Ticket", "_id": _id, "name": name, "activateDates": activateDates.map { (value: ActivateDate) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 票券名称, maxlength: 66
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 可验票时间
          public var activateDates: [ActivateDate] {
            get {
              return (resultMap["activateDates"] as! [ResultMap]).map { (value: ResultMap) -> ActivateDate in ActivateDate(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: ActivateDate) -> ResultMap in value.resultMap }, forKey: "activateDates")
            }
          }

          public struct ActivateDate: GraphQLSelectionSet {
            public static let possibleTypes = ["TicketDate"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
              GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(startDate: String, endDate: String) {
              self.init(unsafeResultMap: ["__typename": "TicketDate", "startDate": startDate, "endDate": endDate])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 起始日期时间戳，单位：毫秒，举例:1660042761137
            public var startDate: String {
              get {
                return resultMap["startDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "startDate")
              }
            }

            /// 结束日期时间戳，单位：毫秒，举例：1660042761137
            public var endDate: String {
              get {
                return resultMap["endDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "endDate")
              }
            }
          }
        }

        public struct Event: GraphQLSelectionSet {
          public static let possibleTypes = ["Event"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
            GraphQLField("openTime", type: .nonNull(.scalar(String.self))),
            GraphQLField("closeTime", type: .nonNull(.scalar(String.self))),
            GraphQLField("location", type: .nonNull(.list(.nonNull(.scalar(Double.self))))),
            GraphQLField("placeId", type: .nonNull(.scalar(String.self))),
            GraphQLField("placeName", type: .nonNull(.scalar(String.self))),
            GraphQLField("placeAddress", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .nonNull(.scalar(EventStatus.self))),
            GraphQLField("timezone", type: .nonNull(.scalar(String.self))),
            GraphQLField("timezoneAbbr", type: .nonNull(.scalar(String.self))),
            GraphQLField("shareLink", type: .nonNull(.scalar(String.self))),
            GraphQLField("organizer", type: .nonNull(.object(Organizer.selections))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(name: String, _id: GraphQLID, startDate: String, endDate: String, openTime: String, closeTime: String, location: [Double], placeId: String, placeName: String, placeAddress: String, status: EventStatus, timezone: String, timezoneAbbr: String, shareLink: String, organizer: Organizer) {
            self.init(unsafeResultMap: ["__typename": "Event", "name": name, "_id": _id, "startDate": startDate, "endDate": endDate, "openTime": openTime, "closeTime": closeTime, "location": location, "placeId": placeId, "placeName": placeName, "placeAddress": placeAddress, "status": status, "timezone": timezone, "timezoneAbbr": timezoneAbbr, "shareLink": shareLink, "organizer": organizer.resultMap])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 活动标题
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 活动开始时间时间戳，单位：毫秒
          public var startDate: String {
            get {
              return resultMap["startDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "startDate")
            }
          }

          /// 活动结束时间时间戳，单位：毫秒
          public var endDate: String {
            get {
              return resultMap["endDate"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endDate")
            }
          }

          /// 活动开始时间点，24h 制，格式 HH:mm:ss
          public var openTime: String {
            get {
              return resultMap["openTime"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openTime")
            }
          }

          /// 活动结束时间点，24h 制，格式 HH:mm:ss
          public var closeTime: String {
            get {
              return resultMap["closeTime"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "closeTime")
            }
          }

          /// 经纬度位置 type:[lng,lat] 经度，纬度
          public var location: [Double] {
            get {
              return resultMap["location"]! as! [Double]
            }
            set {
              resultMap.updateValue(newValue, forKey: "location")
            }
          }

          /// google map 地址 id
          public var placeId: String {
            get {
              return resultMap["placeId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "placeId")
            }
          }

          /// 地名
          public var placeName: String {
            get {
              return resultMap["placeName"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "placeName")
            }
          }

          /// 地址详情字符串
          public var placeAddress: String {
            get {
              return resultMap["placeAddress"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "placeAddress")
            }
          }

          /// 活动状态
          public var status: EventStatus {
            get {
              return resultMap["status"]! as! EventStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 活动日期对应时区，如 America/Los_Angeles  Asia/Hong_Kong 等。参考：https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
          public var timezone: String {
            get {
              return resultMap["timezone"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "timezone")
            }
          }

          /// 活动日期对应时区名称缩写，如 PST、PDT
          public var timezoneAbbr: String {
            get {
              return resultMap["timezoneAbbr"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "timezoneAbbr")
            }
          }

          /// 分享链接
          public var shareLink: String {
            get {
              return resultMap["shareLink"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 活动组织者
          public var organizer: Organizer {
            get {
              return Organizer(unsafeResultMap: resultMap["organizer"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "organizer")
            }
          }

          public struct Organizer: GraphQLSelectionSet {
            public static let possibleTypes = ["SimpleUser"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(name: String? = nil, email: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "SimpleUser", "name": name, "email": email])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 用户名字
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 邮箱
            public var email: String? {
              get {
                return resultMap["email"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "email")
              }
            }
          }
        }

        public struct TicketOrder: GraphQLSelectionSet {
          public static let possibleTypes = ["TicketOrder"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("paidAt", type: .scalar(Double.self)),
            GraphQLField("orderCode", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(paidAt: Double? = nil, orderCode: String) {
            self.init(unsafeResultMap: ["__typename": "TicketOrder", "paidAt": paidAt, "orderCode": orderCode])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 支付时间
          public var paidAt: Double? {
            get {
              return resultMap["paidAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "paidAt")
            }
          }

          /// 订单编号
          public var orderCode: String {
            get {
              return resultMap["orderCode"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "orderCode")
            }
          }
        }
      }
    }
  }
}

public final class AppLastPaymentMethodQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appLastPaymentMethod {
      appLastPaymentMethod {
        __typename
        _id
        paymentMethod
        stripePaymentMethodId
        card {
          __typename
          _id
          brand
          brandIcon
          firstName
          lastName
          expiryDate
          cvvCode
          email
          stripePaymentMethodId
          last4
          isDefaultCard
          invalidCard
          invalidFields
        }
      }
    }
    """

  public let operationName = "appLastPaymentMethod"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appLastPaymentMethod", type: .object(AppLastPaymentMethod.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appLastPaymentMethod: AppLastPaymentMethod? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appLastPaymentMethod": appLastPaymentMethod.flatMap { (value: AppLastPaymentMethod) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 上次成功支付的支付方式，无成功支付记录、上次支付成功的方式不可用、无支付方式等情况下返回 null
    public var appLastPaymentMethod: AppLastPaymentMethod? {
      get {
        return (resultMap["appLastPaymentMethod"] as? ResultMap).flatMap { AppLastPaymentMethod(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appLastPaymentMethod")
      }
    }

    public struct AppLastPaymentMethod: GraphQLSelectionSet {
      public static let possibleTypes = ["LastPaymentMethodModel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("paymentMethod", type: .scalar(PaymentMethod.self)),
        GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
        GraphQLField("card", type: .object(Card.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, paymentMethod: PaymentMethod? = nil, stripePaymentMethodId: String? = nil, card: Card? = nil) {
        self.init(unsafeResultMap: ["__typename": "LastPaymentMethodModel", "_id": _id, "paymentMethod": paymentMethod, "stripePaymentMethodId": stripePaymentMethodId, "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 支付方式名称
      public var paymentMethod: PaymentMethod? {
        get {
          return resultMap["paymentMethod"] as? PaymentMethod
        }
        set {
          resultMap.updateValue(newValue, forKey: "paymentMethod")
        }
      }

      /// stripe 的 paymentMethodId，用于 createPayment 接口传入的 paymentMethodId
      public var stripePaymentMethodId: String? {
        get {
          return resultMap["stripePaymentMethodId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
        }
      }

      /// 如果 paymentMethod 字段是 CARD，这里是关联的卡片信息
      public var card: Card? {
        get {
          return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "card")
        }
      }

      public struct Card: GraphQLSelectionSet {
        public static let possibleTypes = ["Card"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("brand", type: .nonNull(.scalar(String.self))),
          GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
          GraphQLField("last4", type: .nonNull(.scalar(String.self))),
          GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("invalidFields", type: .nonNull(.list(.scalar(enum__cardInvalidField.self)))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, brand: String, brandIcon: String, firstName: String, lastName: String, expiryDate: String, cvvCode: String, email: String? = nil, stripePaymentMethodId: String, last4: String, isDefaultCard: Bool, invalidCard: Bool, invalidFields: [enum__cardInvalidField?]) {
          self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "brand": brand, "brandIcon": brandIcon, "firstName": firstName, "lastName": lastName, "expiryDate": expiryDate, "cvvCode": cvvCode, "email": email, "stripePaymentMethodId": stripePaymentMethodId, "last4": last4, "isDefaultCard": isDefaultCard, "invalidCard": invalidCard, "invalidFields": invalidFields])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 发卡机构, 对应 UI 上的`Bank Name`
        public var brand: String {
          get {
            return resultMap["brand"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "brand")
          }
        }

        /// 发卡机构图片
        public var brandIcon: String {
          get {
            return resultMap["brandIcon"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "brandIcon")
          }
        }

        /// firstName
        public var firstName: String {
          get {
            return resultMap["firstName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstName")
          }
        }

        /// lastName
        public var lastName: String {
          get {
            return resultMap["lastName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastName")
          }
        }

        /// expiryDate
        public var expiryDate: String {
          get {
            return resultMap["expiryDate"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "expiryDate")
          }
        }

        /// cvvCode
        public var cvvCode: String {
          get {
            return resultMap["cvvCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "cvvCode")
          }
        }

        /// 邮箱
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// stripe payment method id
        public var stripePaymentMethodId: String {
          get {
            return resultMap["stripePaymentMethodId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
          }
        }

        /// last4
        public var last4: String {
          get {
            return resultMap["last4"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "last4")
          }
        }

        /// 是否是默认信用卡
        public var isDefaultCard: Bool {
          get {
            return resultMap["isDefaultCard"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDefaultCard")
          }
        }

        /// 卡片是否无效，true 表示无效，false 表示有效
        public var invalidCard: Bool {
          get {
            return resultMap["invalidCard"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "invalidCard")
          }
        }

        /// 卡片校验无效时，具体无效的字段. 有效时为空数组
        public var invalidFields: [enum__cardInvalidField?] {
          get {
            return resultMap["invalidFields"]! as! [enum__cardInvalidField?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "invalidFields")
          }
        }
      }
    }
  }
}

public final class AppListAuctionBidRecordsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListAuctionBidRecords($productId: ID!, $page: Int, $pageSize: Int) {
      appListAuctionBidRecords(productId: $productId, page: $page, pageSize: $pageSize) {
        __typename
        pageInfo {
          __typename
          hashNextPage
        }
        totalCount
        edges {
          __typename
          bidder {
            __typename
            avatar
            name
          }
          bidPrice
          bidAt
          product {
            __typename
            auctionStatus
          }
        }
      }
    }
    """

  public let operationName = "AppListAuctionBidRecords"

  public var productId: GraphQLID
  public var page: Int?
  public var pageSize: Int?

  public init(productId: GraphQLID, page: Int? = nil, pageSize: Int? = nil) {
    self.productId = productId
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["productId": productId, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListAuctionBidRecords", arguments: ["productId": GraphQLVariable("productId"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(AppListAuctionBidRecord.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListAuctionBidRecords: AppListAuctionBidRecord? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListAuctionBidRecords": appListAuctionBidRecords.flatMap { (value: AppListAuctionBidRecord) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 获取拍卖出价记录列表
    public var appListAuctionBidRecords: AppListAuctionBidRecord? {
      get {
        return (resultMap["appListAuctionBidRecords"] as? ResultMap).flatMap { AppListAuctionBidRecord(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListAuctionBidRecords")
      }
    }

    public struct AppListAuctionBidRecord: GraphQLSelectionSet {
      public static let possibleTypes = ["listAuctionBidRecordsResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        GraphQLField("totalCount", type: .scalar(Int.self)),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo? = nil, totalCount: Int? = nil, edges: [Edge?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "listAuctionBidRecordsResponse", "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }, "totalCount": totalCount, "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["AuctionBidRecord"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("bidder", type: .nonNull(.object(Bidder.selections))),
          GraphQLField("bidPrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("bidAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .nonNull(.object(Product.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(bidder: Bidder, bidPrice: Int, bidAt: String, product: Product) {
          self.init(unsafeResultMap: ["__typename": "AuctionBidRecord", "bidder": bidder.resultMap, "bidPrice": bidPrice, "bidAt": bidAt, "product": product.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 出价人
        public var bidder: Bidder {
          get {
            return Bidder(unsafeResultMap: resultMap["bidder"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "bidder")
          }
        }

        /// 出价价格
        public var bidPrice: Int {
          get {
            return resultMap["bidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "bidPrice")
          }
        }

        /// 出价时间
        public var bidAt: String {
          get {
            return resultMap["bidAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bidAt")
          }
        }

        /// 拍卖商品
        public var product: Product {
          get {
            return Product(unsafeResultMap: resultMap["product"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "product")
          }
        }

        public struct Bidder: GraphQLSelectionSet {
          public static let possibleTypes = ["SimpleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(avatar: String? = nil, name: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "SimpleUser", "avatar": avatar, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["LiveProduct"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(auctionStatus: AuctionStatus? = nil) {
            self.init(unsafeResultMap: ["__typename": "LiveProduct", "auctionStatus": auctionStatus])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 拍卖状态, productType == AUCTION 时有
          public var auctionStatus: AuctionStatus? {
            get {
              return resultMap["auctionStatus"] as? AuctionStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStatus")
            }
          }
        }
      }
    }
  }
}

public final class AppListEventsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListEvents($page: Int, $pageSize: Int, $startDate: input__conditionalOperation, $endDate: input__conditionalOperation) {
      appListEvents(page: $page, pageSize: $pageSize, sort: [{field: createdAt, value: DESC}], startDate: $startDate, endDate: $endDate) {
        __typename
        edges {
          __typename
          _id
          coverImages {
            __typename
            image
            key
          }
          name
          description
        }
        pageInfo {
          __typename
          hashNextPage
        }
        totalCount
      }
    }
    """

  public let operationName = "AppListEvents"

  public var page: Int?
  public var pageSize: Int?
  public var startDate: input__conditionalOperation?
  public var endDate: input__conditionalOperation?

  public init(page: Int? = nil, pageSize: Int? = nil, startDate: input__conditionalOperation? = nil, endDate: input__conditionalOperation? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.startDate = startDate
    self.endDate = endDate
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "startDate": startDate, "endDate": endDate]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListEvents", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "sort": [["field": "createdAt", "value": "DESC"]], "startDate": GraphQLVariable("startDate"), "endDate": GraphQLVariable("endDate")], type: .object(AppListEvent.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListEvents: AppListEvent? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListEvents": appListEvents.flatMap { (value: AppListEvent) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【ezze app 专用】用户获取活动列表
    public var appListEvents: AppListEvent? {
      get {
        return (resultMap["appListEvents"] as? ResultMap).flatMap { AppListEvent(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListEvents")
      }
    }

    public struct AppListEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["AppListEventResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        GraphQLField("totalCount", type: .scalar(Int.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil, totalCount: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "AppListEventResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }, "totalCount": totalCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["Event"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("coverImages", type: .nonNull(.list(.nonNull(.object(CoverImage.selections))))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, coverImages: [CoverImage], name: String, description: String) {
          self.init(unsafeResultMap: ["__typename": "Event", "_id": _id, "coverImages": coverImages.map { (value: CoverImage) -> ResultMap in value.resultMap }, "name": name, "description": description])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 活动描述图片
        public var coverImages: [CoverImage] {
          get {
            return (resultMap["coverImages"] as! [ResultMap]).map { (value: ResultMap) -> CoverImage in CoverImage(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: CoverImage) -> ResultMap in value.resultMap }, forKey: "coverImages")
          }
        }

        /// 活动标题
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 活动副标题
        public var description: String {
          get {
            return resultMap["description"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public struct CoverImage: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }
    }
  }
}

public final class AppListInboxNotificationsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListInboxNotifications($page: Int, $pageSize: Int, $category: InboxNotificationCategory, $isSubNotice: Boolean, $parentNotice: ID) {
      appListInboxNotifications(page: $page, pageSize: $pageSize, category: $category, isSubNotice: $isSubNotice, parentNotice: $parentNotice) {
        __typename
        edges {
          __typename
          sender {
            __typename
            _id
            avatar
            username
            name
            uid
            role
            userType
            phoneNumber
            email
          }
          isAggregateNotice
          aggregateCount
          content
          contentElements {
            __typename
            start
            end
            type
          }
          jumpType
          jumpPage
          isSubNotice
          hasRead
          createdAt
          jumpButton {
            __typename
            type
            followStatus
            thumbnailImage
          }
          category
          _id
        }
      }
    }
    """

  public let operationName = "AppListInboxNotifications"

  public var page: Int?
  public var pageSize: Int?
  public var category: InboxNotificationCategory?
  public var isSubNotice: Bool?
  public var parentNotice: GraphQLID?

  public init(page: Int? = nil, pageSize: Int? = nil, category: InboxNotificationCategory? = nil, isSubNotice: Bool? = nil, parentNotice: GraphQLID? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.category = category
    self.isSubNotice = isSubNotice
    self.parentNotice = parentNotice
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "category": category, "isSubNotice": isSubNotice, "parentNotice": parentNotice]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListInboxNotifications", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "category": GraphQLVariable("category"), "isSubNotice": GraphQLVariable("isSubNotice"), "parentNotice": GraphQLVariable("parentNotice")], type: .nonNull(.object(AppListInboxNotification.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListInboxNotifications: AppListInboxNotification) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListInboxNotifications": appListInboxNotifications.resultMap])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 拉取 inbox 通知，只能获取最近三个月的通知
    public var appListInboxNotifications: AppListInboxNotification {
      get {
        return AppListInboxNotification(unsafeResultMap: resultMap["appListInboxNotifications"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "appListInboxNotifications")
      }
    }

    public struct AppListInboxNotification: GraphQLSelectionSet {
      public static let possibleTypes = ["listInboxNotificationResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge]) {
        self.init(unsafeResultMap: ["__typename": "listInboxNotificationResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["InboxNotification"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("sender", type: .nonNull(.list(.nonNull(.object(Sender.selections))))),
          GraphQLField("isAggregateNotice", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("aggregateCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("contentElements", type: .nonNull(.list(.object(ContentElement.selections)))),
          GraphQLField("jumpType", type: .nonNull(.scalar(InboxNotificationJumpType.self))),
          GraphQLField("jumpPage", type: .nonNull(.scalar(String.self))),
          GraphQLField("isSubNotice", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("hasRead", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("jumpButton", type: .nonNull(.object(JumpButton.selections))),
          GraphQLField("category", type: .nonNull(.scalar(InboxNotificationCategory.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(sender: [Sender], isAggregateNotice: Bool, aggregateCount: Int, content: String, contentElements: [ContentElement?], jumpType: InboxNotificationJumpType, jumpPage: String, isSubNotice: Bool, hasRead: Bool, createdAt: String, jumpButton: JumpButton, category: InboxNotificationCategory, _id: GraphQLID) {
          self.init(unsafeResultMap: ["__typename": "InboxNotification", "sender": sender.map { (value: Sender) -> ResultMap in value.resultMap }, "isAggregateNotice": isAggregateNotice, "aggregateCount": aggregateCount, "content": content, "contentElements": contentElements.map { (value: ContentElement?) -> ResultMap? in value.flatMap { (value: ContentElement) -> ResultMap in value.resultMap } }, "jumpType": jumpType, "jumpPage": jumpPage, "isSubNotice": isSubNotice, "hasRead": hasRead, "createdAt": createdAt, "jumpButton": jumpButton.resultMap, "category": category, "_id": _id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 通知发送人. 数组最多 3 条记录
        public var sender: [Sender] {
          get {
            return (resultMap["sender"] as! [ResultMap]).map { (value: ResultMap) -> Sender in Sender(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Sender) -> ResultMap in value.resultMap }, forKey: "sender")
          }
        }

        /// 是否是聚合消息
        public var isAggregateNotice: Bool {
          get {
            return resultMap["isAggregateNotice"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isAggregateNotice")
          }
        }

        /// 聚合通知总数。普通消息 count = 1, 聚合消息 count > 1
        public var aggregateCount: Int {
          get {
            return resultMap["aggregateCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "aggregateCount")
          }
        }

        /// 消息内容
        public var content: String {
          get {
            return resultMap["content"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "content")
          }
        }

        /// 消息内容文本中特殊元素的数据
        public var contentElements: [ContentElement?] {
          get {
            return (resultMap["contentElements"] as! [ResultMap?]).map { (value: ResultMap?) -> ContentElement? in value.flatMap { (value: ResultMap) -> ContentElement in ContentElement(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.map { (value: ContentElement?) -> ResultMap? in value.flatMap { (value: ContentElement) -> ResultMap in value.resultMap } }, forKey: "contentElements")
          }
        }

        /// 通知跳转的类型
        public var jumpType: InboxNotificationJumpType {
          get {
            return resultMap["jumpType"]! as! InboxNotificationJumpType
          }
          set {
            resultMap.updateValue(newValue, forKey: "jumpType")
          }
        }

        /// ezze:// 或 http:// 或 https:// 开头的 url.  ezze:// 开头表示跳转内部页面，具体解析方式见
        /// http://szo.ezze.live:18181/docs/backend/backend-ezzeurl-jump-definition
        public var jumpPage: String {
          get {
            return resultMap["jumpPage"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "jumpPage")
          }
        }

        /// 是否是聚合通知的子通知
        public var isSubNotice: Bool {
          get {
            return resultMap["isSubNotice"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSubNotice")
          }
        }

        /// 消息是否已读
        public var hasRead: Bool {
          get {
            return resultMap["hasRead"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasRead")
          }
        }

        /// 消息创建时间
        public var createdAt: String {
          get {
            return resultMap["createdAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 通知右侧功能按钮需要的数据
        public var jumpButton: JumpButton {
          get {
            return JumpButton(unsafeResultMap: resultMap["jumpButton"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "jumpButton")
          }
        }

        /// 通知的分类（App 端不需要关心此字段）
        public var category: InboxNotificationCategory {
          get {
            return resultMap["category"]! as! InboxNotificationCategory
          }
          set {
            resultMap.updateValue(newValue, forKey: "category")
          }
        }

        /// 通知的 id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public struct Sender: GraphQLSelectionSet {
          public static let possibleTypes = ["SimpleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("uid", type: .scalar(String.self)),
            GraphQLField("role", type: .scalar(enum__userRole.self)),
            GraphQLField("userType", type: .scalar(enum__userType.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil, role: enum__userRole? = nil, userType: enum__userType? = nil, phoneNumber: String? = nil, email: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid, "role": role, "userType": userType, "phoneNumber": phoneNumber, "email": email])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
          public var uid: String? {
            get {
              return resultMap["uid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "uid")
            }
          }

          /// 用户角色
          public var role: enum__userRole? {
            get {
              return resultMap["role"] as? enum__userRole
            }
            set {
              resultMap.updateValue(newValue, forKey: "role")
            }
          }

          /// 用户类型
          public var userType: enum__userType? {
            get {
              return resultMap["userType"] as? enum__userType
            }
            set {
              resultMap.updateValue(newValue, forKey: "userType")
            }
          }

          /// 手机号
          public var phoneNumber: String? {
            get {
              return resultMap["phoneNumber"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          /// 邮箱
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }
        }

        public struct ContentElement: GraphQLSelectionSet {
          public static let possibleTypes = ["NotificationContentElement"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("start", type: .nonNull(.scalar(Int.self))),
            GraphQLField("end", type: .nonNull(.scalar(Int.self))),
            GraphQLField("type", type: .nonNull(.scalar(NotificationContentElementType.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(start: Int, end: Int, type: NotificationContentElementType) {
            self.init(unsafeResultMap: ["__typename": "NotificationContentElement", "start": start, "end": end, "type": type])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var start: Int {
            get {
              return resultMap["start"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "start")
            }
          }

          public var end: Int {
            get {
              return resultMap["end"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "end")
            }
          }

          public var type: NotificationContentElementType {
            get {
              return resultMap["type"]! as! NotificationContentElementType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }
        }

        public struct JumpButton: GraphQLSelectionSet {
          public static let possibleTypes = ["InboxNotificationJumpButton"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("type", type: .scalar(InboxNotificationJumpButtonType.self)),
            GraphQLField("followStatus", type: .scalar(Bool.self)),
            GraphQLField("thumbnailImage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(type: InboxNotificationJumpButtonType? = nil, followStatus: Bool? = nil, thumbnailImage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "InboxNotificationJumpButton", "type": type, "followStatus": followStatus, "thumbnailImage": thumbnailImage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var type: InboxNotificationJumpButtonType? {
            get {
              return resultMap["type"] as? InboxNotificationJumpButtonType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          /// type = Follow 时有值。表示是否关注了通知发送者
          public var followStatus: Bool? {
            get {
              return resultMap["followStatus"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followStatus")
            }
          }

          /// type = Thumbnail 时有值。表示缩略图地址
          public var thumbnailImage: String? {
            get {
              return resultMap["thumbnailImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "thumbnailImage")
            }
          }
        }
      }
    }
  }
}

public final class AppListLiveWatchListQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appListLiveWatchList($page: Int!, $pageSize: Int!) {
      appListLiveWatchList(page: $page, pageSize: $pageSize) {
        __typename
        totalCount
        pageInfo {
          __typename
          hashNextPage
        }
        edges {
          __typename
          _id
          liveStatus
          subscribedAt
          updatedAt
          user {
            __typename
            _id
            avatar
            bio
            name
            username
            createdAt
            role
          }
          createdAt
          live {
            __typename
            scheduleStartAt
            streamingStatus
            status
            _id
            chatroomId
            ivsLiveAddress
            viewCount
            newFansCount
            user {
              __typename
              username
              _id
              uid
              avatar
              followed
              role
            }
            likeCount
            orderCount
            coverImage
            title
            hasShownCoupon
            collaboratingUser
            explainProduct
            coupons {
              __typename
              _id
              discountType
              value
              quantity
              receiveCount
            }
            products {
              __typename
              _id
              name
              description
              images {
                __typename
                image
                key
              }
              stock
              regularPrice
              livePrice
              variants {
                __typename
                _id
                name
                sku
                quantity
              }
              isFreeShipping
              shippingInfo {
                __typename
                companyName
                price
                method
              }
              productType
            }
            moments {
              __typename
              video
              coverImage
            }
            shareLink
            teaserVideo {
              __typename
              _id
              videoType
              user {
                __typename
                username
                _id
                avatar
                role
              }
              coverImage
              video
              duration
              describe
              describeMapping {
                __typename
                users {
                  __typename
                  text
                  id {
                    __typename
                    _id
                  }
                }
              }
              viewCount
              likeCount
              commentCount
              shareCount
              watch
              allowComment
              location
              placeName
              shareLink
              interests {
                __typename
                _id
                name
                priority
                videoCount
                userCount
                followed
                isSuspended
              }
              music {
                __typename
                _id
                title
              }
              deleted
              teaserTitle
              liveStartAt
              liked
              products {
                __typename
                product
                name
                description
                images {
                  __typename
                  image
                  key
                }
                regularPrice
                livePrice
                productType
                variants {
                  __typename
                  _id
                  name
                  sku
                  quantity
                }
              }
              hasSubscribedLive
              live {
                __typename
                _id
                coverImage
                title
                status
                scheduleStartAt
                streamingStatus
              }
            }
            startRecords {
              __typename
              endAt
              startAt
            }
            startAt
            endAt
          }
        }
      }
    }
    """

  public let operationName = "appListLiveWatchList"

  public var page: Int
  public var pageSize: Int

  public init(page: Int, pageSize: Int) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListLiveWatchList", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .nonNull(.object(AppListLiveWatchList.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListLiveWatchList: AppListLiveWatchList) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListLiveWatchList": appListLiveWatchList.resultMap])
    }

    /// ***【接口权限: 普通登录用户】***
    /// MePage -> My WatchList 数据接口
    public var appListLiveWatchList: AppListLiveWatchList {
      get {
        return AppListLiveWatchList(unsafeResultMap: resultMap["appListLiveWatchList"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "appListLiveWatchList")
      }
    }

    public struct AppListLiveWatchList: GraphQLSelectionSet {
      public static let possibleTypes = ["listLiveWatchListResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, pageInfo: PageInfo, edges: [Edge]) {
        self.init(unsafeResultMap: ["__typename": "listLiveWatchListResponse", "totalCount": totalCount, "pageInfo": pageInfo.resultMap, "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveWatchList"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("liveStatus", type: .nonNull(.scalar(LiveWatchListItemLiveStatus.self))),
          GraphQLField("subscribedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("live", type: .nonNull(.object(Live.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, liveStatus: LiveWatchListItemLiveStatus, subscribedAt: String, updatedAt: String, user: User, createdAt: String, live: Live) {
          self.init(unsafeResultMap: ["__typename": "LiveWatchList", "_id": _id, "liveStatus": liveStatus, "subscribedAt": subscribedAt, "updatedAt": updatedAt, "user": user.resultMap, "createdAt": createdAt, "live": live.resultMap])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var liveStatus: LiveWatchListItemLiveStatus {
          get {
            return resultMap["liveStatus"]! as! LiveWatchListItemLiveStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveStatus")
          }
        }

        public var subscribedAt: String {
          get {
            return resultMap["subscribedAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "subscribedAt")
          }
        }

        public var updatedAt: String {
          get {
            return resultMap["updatedAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var user: User {
          get {
            return User(unsafeResultMap: resultMap["user"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "user")
          }
        }

        public var createdAt: String {
          get {
            return resultMap["createdAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var live: Live {
          get {
            return Live(unsafeResultMap: resultMap["live"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "live")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("bio", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("role", type: .scalar(enum__userRole.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, bio: String? = nil, name: String? = nil, username: String? = nil, createdAt: Double? = nil, role: enum__userRole? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "bio": bio, "name": name, "username": username, "createdAt": createdAt, "role": role])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 个人简历
          public var bio: String? {
            get {
              return resultMap["bio"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "bio")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 创建日期
          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// 用户角色
          public var role: enum__userRole? {
            get {
              return resultMap["role"] as? enum__userRole
            }
            set {
              resultMap.updateValue(newValue, forKey: "role")
            }
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("scheduleStartAt", type: .scalar(String.self)),
            GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            GraphQLField("status", type: .scalar(Bool.self)),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomId", type: .scalar(String.self)),
            GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("newFansCount", type: .scalar(Int.self)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("orderCount", type: .scalar(Int.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
            GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
            GraphQLField("explainProduct", type: .scalar(GraphQLID.self)),
            GraphQLField("coupons", type: .list(.object(Coupon.selections))),
            GraphQLField("products", type: .list(.object(Product.selections))),
            GraphQLField("moments", type: .list(.object(Moment.selections))),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("teaserVideo", type: .object(TeaserVideo.selections)),
            GraphQLField("startRecords", type: .list(.object(StartRecord.selections))),
            GraphQLField("startAt", type: .scalar(Double.self)),
            GraphQLField("endAt", type: .scalar(Double.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil, status: Bool? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, collaboratingUser: GraphQLID? = nil, explainProduct: GraphQLID? = nil, coupons: [Coupon?]? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil, shareLink: String? = nil, teaserVideo: TeaserVideo? = nil, startRecords: [StartRecord?]? = nil, startAt: Double? = nil, endAt: Double? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus, "status": status, "_id": _id, "chatroomId": chatroomId, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "collaboratingUser": collaboratingUser, "explainProduct": explainProduct, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "teaserVideo": teaserVideo.flatMap { (value: TeaserVideo) -> ResultMap in value.resultMap }, "startRecords": startRecords.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, "startAt": startAt, "endAt": endAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// live schedule 开始时间
          public var scheduleStartAt: String? {
            get {
              return resultMap["scheduleStartAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "scheduleStartAt")
            }
          }

          /// 直播状态，可替代早期的 status
          public var streamingStatus: LiveStreamingStatus? {
            get {
              return resultMap["streamingStatus"] as? LiveStreamingStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "streamingStatus")
            }
          }

          /// 是否正在直播
          public var status: Bool? {
            get {
              return resultMap["status"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 环信聊天室的id
          public var chatroomId: String? {
            get {
              return resultMap["chatroomId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "chatroomId")
            }
          }

          /// 直播推流播放地址
          public var ivsLiveAddress: String? {
            get {
              return resultMap["ivsLiveAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
            }
          }

          /// 流量数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 新增粉丝数
          public var newFansCount: Int? {
            get {
              return resultMap["newFansCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "newFansCount")
            }
          }

          /// 用户
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          /// 点赞数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 本场直播订单数量
          public var orderCount: Int? {
            get {
              return resultMap["orderCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "orderCount")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
          public var hasShownCoupon: Bool? {
            get {
              return resultMap["hasShownCoupon"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasShownCoupon")
            }
          }

          /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
          public var collaboratingUser: GraphQLID? {
            get {
              return resultMap["collaboratingUser"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "collaboratingUser")
            }
          }

          /// 主播正在讲解的商品
          public var explainProduct: GraphQLID? {
            get {
              return resultMap["explainProduct"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "explainProduct")
            }
          }

          /// 直播间正在派发的优惠劵
          public var coupons: [Coupon?]? {
            get {
              return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
            }
          }

          /// 直播间正在出售的商品
          public var products: [Product?]? {
            get {
              return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
            }
          }

          /// 直播片段
          public var moments: [Moment?]? {
            get {
              return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
            }
          }

          /// live 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// live 关联的 teaser video
          public var teaserVideo: TeaserVideo? {
            get {
              return (resultMap["teaserVideo"] as? ResultMap).flatMap { TeaserVideo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "teaserVideo")
            }
          }

          /// 直播开播记录
          public var startRecords: [StartRecord?]? {
            get {
              return (resultMap["startRecords"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [StartRecord?] in value.map { (value: ResultMap?) -> StartRecord? in value.flatMap { (value: ResultMap) -> StartRecord in StartRecord(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, forKey: "startRecords")
            }
          }

          /// 直播开始日期
          public var startAt: Double? {
            get {
              return resultMap["startAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "startAt")
            }
          }

          /// 直播结束日期
          public var endAt: Double? {
            get {
              return resultMap["endAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "endAt")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("uid", type: .scalar(String.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }

          public struct Coupon: GraphQLSelectionSet {
            public static let possibleTypes = ["Coupon"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("discountType", type: .scalar(enum__discountType.self)),
              GraphQLField("value", type: .scalar(Int.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
              GraphQLField("receiveCount", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var discountType: enum__discountType? {
              get {
                return resultMap["discountType"] as? enum__discountType
              }
              set {
                resultMap.updateValue(newValue, forKey: "discountType")
              }
            }

            public var value: Int? {
              get {
                return resultMap["value"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }

            public var receiveCount: Int? {
              get {
                return resultMap["receiveCount"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "receiveCount")
              }
            }
          }

          public struct Product: GraphQLSelectionSet {
            public static let possibleTypes = ["Product"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("images", type: .list(.object(Image.selections))),
              GraphQLField("stock", type: .scalar(Int.self)),
              GraphQLField("regularPrice", type: .scalar(Int.self)),
              GraphQLField("livePrice", type: .scalar(Int.self)),
              GraphQLField("variants", type: .list(.object(Variant.selections))),
              GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
              GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
              GraphQLField("productType", type: .scalar(enum__productType.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, productType: enum__productType? = nil) {
              self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "productType": productType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// ID
            public var _id: String? {
              get {
                return resultMap["_id"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 名称
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 描述
            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            /// 图片
            public var images: [Image?]? {
              get {
                return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
              }
            }

            /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
            public var stock: Int? {
              get {
                return resultMap["stock"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "stock")
              }
            }

            /// 常规价格
            public var regularPrice: Int? {
              get {
                return resultMap["regularPrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "regularPrice")
              }
            }

            /// 直播价格
            public var livePrice: Int? {
              get {
                return resultMap["livePrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "livePrice")
              }
            }

            /// 商品属性
            public var variants: [Variant?]? {
              get {
                return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
              }
            }

            /// 是否包邮
            public var isFreeShipping: Bool? {
              get {
                return resultMap["isFreeShipping"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "isFreeShipping")
              }
            }

            /// 运输/快递
            public var shippingInfo: ShippingInfo? {
              get {
                return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
              }
            }

            /// 商品类型
            public var productType: enum__productType? {
              get {
                return resultMap["productType"] as? enum__productType
              }
              set {
                resultMap.updateValue(newValue, forKey: "productType")
              }
            }

            public struct Image: GraphQLSelectionSet {
              public static let possibleTypes = ["ImageWithKey"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("image", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(image: String? = nil, key: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var image: String? {
                get {
                  return resultMap["image"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "image")
                }
              }

              public var key: String? {
                get {
                  return resultMap["key"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "key")
                }
              }
            }

            public struct Variant: GraphQLSelectionSet {
              public static let possibleTypes = ["Variant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("sku", type: .scalar(String.self)),
                GraphQLField("quantity", type: .scalar(Int.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// variant id
              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 属性名
              public var name: String? {
                get {
                  return resultMap["name"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              /// sku number
              public var sku: String? {
                get {
                  return resultMap["sku"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sku")
                }
              }

              /// 库存
              public var quantity: Int? {
                get {
                  return resultMap["quantity"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "quantity")
                }
              }
            }

            public struct ShippingInfo: GraphQLSelectionSet {
              public static let possibleTypes = ["ShippingInfo"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("companyName", type: .scalar(String.self)),
                GraphQLField("price", type: .scalar(Int.self)),
                GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(companyName: String? = nil, price: Int? = nil, method: enum__shippingMethod? = nil) {
                self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "price": price, "method": method])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 运输公司名称
              public var companyName: String? {
                get {
                  return resultMap["companyName"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "companyName")
                }
              }

              /// 价格
              public var price: Int? {
                get {
                  return resultMap["price"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "price")
                }
              }

              /// 运输方式
              public var method: enum__shippingMethod? {
                get {
                  return resultMap["method"] as? enum__shippingMethod
                }
                set {
                  resultMap.updateValue(newValue, forKey: "method")
                }
              }
            }
          }

          public struct Moment: GraphQLSelectionSet {
            public static let possibleTypes = ["moment"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("video", type: .scalar(String.self)),
              GraphQLField("coverImage", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(video: String? = nil, coverImage: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 视频
            public var video: String? {
              get {
                return resultMap["video"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "video")
              }
            }

            /// 封面
            public var coverImage: String? {
              get {
                return resultMap["coverImage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "coverImage")
              }
            }
          }

          public struct TeaserVideo: GraphQLSelectionSet {
            public static let possibleTypes = ["video"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("videoType", type: .scalar(VideoType.self)),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("coverImage", type: .scalar(String.self)),
              GraphQLField("video", type: .scalar(String.self)),
              GraphQLField("duration", type: .scalar(Double.self)),
              GraphQLField("describe", type: .scalar(String.self)),
              GraphQLField("describeMapping", type: .object(DescribeMapping.selections)),
              GraphQLField("viewCount", type: .scalar(Int.self)),
              GraphQLField("likeCount", type: .scalar(Int.self)),
              GraphQLField("commentCount", type: .scalar(Int.self)),
              GraphQLField("shareCount", type: .scalar(Int.self)),
              GraphQLField("watch", type: .scalar(enumWatch.self)),
              GraphQLField("allowComment", type: .scalar(Bool.self)),
              GraphQLField("location", type: .list(.scalar(Double.self))),
              GraphQLField("placeName", type: .scalar(String.self)),
              GraphQLField("shareLink", type: .scalar(String.self)),
              GraphQLField("interests", type: .list(.object(Interest.selections))),
              GraphQLField("music", type: .object(Music.selections)),
              GraphQLField("deleted", type: .scalar(Bool.self)),
              GraphQLField("teaserTitle", type: .scalar(String.self)),
              GraphQLField("liveStartAt", type: .scalar(Double.self)),
              GraphQLField("liked", type: .scalar(Bool.self)),
              GraphQLField("products", type: .list(.object(Product.selections))),
              GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
              GraphQLField("live", type: .object(Live.selections)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, user: User? = nil, coverImage: String? = nil, video: String? = nil, duration: Double? = nil, describe: String? = nil, describeMapping: DescribeMapping? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, shareCount: Int? = nil, watch: enumWatch? = nil, allowComment: Bool? = nil, location: [Double?]? = nil, placeName: String? = nil, shareLink: String? = nil, interests: [Interest?]? = nil, music: Music? = nil, deleted: Bool? = nil, teaserTitle: String? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, products: [Product?]? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
              self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "coverImage": coverImage, "video": video, "duration": duration, "describe": describe, "describeMapping": describeMapping.flatMap { (value: DescribeMapping) -> ResultMap in value.resultMap }, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "shareCount": shareCount, "watch": watch, "allowComment": allowComment, "location": location, "placeName": placeName, "shareLink": shareLink, "interests": interests.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "deleted": deleted, "teaserTitle": teaserTitle, "liveStartAt": liveStartAt, "liked": liked, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
            public var videoType: VideoType? {
              get {
                return resultMap["videoType"] as? VideoType
              }
              set {
                resultMap.updateValue(newValue, forKey: "videoType")
              }
            }

            /// 作者
            public var user: User? {
              get {
                return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "user")
              }
            }

            /// 封面图
            public var coverImage: String? {
              get {
                return resultMap["coverImage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "coverImage")
              }
            }

            /// 视频播放地址
            public var video: String? {
              get {
                return resultMap["video"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "video")
              }
            }

            /// 视频时长
            public var duration: Double? {
              get {
                return resultMap["duration"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "duration")
              }
            }

            /// 描述
            public var describe: String? {
              get {
                return resultMap["describe"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "describe")
              }
            }

            /// 描述中 #hashtags 和 @users 的映射关系
            public var describeMapping: DescribeMapping? {
              get {
                return (resultMap["describeMapping"] as? ResultMap).flatMap { DescribeMapping(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "describeMapping")
              }
            }

            /// 浏览次数
            public var viewCount: Int? {
              get {
                return resultMap["viewCount"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "viewCount")
              }
            }

            /// 点赞次数
            public var likeCount: Int? {
              get {
                return resultMap["likeCount"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "likeCount")
              }
            }

            /// 评论次数
            public var commentCount: Int? {
              get {
                return resultMap["commentCount"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "commentCount")
              }
            }

            /// 分享次数
            public var shareCount: Int? {
              get {
                return resultMap["shareCount"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "shareCount")
              }
            }

            /// 允许观看范围
            public var watch: enumWatch? {
              get {
                return resultMap["watch"] as? enumWatch
              }
              set {
                resultMap.updateValue(newValue, forKey: "watch")
              }
            }

            /// 是否允许评论
            public var allowComment: Bool? {
              get {
                return resultMap["allowComment"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "allowComment")
              }
            }

            /// 经纬度位置 type:[lng,lat] 经度，纬度
            public var location: [Double?]? {
              get {
                return resultMap["location"] as? [Double?]
              }
              set {
                resultMap.updateValue(newValue, forKey: "location")
              }
            }

            /// 地名
            public var placeName: String? {
              get {
                return resultMap["placeName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "placeName")
              }
            }

            /// video 分享链接
            public var shareLink: String? {
              get {
                return resultMap["shareLink"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "shareLink")
              }
            }

            /// 兴趣
            public var interests: [Interest?]? {
              get {
                return (resultMap["interests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Interest?] in value.map { (value: ResultMap?) -> Interest? in value.flatMap { (value: ResultMap) -> Interest in Interest(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, forKey: "interests")
              }
            }

            /// 视频中搭配的音乐
            public var music: Music? {
              get {
                return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "music")
              }
            }

            /// ***【接口权限: 普通登录用户】***
            /// 删除
            public var deleted: Bool? {
              get {
                return resultMap["deleted"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "deleted")
              }
            }

            /// 【teaser 短视频】预告直播标题
            public var teaserTitle: String? {
              get {
                return resultMap["teaserTitle"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "teaserTitle")
              }
            }

            /// 【teaser / past show 短视频】直播开始日期
            public var liveStartAt: Double? {
              get {
                return resultMap["liveStartAt"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "liveStartAt")
              }
            }

            /// 是否点赞
            public var liked: Bool? {
              get {
                return resultMap["liked"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "liked")
              }
            }

            /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
            public var products: [Product?]? {
              get {
                return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
              }
            }

            /// 【teaser 短视频】是否已订阅对应的 live
            public var hasSubscribedLive: Bool? {
              get {
                return resultMap["hasSubscribedLive"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
              }
            }

            /// 【teaser / past show 短视频】直播预告关联的直播
            public var live: Live? {
              get {
                return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "live")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["type__user"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("username", type: .scalar(String.self)),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("avatar", type: .scalar(String.self)),
                GraphQLField("role", type: .scalar(enum__userRole.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(username: String? = nil, _id: GraphQLID? = nil, avatar: String? = nil, role: enum__userRole? = nil) {
                self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "avatar": avatar, "role": role])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 用户名
              public var username: String? {
                get {
                  return resultMap["username"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "username")
                }
              }

              /// id
              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 头像
              public var avatar: String? {
                get {
                  return resultMap["avatar"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "avatar")
                }
              }

              /// 用户角色
              public var role: enum__userRole? {
                get {
                  return resultMap["role"] as? enum__userRole
                }
                set {
                  resultMap.updateValue(newValue, forKey: "role")
                }
              }
            }

            public struct DescribeMapping: GraphQLSelectionSet {
              public static let possibleTypes = ["describeMapping"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("users", type: .list(.object(User.selections))),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(users: [User?]? = nil) {
                self.init(unsafeResultMap: ["__typename": "describeMapping", "users": users.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var users: [User?]? {
                get {
                  return (resultMap["users"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [User?] in value.map { (value: ResultMap?) -> User? in value.flatMap { (value: ResultMap) -> User in User(unsafeResultMap: value) } } }
                }
                set {
                  resultMap.updateValue(newValue.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }, forKey: "users")
                }
              }

              public struct User: GraphQLSelectionSet {
                public static let possibleTypes = ["mappingUser"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("text", type: .scalar(String.self)),
                  GraphQLField("id", type: .object(Id.selections)),
                ]

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(text: String? = nil, id: Id? = nil) {
                  self.init(unsafeResultMap: ["__typename": "mappingUser", "text": text, "id": id.flatMap { (value: Id) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var text: String? {
                  get {
                    return resultMap["text"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "text")
                  }
                }

                public var id: Id? {
                  get {
                    return (resultMap["id"] as? ResultMap).flatMap { Id(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "id")
                  }
                }

                public struct Id: GraphQLSelectionSet {
                  public static let possibleTypes = ["mappingUserDetail"]

                  public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("_id", type: .scalar(GraphQLID.self)),
                  ]

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(_id: GraphQLID? = nil) {
                    self.init(unsafeResultMap: ["__typename": "mappingUserDetail", "_id": _id])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  public var _id: GraphQLID? {
                    get {
                      return resultMap["_id"] as? GraphQLID
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "_id")
                    }
                  }
                }
              }
            }

            public struct Interest: GraphQLSelectionSet {
              public static let possibleTypes = ["Interest"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("priority", type: .scalar(Int.self)),
                GraphQLField("videoCount", type: .nonNull(.scalar(Int.self))),
                GraphQLField("userCount", type: .nonNull(.scalar(Int.self))),
                GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("isSuspended", type: .scalar(Bool.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID, name: String, priority: Int? = nil, videoCount: Int, userCount: Int, followed: Bool, isSuspended: Bool? = nil) {
                self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "priority": priority, "videoCount": videoCount, "userCount": userCount, "followed": followed, "isSuspended": isSuspended])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// id
              public var _id: GraphQLID {
                get {
                  return resultMap["_id"]! as! GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// interest 名称
              public var name: String {
                get {
                  return resultMap["name"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              /// 优先级
              public var priority: Int? {
                get {
                  return resultMap["priority"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "priority")
                }
              }

              /// 携带该 interest 的视频数量
              public var videoCount: Int {
                get {
                  return resultMap["videoCount"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "videoCount")
                }
              }

              /// 对该 Interest 感兴趣的用户数量
              public var userCount: Int {
                get {
                  return resultMap["userCount"]! as! Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "userCount")
                }
              }

              /// 用户是否关注该 interest
              public var followed: Bool {
                get {
                  return resultMap["followed"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "followed")
                }
              }

              /// 是否被封禁
              public var isSuspended: Bool? {
                get {
                  return resultMap["isSuspended"] as? Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "isSuspended")
                }
              }
            }

            public struct Music: GraphQLSelectionSet {
              public static let possibleTypes = ["music"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("title", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, title: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 音乐标题
              public var title: String? {
                get {
                  return resultMap["title"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "title")
                }
              }
            }

            public struct Product: GraphQLSelectionSet {
              public static let possibleTypes = ["PastShowProduct"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("product", type: .scalar(String.self)),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("images", type: .list(.object(Image.selections))),
                GraphQLField("regularPrice", type: .scalar(Int.self)),
                GraphQLField("livePrice", type: .scalar(Int.self)),
                GraphQLField("productType", type: .scalar(enum__productType.self)),
                GraphQLField("variants", type: .list(.object(Variant.selections))),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
                self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 商品 ID
              public var product: String? {
                get {
                  return resultMap["product"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "product")
                }
              }

              /// 商品名称
              public var name: String? {
                get {
                  return resultMap["name"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              /// 商品描述
              public var description: String? {
                get {
                  return resultMap["description"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "description")
                }
              }

              /// 商品图片
              public var images: [Image?]? {
                get {
                  return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
                }
                set {
                  resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
                }
              }

              /// 商品常规价格
              public var regularPrice: Int? {
                get {
                  return resultMap["regularPrice"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "regularPrice")
                }
              }

              /// 商品直播价格
              public var livePrice: Int? {
                get {
                  return resultMap["livePrice"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "livePrice")
                }
              }

              /// 商品类型
              public var productType: enum__productType? {
                get {
                  return resultMap["productType"] as? enum__productType
                }
                set {
                  resultMap.updateValue(newValue, forKey: "productType")
                }
              }

              /// 商品属性
              public var variants: [Variant?]? {
                get {
                  return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
                }
                set {
                  resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
                }
              }

              public struct Image: GraphQLSelectionSet {
                public static let possibleTypes = ["ImageWithKey"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("image", type: .scalar(String.self)),
                  GraphQLField("key", type: .scalar(String.self)),
                ]

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(image: String? = nil, key: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var image: String? {
                  get {
                    return resultMap["image"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "image")
                  }
                }

                public var key: String? {
                  get {
                    return resultMap["key"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "key")
                  }
                }
              }

              public struct Variant: GraphQLSelectionSet {
                public static let possibleTypes = ["Variant"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("_id", type: .scalar(GraphQLID.self)),
                  GraphQLField("name", type: .scalar(String.self)),
                  GraphQLField("sku", type: .scalar(String.self)),
                  GraphQLField("quantity", type: .scalar(Int.self)),
                ]

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
                  self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// variant id
                public var _id: GraphQLID? {
                  get {
                    return resultMap["_id"] as? GraphQLID
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "_id")
                  }
                }

                /// 属性名
                public var name: String? {
                  get {
                    return resultMap["name"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "name")
                  }
                }

                /// sku number
                public var sku: String? {
                  get {
                    return resultMap["sku"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "sku")
                  }
                }

                /// 库存
                public var quantity: Int? {
                  get {
                    return resultMap["quantity"] as? Int
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "quantity")
                  }
                }
              }
            }

            public struct Live: GraphQLSelectionSet {
              public static let possibleTypes = ["live"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("coverImage", type: .scalar(String.self)),
                GraphQLField("title", type: .scalar(String.self)),
                GraphQLField("status", type: .scalar(Bool.self)),
                GraphQLField("scheduleStartAt", type: .scalar(String.self)),
                GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
                self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 封面图
              public var coverImage: String? {
                get {
                  return resultMap["coverImage"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "coverImage")
                }
              }

              /// 标题
              public var title: String? {
                get {
                  return resultMap["title"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "title")
                }
              }

              /// 是否正在直播
              public var status: Bool? {
                get {
                  return resultMap["status"] as? Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "status")
                }
              }

              /// live schedule 开始时间
              public var scheduleStartAt: String? {
                get {
                  return resultMap["scheduleStartAt"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "scheduleStartAt")
                }
              }

              /// 直播状态，可替代早期的 status
              public var streamingStatus: LiveStreamingStatus? {
                get {
                  return resultMap["streamingStatus"] as? LiveStreamingStatus
                }
                set {
                  resultMap.updateValue(newValue, forKey: "streamingStatus")
                }
              }
            }
          }

          public struct StartRecord: GraphQLSelectionSet {
            public static let possibleTypes = ["LiveStartRecord"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("endAt", type: .scalar(String.self)),
              GraphQLField("startAt", type: .nonNull(.scalar(String.self))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(endAt: String? = nil, startAt: String) {
              self.init(unsafeResultMap: ["__typename": "LiveStartRecord", "endAt": endAt, "startAt": startAt])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 本次结束 live 的时间
            public var endAt: String? {
              get {
                return resultMap["endAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "endAt")
              }
            }

            /// 本次开始 live 的时间
            public var startAt: String {
              get {
                return resultMap["startAt"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "startAt")
              }
            }
          }
        }
      }
    }
  }
}

public final class AppListScheduleLivesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListScheduleLives($page: Int, $pageSize: Int) {
      appListScheduleLives(page: $page, pageSize: $pageSize) {
        __typename
        edges {
          __typename
          status
          _id
          chatroomId
          ivsLiveAddress
          startAt
          endAt
          viewCount
          newFansCount
          user {
            __typename
            username
            _id
            uid
            avatar
            followed
          }
          likeCount
          orderCount
          coverImage
          title
          hasShownCoupon
          collaboratingUser
          explainProduct
          coupons {
            __typename
            _id
            discountType
            value
            quantity
            receiveCount
          }
          products {
            __typename
            _id
            name
            description
            images {
              __typename
              image
              key
            }
            stock
            regularPrice
            livePrice
            variants {
              __typename
              _id
              name
              sku
              quantity
            }
            isFreeShipping
            shippingInfo {
              __typename
              companyName
              price
              method
            }
            productType
          }
          moments {
            __typename
            video
            coverImage
          }
          shareLink
          scheduleStartAt
        }
      }
    }
    """

  public let operationName = "AppListScheduleLives"

  public var page: Int?
  public var pageSize: Int?

  public init(page: Int? = nil, pageSize: Int? = nil) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListScheduleLives", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(AppListScheduleLife.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListScheduleLives: AppListScheduleLife? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListScheduleLives": appListScheduleLives.flatMap { (value: AppListScheduleLife) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询用户自己创建的 live schedule 列表
    public var appListScheduleLives: AppListScheduleLife? {
      get {
        return (resultMap["appListScheduleLives"] as? ResultMap).flatMap { AppListScheduleLife(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListScheduleLives")
      }
    }

    public struct AppListScheduleLife: GraphQLSelectionSet {
      public static let possibleTypes = ["listLiveResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge]) {
        self.init(unsafeResultMap: ["__typename": "listLiveResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomId", type: .scalar(String.self)),
          GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
          GraphQLField("startAt", type: .scalar(Double.self)),
          GraphQLField("endAt", type: .scalar(Double.self)),
          GraphQLField("viewCount", type: .scalar(Int.self)),
          GraphQLField("newFansCount", type: .scalar(Int.self)),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("likeCount", type: .scalar(Int.self)),
          GraphQLField("orderCount", type: .scalar(Int.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
          GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
          GraphQLField("explainProduct", type: .scalar(GraphQLID.self)),
          GraphQLField("coupons", type: .list(.object(Coupon.selections))),
          GraphQLField("products", type: .list(.object(Product.selections))),
          GraphQLField("moments", type: .list(.object(Moment.selections))),
          GraphQLField("shareLink", type: .scalar(String.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(status: Bool? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, ivsLiveAddress: String? = nil, startAt: Double? = nil, endAt: Double? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, collaboratingUser: GraphQLID? = nil, explainProduct: GraphQLID? = nil, coupons: [Coupon?]? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil, shareLink: String? = nil, scheduleStartAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "status": status, "_id": _id, "chatroomId": chatroomId, "ivsLiveAddress": ivsLiveAddress, "startAt": startAt, "endAt": endAt, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "collaboratingUser": collaboratingUser, "explainProduct": explainProduct, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "scheduleStartAt": scheduleStartAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 环信聊天室的id
        public var chatroomId: String? {
          get {
            return resultMap["chatroomId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "chatroomId")
          }
        }

        /// 直播推流播放地址
        public var ivsLiveAddress: String? {
          get {
            return resultMap["ivsLiveAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
          }
        }

        /// 直播开始日期
        public var startAt: Double? {
          get {
            return resultMap["startAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "startAt")
          }
        }

        /// 直播结束日期
        public var endAt: Double? {
          get {
            return resultMap["endAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "endAt")
          }
        }

        /// 流量数
        public var viewCount: Int? {
          get {
            return resultMap["viewCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "viewCount")
          }
        }

        /// 新增粉丝数
        public var newFansCount: Int? {
          get {
            return resultMap["newFansCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "newFansCount")
          }
        }

        /// 用户
        public var user: User? {
          get {
            return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "user")
          }
        }

        /// 点赞数
        public var likeCount: Int? {
          get {
            return resultMap["likeCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "likeCount")
          }
        }

        /// 本场直播订单数量
        public var orderCount: Int? {
          get {
            return resultMap["orderCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderCount")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
        public var hasShownCoupon: Bool? {
          get {
            return resultMap["hasShownCoupon"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasShownCoupon")
          }
        }

        /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
        public var collaboratingUser: GraphQLID? {
          get {
            return resultMap["collaboratingUser"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "collaboratingUser")
          }
        }

        /// 主播正在讲解的商品
        public var explainProduct: GraphQLID? {
          get {
            return resultMap["explainProduct"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "explainProduct")
          }
        }

        /// 直播间正在派发的优惠劵
        public var coupons: [Coupon?]? {
          get {
            return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
          }
        }

        /// 直播间正在出售的商品
        public var products: [Product?]? {
          get {
            return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
          }
        }

        /// 直播片段
        public var moments: [Moment?]? {
          get {
            return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
          }
        }

        /// live 分享链接
        public var shareLink: String? {
          get {
            return resultMap["shareLink"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shareLink")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("uid", type: .scalar(String.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("followed", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
          public var uid: String? {
            get {
              return resultMap["uid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "uid")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 是否关注
          public var followed: Bool? {
            get {
              return resultMap["followed"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }
        }

        public struct Coupon: GraphQLSelectionSet {
          public static let possibleTypes = ["Coupon"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("discountType", type: .scalar(enum__discountType.self)),
            GraphQLField("value", type: .scalar(Int.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
            GraphQLField("receiveCount", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var discountType: enum__discountType? {
            get {
              return resultMap["discountType"] as? enum__discountType
            }
            set {
              resultMap.updateValue(newValue, forKey: "discountType")
            }
          }

          public var value: Int? {
            get {
              return resultMap["value"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          public var receiveCount: Int? {
            get {
              return resultMap["receiveCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "receiveCount")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["Product"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("images", type: .list(.object(Image.selections))),
            GraphQLField("stock", type: .scalar(Int.self)),
            GraphQLField("regularPrice", type: .scalar(Int.self)),
            GraphQLField("livePrice", type: .scalar(Int.self)),
            GraphQLField("variants", type: .list(.object(Variant.selections))),
            GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
            GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
            GraphQLField("productType", type: .scalar(enum__productType.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, productType: enum__productType? = nil) {
            self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "productType": productType])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// ID
          public var _id: String? {
            get {
              return resultMap["_id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 名称
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 图片
          public var images: [Image?]? {
            get {
              return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
            }
          }

          /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
          public var stock: Int? {
            get {
              return resultMap["stock"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "stock")
            }
          }

          /// 常规价格
          public var regularPrice: Int? {
            get {
              return resultMap["regularPrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 直播价格
          public var livePrice: Int? {
            get {
              return resultMap["livePrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 商品属性
          public var variants: [Variant?]? {
            get {
              return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
            }
          }

          /// 是否包邮
          public var isFreeShipping: Bool? {
            get {
              return resultMap["isFreeShipping"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isFreeShipping")
            }
          }

          /// 运输/快递
          public var shippingInfo: ShippingInfo? {
            get {
              return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
            }
          }

          /// 商品类型
          public var productType: enum__productType? {
            get {
              return resultMap["productType"] as? enum__productType
            }
            set {
              resultMap.updateValue(newValue, forKey: "productType")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }

          public struct Variant: GraphQLSelectionSet {
            public static let possibleTypes = ["Variant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("sku", type: .scalar(String.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// variant id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 属性名
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// sku number
            public var sku: String? {
              get {
                return resultMap["sku"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sku")
              }
            }

            /// 库存
            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }

          public struct ShippingInfo: GraphQLSelectionSet {
            public static let possibleTypes = ["ShippingInfo"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("companyName", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
              GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(companyName: String? = nil, price: Int? = nil, method: enum__shippingMethod? = nil) {
              self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "price": price, "method": method])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 运输公司名称
            public var companyName: String? {
              get {
                return resultMap["companyName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "companyName")
              }
            }

            /// 价格
            public var price: Int? {
              get {
                return resultMap["price"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "price")
              }
            }

            /// 运输方式
            public var method: enum__shippingMethod? {
              get {
                return resultMap["method"] as? enum__shippingMethod
              }
              set {
                resultMap.updateValue(newValue, forKey: "method")
              }
            }
          }
        }

        public struct Moment: GraphQLSelectionSet {
          public static let possibleTypes = ["moment"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("video", type: .scalar(String.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(video: String? = nil, coverImage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 视频
          public var video: String? {
            get {
              return resultMap["video"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// 封面
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }
        }
      }
    }
  }
}

public final class AppListSelectedLiveProductsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListSelectedLiveProducts($live: ID) {
      appListSelectedLiveProducts(live: $live) {
        __typename
        totalCount
        edges {
          __typename
          _id
          name
          description
          images {
            __typename
            image
            key
          }
          stock
          regularPrice
          livePrice
          status
          isFreeShipping
          productType
          shippingInfo {
            __typename
            companyName
            method
            price
          }
          variants {
            __typename
            _id
            name
            shopifyProductVariantId
            quantity
          }
          liveHost {
            __typename
            _id
            avatar
            deviceType
          }
          createdAt
          updatedAt
          edited
          product {
            __typename
            _id
            variants {
              __typename
              _id
              quantity
            }
          }
          auctionPrice
          auctionSetting {
            __typename
            duration
            extendTime
            auctionStartedAt
          }
          auctionStatus
        }
        pageInfo {
          __typename
          hashNextPage
        }
      }
    }
    """

  public let operationName = "AppListSelectedLiveProducts"

  public var live: GraphQLID?

  public init(live: GraphQLID? = nil) {
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListSelectedLiveProducts", arguments: ["live": GraphQLVariable("live")], type: .object(AppListSelectedLiveProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListSelectedLiveProducts: AppListSelectedLiveProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListSelectedLiveProducts": appListSelectedLiveProducts.flatMap { (value: AppListSelectedLiveProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端查询备选直播商品列表。
    /// 
    /// 主播端开播前，从 store 商品列表中选择商品，调用 `appBatchCreateLiveProducts` 接口创建直播商品，之后可调用此接口来获取直播商品。
    /// 
    /// 每次重新调用 `appBatchCreateLiveProducts` 后，此接口数据会被替换。
    /// 
    /// 此接口不分页。
    public var appListSelectedLiveProducts: AppListSelectedLiveProduct? {
      get {
        return (resultMap["appListSelectedLiveProducts"] as? ResultMap).flatMap { AppListSelectedLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListSelectedLiveProducts")
      }
    }

    public struct AppListSelectedLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["listLiveProductsResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("totalCount", type: .scalar(Int.self)),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int? = nil, edges: [Edge?]? = nil, pageInfo: PageInfo? = nil) {
        self.init(unsafeResultMap: ["__typename": "listLiveProductsResponse", "totalCount": totalCount, "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("stock", type: .scalar(Int.self)),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("status", type: .scalar(enum__productStatus.self)),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("liveHost", type: .object(LiveHost.selections)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("edited", type: .scalar(Bool.self)),
          GraphQLField("product", type: .object(Product.selections)),
          GraphQLField("auctionPrice", type: .scalar(Int.self)),
          GraphQLField("auctionSetting", type: .object(AuctionSetting.selections)),
          GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, status: enum__productStatus? = nil, isFreeShipping: Bool? = nil, productType: enum__productType? = nil, shippingInfo: ShippingInfo? = nil, variants: [Variant?]? = nil, liveHost: LiveHost? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, edited: Bool? = nil, product: Product? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSetting? = nil, auctionStatus: AuctionStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "status": status, "isFreeShipping": isFreeShipping, "productType": productType, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "liveHost": liveHost.flatMap { (value: LiveHost) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt, "edited": edited, "product": product.flatMap { (value: Product) -> ResultMap in value.resultMap }, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting.flatMap { (value: AuctionSetting) -> ResultMap in value.resultMap }, "auctionStatus": auctionStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品总数量。是 variants 中各种款式商品数量总和
        public var stock: Int? {
          get {
            return resultMap["stock"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
        public var status: enum__productStatus? {
          get {
            return resultMap["status"] as? enum__productStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 运输/快递
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 带货主播
        public var liveHost: LiveHost? {
          get {
            return (resultMap["liveHost"] as? ResultMap).flatMap { LiveHost(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "liveHost")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 从小店商品 Product 同步过来时，是否已编辑过。
        /// 
        /// 调用 appCreateLiveProduct 创建的商品和调用过 appUpdateLiveProduct 修改的商品，都会被标记为已编辑过。
        /// 
        /// appBatchCreateLiveProducts 接口每次都会清空原直播商品编辑临时数据，重新创建直播商品。但标记已编辑过的商品，如果在调用
        /// appBatchCreateLiveProducts 时在参数里将 id 传过来了，则不会重新创建，会保留原编辑的信息。
        public var edited: Bool? {
          get {
            return resultMap["edited"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "edited")
          }
        }

        /// 关联的小店商品
        public var product: Product? {
          get {
            return (resultMap["product"] as? ResultMap).flatMap { Product(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "product")
          }
        }

        /// 拍卖价格, productType == AUCTION 时有
        public var auctionPrice: Int? {
          get {
            return resultMap["auctionPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionPrice")
          }
        }

        /// 拍卖配置信息, productType == AUCTION 时有
        public var auctionSetting: AuctionSetting? {
          get {
            return (resultMap["auctionSetting"] as? ResultMap).flatMap { AuctionSetting(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionSetting")
          }
        }

        /// 拍卖状态, productType == AUCTION 时有
        public var auctionStatus: AuctionStatus? {
          get {
            return resultMap["auctionStatus"] as? AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStatus")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["ShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
            GraphQLField("price", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 运输公司名称
          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          /// 运输方式
          public var method: enum__shippingMethod? {
            get {
              return resultMap["method"] as? enum__shippingMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }

          /// 价格
          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("shopifyProductVariantId", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, shopifyProductVariantId: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "shopifyProductVariantId": shopifyProductVariantId, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 关联的 shopify product.variants.id
          public var shopifyProductVariantId: String? {
            get {
              return resultMap["shopifyProductVariantId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shopifyProductVariantId")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }

        public struct LiveHost: GraphQLSelectionSet {
          public static let possibleTypes = ["user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, deviceType: enum__deviceType? = nil) {
            self.init(unsafeResultMap: ["__typename": "user", "_id": _id, "avatar": avatar, "deviceType": deviceType])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 设备类型
          public var deviceType: enum__deviceType? {
            get {
              return resultMap["deviceType"] as? enum__deviceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "deviceType")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["Product"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(String.self)),
            GraphQLField("variants", type: .list(.object(Variant.selections))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: String? = nil, variants: [Variant?]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// ID
          public var _id: String? {
            get {
              return resultMap["_id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 商品属性
          public var variants: [Variant?]? {
            get {
              return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
            }
          }

          public struct Variant: GraphQLSelectionSet {
            public static let possibleTypes = ["Variant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// variant id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 库存
            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }
        }

        public struct AuctionSetting: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionSetting"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("duration", type: .scalar(Int.self)),
            GraphQLField("extendTime", type: .scalar(Int.self)),
            GraphQLField("auctionStartedAt", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(duration: Int? = nil, extendTime: Int? = nil, auctionStartedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionSetting", "duration": duration, "extendTime": extendTime, "auctionStartedAt": auctionStartedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 初始拍卖时长，单位：秒
          public var duration: Int? {
            get {
              return resultMap["duration"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 每次延长拍卖时，延长的时间，单位：秒
          public var extendTime: Int? {
            get {
              return resultMap["extendTime"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "extendTime")
            }
          }

          /// 开始拍卖时间, productType == AUCTION 时且已经开始拍卖时有
          public var auctionStartedAt: String? {
            get {
              return resultMap["auctionStartedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStartedAt")
            }
          }
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }
    }
  }
}

public final class AppPlaceBidMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation appPlaceBid($productId: ID!, $bidPrice: Int!) {
      appPlaceBid(productId: $productId, bidPrice: $bidPrice) {
        __typename
        success
      }
    }
    """

  public let operationName = "appPlaceBid"

  public var productId: GraphQLID
  public var bidPrice: Int

  public init(productId: GraphQLID, bidPrice: Int) {
    self.productId = productId
    self.bidPrice = bidPrice
  }

  public var variables: GraphQLMap? {
    return ["productId": productId, "bidPrice": bidPrice]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appPlaceBid", arguments: ["productId": GraphQLVariable("productId"), "bidPrice": GraphQLVariable("bidPrice")], type: .object(AppPlaceBid.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appPlaceBid: AppPlaceBid? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appPlaceBid": appPlaceBid.flatMap { (value: AppPlaceBid) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 对 auction product出价
    public var appPlaceBid: AppPlaceBid? {
      get {
        return (resultMap["appPlaceBid"] as? ResultMap).flatMap { AppPlaceBid(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appPlaceBid")
      }
    }

    public struct AppPlaceBid: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppReadAllInboxNotificationsMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppReadAllInboxNotifications {
      appReadAllInboxNotifications {
        __typename
        success
      }
    }
    """

  public let operationName = "AppReadAllInboxNotifications"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appReadAllInboxNotifications", type: .object(AppReadAllInboxNotification.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appReadAllInboxNotifications: AppReadAllInboxNotification? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appReadAllInboxNotifications": appReadAllInboxNotifications.flatMap { (value: AppReadAllInboxNotification) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 设置所有已读
    public var appReadAllInboxNotifications: AppReadAllInboxNotification? {
      get {
        return (resultMap["appReadAllInboxNotifications"] as? ResultMap).flatMap { AppReadAllInboxNotification(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appReadAllInboxNotifications")
      }
    }

    public struct AppReadAllInboxNotification: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppReportCollaborationEventMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation appReportCollaborationEvent($event: CollaborationEvent!, $live: ID!, $user: ID, $reportTime: Float!) {
      appReportCollaborationEvent(event: $event, live: $live, user: $user, reportTime: $reportTime) {
        __typename
        success
      }
    }
    """

  public let operationName = "appReportCollaborationEvent"

  public var event: CollaborationEvent
  public var live: GraphQLID
  public var user: GraphQLID?
  public var reportTime: Double

  public init(event: CollaborationEvent, live: GraphQLID, user: GraphQLID? = nil, reportTime: Double) {
    self.event = event
    self.live = live
    self.user = user
    self.reportTime = reportTime
  }

  public var variables: GraphQLMap? {
    return ["event": event, "live": live, "user": user, "reportTime": reportTime]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appReportCollaborationEvent", arguments: ["event": GraphQLVariable("event"), "live": GraphQLVariable("live"), "user": GraphQLVariable("user"), "reportTime": GraphQLVariable("reportTime")], type: .object(AppReportCollaborationEvent.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appReportCollaborationEvent: AppReportCollaborationEvent? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appReportCollaborationEvent": appReportCollaborationEvent.flatMap { (value: AppReportCollaborationEvent) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    public var appReportCollaborationEvent: AppReportCollaborationEvent? {
      get {
        return (resultMap["appReportCollaborationEvent"] as? ResultMap).flatMap { AppReportCollaborationEvent(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appReportCollaborationEvent")
      }
    }

    public struct AppReportCollaborationEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppSearchMediaResourceQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appSearchMediaResource($page: Int!, $pageSize: Int!, $query: String, $type: MediaResourceSearchType!) {
      appSearchMediaResource(page: $page, pageSize: $pageSize, query: $query, type: $type) {
        __typename
        edges {
          __typename
          _id
          createdAt
          live {
            __typename
            title
            _id
            status
            coverImage
            ivsLiveAddress
            viewCount
            likeCount
            chatroomId
            newFansCount
            startAt
            endAt
            shareLink
            collaboratingUser
            user {
              __typename
              username
              _id
              uid
              avatar
              followed
              role
            }
          }
          updatedAt
          video {
            __typename
            _id
            videoType
            coverImage
            teaserTitle
            video
            viewCount
            likeCount
            commentCount
            duration
            shareCount
            allowComment
            liveStartAt
            liked
            updatedAt
            describe
            liveStartAt
            createdAt
            updatedAt
            deleted
            hasSubscribedLive
            live {
              __typename
              _id
              status
              title
              scheduleStartAt
              streamingStatus
            }
            products {
              __typename
              product
              name
              description
              images {
                __typename
                image
                key
              }
              regularPrice
              livePrice
              productType
              variants {
                __typename
                _id
                name
                sku
                quantity
              }
            }
            music {
              __typename
              _id
              title
            }
            user {
              __typename
              _id
              avatar
              username
              followed
              role
            }
            shareLink
            hasSubscribedLive
            liveTitle
          }
          user {
            __typename
            _id
            hasBlocked
            avatar
            name
            username
            followCount
            fansCount
            likeCount
            liveStatus
            liveId
            bio
            website
            role
            facebook {
              __typename
              id
              username
              homePage
            }
            instagram {
              __typename
              id
              username
              homePage
            }
            followed
            newOrdersCount {
              __typename
              selling
              buying
              ticket
            }
            store {
              __typename
              _id
              storeName
              storePicture {
                __typename
                image
                key
              }
              deleted
            }
            userSetting {
              __typename
              acceptAgreement {
                __typename
                auction
              }
              auctionPaymentInfo {
                __typename
                appPaymentMethod: paymentMethod {
                  __typename
                  _id
                  paymentMethod
                  stripePaymentMethodId
                  card {
                    __typename
                    _id
                    firstName
                    lastName
                    expiryDate
                    cvvCode
                    stripePaymentMethodId
                    last4
                    isDefaultCard
                    brand
                    brandIcon
                    invalidCard
                    invalidFields
                  }
                }
                shippingAddress {
                  __typename
                  _id
                  user {
                    __typename
                    _id
                    avatar
                    username
                  }
                  firstName
                  lastName
                  phoneNumber
                  addressLine1
                  addressLine2
                  city
                  state
                  country
                  zipCode
                  addressType
                  isDefaultAddress
                  card
                }
              }
            }
          }
          hashtag {
            __typename
            _id
            name
            userCount
            viewCount
          }
        }
        pageInfo {
          __typename
          hashNextPage
        }
        totalCount
      }
    }
    """

  public let operationName = "appSearchMediaResource"

  public var page: Int
  public var pageSize: Int
  public var query: String?
  public var type: MediaResourceSearchType

  public init(page: Int, pageSize: Int, query: String? = nil, type: MediaResourceSearchType) {
    self.page = page
    self.pageSize = pageSize
    self.query = query
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "query": query, "type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appSearchMediaResource", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "query": GraphQLVariable("query"), "type": GraphQLVariable("type")], type: .object(AppSearchMediaResource.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appSearchMediaResource: AppSearchMediaResource? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appSearchMediaResource": appSearchMediaResource.flatMap { (value: AppSearchMediaResource) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 混合搜索 Live、Videos 资源
    public var appSearchMediaResource: AppSearchMediaResource? {
      get {
        return (resultMap["appSearchMediaResource"] as? ResultMap).flatMap { AppSearchMediaResource(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appSearchMediaResource")
      }
    }

    public struct AppSearchMediaResource: GraphQLSelectionSet {
      public static let possibleTypes = ["listMediaResourceResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        GraphQLField("totalCount", type: .scalar(Int.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil, totalCount: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "listMediaResourceResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }, "totalCount": totalCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["MediaResource"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("live", type: .object(Live.selections)),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("video", type: .object(Video.selections)),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("hashtag", type: .object(Hashtag.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, createdAt: String, live: Live? = nil, updatedAt: String, video: Video? = nil, user: User? = nil, hashtag: Hashtag? = nil) {
          self.init(unsafeResultMap: ["__typename": "MediaResource", "_id": _id, "createdAt": createdAt, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "updatedAt": updatedAt, "video": video.flatMap { (value: Video) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "hashtag": hashtag.flatMap { (value: Hashtag) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var createdAt: String {
          get {
            return resultMap["createdAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 当 MediaResourceSearchType 为 Live，且搜索结果项为 live 时有此字段，否则为 null
        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        public var updatedAt: String {
          get {
            return resultMap["updatedAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 当 MediaResourceSearchType 为 Live 或 Videos，且搜索结果项为 video 时有此字段，否则为 null
        public var video: Video? {
          get {
            return (resultMap["video"] as? ResultMap).flatMap { Video(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "video")
          }
        }

        /// 当 MediaResourceSearchType 为 Creators，且搜索结果项为 user 时有此字段，否则为 null
        public var user: User? {
          get {
            return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "user")
          }
        }

        /// 当 MediaResourceSearchType 为 Hashtags, 且搜索结果项为 hashtag 时有此字段，否则为 null
        public var hashtag: Hashtag? {
          get {
            return (resultMap["hashtag"] as? ResultMap).flatMap { Hashtag(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "hashtag")
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("status", type: .scalar(Bool.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("chatroomId", type: .scalar(String.self)),
            GraphQLField("newFansCount", type: .scalar(Int.self)),
            GraphQLField("startAt", type: .scalar(Double.self)),
            GraphQLField("endAt", type: .scalar(Double.self)),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
            GraphQLField("user", type: .object(User.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(title: String? = nil, _id: GraphQLID? = nil, status: Bool? = nil, coverImage: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, chatroomId: String? = nil, newFansCount: Int? = nil, startAt: Double? = nil, endAt: Double? = nil, shareLink: String? = nil, collaboratingUser: GraphQLID? = nil, user: User? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "title": title, "_id": _id, "status": status, "coverImage": coverImage, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "likeCount": likeCount, "chatroomId": chatroomId, "newFansCount": newFansCount, "startAt": startAt, "endAt": endAt, "shareLink": shareLink, "collaboratingUser": collaboratingUser, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 是否正在直播
          public var status: Bool? {
            get {
              return resultMap["status"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 直播推流播放地址
          public var ivsLiveAddress: String? {
            get {
              return resultMap["ivsLiveAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
            }
          }

          /// 流量数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 点赞数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 环信聊天室的id
          public var chatroomId: String? {
            get {
              return resultMap["chatroomId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "chatroomId")
            }
          }

          /// 新增粉丝数
          public var newFansCount: Int? {
            get {
              return resultMap["newFansCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "newFansCount")
            }
          }

          /// 直播开始日期
          public var startAt: Double? {
            get {
              return resultMap["startAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "startAt")
            }
          }

          /// 直播结束日期
          public var endAt: Double? {
            get {
              return resultMap["endAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "endAt")
            }
          }

          /// live 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
          public var collaboratingUser: GraphQLID? {
            get {
              return resultMap["collaboratingUser"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "collaboratingUser")
            }
          }

          /// 用户
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("uid", type: .scalar(String.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }
        }

        public struct Video: GraphQLSelectionSet {
          public static let possibleTypes = ["video"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("videoType", type: .scalar(VideoType.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("teaserTitle", type: .scalar(String.self)),
            GraphQLField("video", type: .scalar(String.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("commentCount", type: .scalar(Int.self)),
            GraphQLField("duration", type: .scalar(Double.self)),
            GraphQLField("shareCount", type: .scalar(Int.self)),
            GraphQLField("allowComment", type: .scalar(Bool.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("liked", type: .scalar(Bool.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("describe", type: .scalar(String.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("deleted", type: .scalar(Bool.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
            GraphQLField("live", type: .object(Live.selections)),
            GraphQLField("products", type: .list(.object(Product.selections))),
            GraphQLField("music", type: .object(Music.selections)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
            GraphQLField("liveTitle", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, describe: String? = nil, createdAt: Double? = nil, deleted: Bool? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil, products: [Product?]? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, liveTitle: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "describe": describe, "createdAt": createdAt, "deleted": deleted, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "liveTitle": liveTitle])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
          public var videoType: VideoType? {
            get {
              return resultMap["videoType"] as? VideoType
            }
            set {
              resultMap.updateValue(newValue, forKey: "videoType")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 【teaser 短视频】预告直播标题
          public var teaserTitle: String? {
            get {
              return resultMap["teaserTitle"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "teaserTitle")
            }
          }

          /// 视频播放地址
          public var video: String? {
            get {
              return resultMap["video"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// 浏览次数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 点赞次数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 评论次数
          public var commentCount: Int? {
            get {
              return resultMap["commentCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "commentCount")
            }
          }

          /// 视频时长
          public var duration: Double? {
            get {
              return resultMap["duration"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 分享次数
          public var shareCount: Int? {
            get {
              return resultMap["shareCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareCount")
            }
          }

          /// 是否允许评论
          public var allowComment: Bool? {
            get {
              return resultMap["allowComment"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "allowComment")
            }
          }

          /// 【teaser / past show 短视频】直播开始日期
          public var liveStartAt: Double? {
            get {
              return resultMap["liveStartAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveStartAt")
            }
          }

          /// 是否点赞
          public var liked: Bool? {
            get {
              return resultMap["liked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "liked")
            }
          }

          /// 更新日期
          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 描述
          public var describe: String? {
            get {
              return resultMap["describe"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "describe")
            }
          }

          /// 创建日期
          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// ***【接口权限: 普通登录用户】***
          /// 删除
          public var deleted: Bool? {
            get {
              return resultMap["deleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "deleted")
            }
          }

          /// 【teaser 短视频】是否已订阅对应的 live
          public var hasSubscribedLive: Bool? {
            get {
              return resultMap["hasSubscribedLive"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
            }
          }

          /// 【teaser / past show 短视频】直播预告关联的直播
          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
          public var products: [Product?]? {
            get {
              return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
            }
          }

          /// 视频中搭配的音乐
          public var music: Music? {
            get {
              return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "music")
            }
          }

          /// 作者
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          /// video 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 【past show 短视频】past show 关联的 live 的标题
          public var liveTitle: String? {
            get {
              return resultMap["liveTitle"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveTitle")
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("status", type: .scalar(Bool.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("scheduleStartAt", type: .scalar(String.self)),
              GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, status: Bool? = nil, title: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
              self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "status": status, "title": title, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 是否正在直播
            public var status: Bool? {
              get {
                return resultMap["status"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "status")
              }
            }

            /// 标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }

            /// live schedule 开始时间
            public var scheduleStartAt: String? {
              get {
                return resultMap["scheduleStartAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "scheduleStartAt")
              }
            }

            /// 直播状态，可替代早期的 status
            public var streamingStatus: LiveStreamingStatus? {
              get {
                return resultMap["streamingStatus"] as? LiveStreamingStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "streamingStatus")
              }
            }
          }

          public struct Product: GraphQLSelectionSet {
            public static let possibleTypes = ["PastShowProduct"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("product", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("images", type: .list(.object(Image.selections))),
              GraphQLField("regularPrice", type: .scalar(Int.self)),
              GraphQLField("livePrice", type: .scalar(Int.self)),
              GraphQLField("productType", type: .scalar(enum__productType.self)),
              GraphQLField("variants", type: .list(.object(Variant.selections))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
              self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 商品 ID
            public var product: String? {
              get {
                return resultMap["product"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "product")
              }
            }

            /// 商品名称
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 商品描述
            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            /// 商品图片
            public var images: [Image?]? {
              get {
                return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
              }
            }

            /// 商品常规价格
            public var regularPrice: Int? {
              get {
                return resultMap["regularPrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "regularPrice")
              }
            }

            /// 商品直播价格
            public var livePrice: Int? {
              get {
                return resultMap["livePrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "livePrice")
              }
            }

            /// 商品类型
            public var productType: enum__productType? {
              get {
                return resultMap["productType"] as? enum__productType
              }
              set {
                resultMap.updateValue(newValue, forKey: "productType")
              }
            }

            /// 商品属性
            public var variants: [Variant?]? {
              get {
                return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
              }
            }

            public struct Image: GraphQLSelectionSet {
              public static let possibleTypes = ["ImageWithKey"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("image", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(image: String? = nil, key: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var image: String? {
                get {
                  return resultMap["image"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "image")
                }
              }

              public var key: String? {
                get {
                  return resultMap["key"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "key")
                }
              }
            }

            public struct Variant: GraphQLSelectionSet {
              public static let possibleTypes = ["Variant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("sku", type: .scalar(String.self)),
                GraphQLField("quantity", type: .scalar(Int.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// variant id
              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 属性名
              public var name: String? {
                get {
                  return resultMap["name"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              /// sku number
              public var sku: String? {
                get {
                  return resultMap["sku"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sku")
                }
              }

              /// 库存
              public var quantity: Int? {
                get {
                  return resultMap["quantity"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "quantity")
                }
              }
            }
          }

          public struct Music: GraphQLSelectionSet {
            public static let possibleTypes = ["music"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 音乐标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("hasBlocked", type: .scalar(Bool.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("followCount", type: .scalar(Int.self)),
            GraphQLField("fansCount", type: .scalar(Int.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("liveStatus", type: .scalar(Bool.self)),
            GraphQLField("liveId", type: .scalar(GraphQLID.self)),
            GraphQLField("bio", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("role", type: .scalar(enum__userRole.self)),
            GraphQLField("facebook", type: .object(Facebook.selections)),
            GraphQLField("instagram", type: .object(Instagram.selections)),
            GraphQLField("followed", type: .scalar(Bool.self)),
            GraphQLField("newOrdersCount", type: .object(NewOrdersCount.selections)),
            GraphQLField("store", type: .object(Store.selections)),
            GraphQLField("userSetting", type: .object(UserSetting.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, hasBlocked: Bool? = nil, avatar: String? = nil, name: String? = nil, username: String? = nil, followCount: Int? = nil, fansCount: Int? = nil, likeCount: Int? = nil, liveStatus: Bool? = nil, liveId: GraphQLID? = nil, bio: String? = nil, website: String? = nil, role: enum__userRole? = nil, facebook: Facebook? = nil, instagram: Instagram? = nil, followed: Bool? = nil, newOrdersCount: NewOrdersCount? = nil, store: Store? = nil, userSetting: UserSetting? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "hasBlocked": hasBlocked, "avatar": avatar, "name": name, "username": username, "followCount": followCount, "fansCount": fansCount, "likeCount": likeCount, "liveStatus": liveStatus, "liveId": liveId, "bio": bio, "website": website, "role": role, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "followed": followed, "newOrdersCount": newOrdersCount.flatMap { (value: NewOrdersCount) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: Store) -> ResultMap in value.resultMap }, "userSetting": userSetting.flatMap { (value: UserSetting) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 请求用户信息时，指示是否已经把此用户屏蔽
          public var hasBlocked: Bool? {
            get {
              return resultMap["hasBlocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasBlocked")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 关注人数
          public var followCount: Int? {
            get {
              return resultMap["followCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "followCount")
            }
          }

          /// 粉丝数
          public var fansCount: Int? {
            get {
              return resultMap["fansCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "fansCount")
            }
          }

          /// 获取的点赞数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 此用户是否在直播中，true 直播中，false 未直播
          public var liveStatus: Bool? {
            get {
              return resultMap["liveStatus"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveStatus")
            }
          }

          /// 此用户直播间 ID，未直播时返回 null
          public var liveId: GraphQLID? {
            get {
              return resultMap["liveId"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveId")
            }
          }

          /// 个人简历
          public var bio: String? {
            get {
              return resultMap["bio"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "bio")
            }
          }

          /// 个人网站
          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          /// 用户角色
          public var role: enum__userRole? {
            get {
              return resultMap["role"] as? enum__userRole
            }
            set {
              resultMap.updateValue(newValue, forKey: "role")
            }
          }

          /// facebook
          public var facebook: Facebook? {
            get {
              return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
            }
          }

          /// instagram
          public var instagram: Instagram? {
            get {
              return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
            }
          }

          /// 是否关注
          public var followed: Bool? {
            get {
              return resultMap["followed"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }

          /// 新订单提醒数量
          public var newOrdersCount: NewOrdersCount? {
            get {
              return (resultMap["newOrdersCount"] as? ResultMap).flatMap { NewOrdersCount(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "newOrdersCount")
            }
          }

          /// 商店
          public var store: Store? {
            get {
              return (resultMap["store"] as? ResultMap).flatMap { Store(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "store")
            }
          }

          /// 用户关联的一些扩展信息
          public var userSetting: UserSetting? {
            get {
              return (resultMap["userSetting"] as? ResultMap).flatMap { UserSetting(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "userSetting")
            }
          }

          public struct Facebook: GraphQLSelectionSet {
            public static let possibleTypes = ["user_facebook"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("homePage", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: String? {
              get {
                return resultMap["id"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            public var homePage: String? {
              get {
                return resultMap["homePage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "homePage")
              }
            }
          }

          public struct Instagram: GraphQLSelectionSet {
            public static let possibleTypes = ["user_instagram"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("homePage", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: String? {
              get {
                return resultMap["id"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            public var homePage: String? {
              get {
                return resultMap["homePage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "homePage")
              }
            }
          }

          public struct NewOrdersCount: GraphQLSelectionSet {
            public static let possibleTypes = ["UserNewOrdersCount"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("selling", type: .scalar(Int.self)),
              GraphQLField("buying", type: .scalar(Int.self)),
              GraphQLField("ticket", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(selling: Int? = nil, buying: Int? = nil, ticket: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "UserNewOrdersCount", "selling": selling, "buying": buying, "ticket": ticket])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 未查看的新 selling 订单数
            public var selling: Int? {
              get {
                return resultMap["selling"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "selling")
              }
            }

            /// 未查看的新 buying 订单数
            public var buying: Int? {
              get {
                return resultMap["buying"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "buying")
              }
            }

            /// 未查看的新 ticket 订单数
            public var ticket: Int? {
              get {
                return resultMap["ticket"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "ticket")
              }
            }
          }

          public struct Store: GraphQLSelectionSet {
            public static let possibleTypes = ["type__userStore"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("storeName", type: .scalar(String.self)),
              GraphQLField("storePicture", type: .object(StorePicture.selections)),
              GraphQLField("deleted", type: .scalar(Bool.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, storeName: String? = nil, storePicture: StorePicture? = nil, deleted: Bool? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__userStore", "_id": _id, "storeName": storeName, "storePicture": storePicture.flatMap { (value: StorePicture) -> ResultMap in value.resultMap }, "deleted": deleted])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var storeName: String? {
              get {
                return resultMap["storeName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "storeName")
              }
            }

            public var storePicture: StorePicture? {
              get {
                return (resultMap["storePicture"] as? ResultMap).flatMap { StorePicture(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "storePicture")
              }
            }

            public var deleted: Bool? {
              get {
                return resultMap["deleted"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "deleted")
              }
            }

            public struct StorePicture: GraphQLSelectionSet {
              public static let possibleTypes = ["ImageWithKey"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("image", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(image: String? = nil, key: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var image: String? {
                get {
                  return resultMap["image"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "image")
                }
              }

              public var key: String? {
                get {
                  return resultMap["key"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "key")
                }
              }
            }
          }

          public struct UserSetting: GraphQLSelectionSet {
            public static let possibleTypes = ["UserSetting"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("acceptAgreement", type: .nonNull(.object(AcceptAgreement.selections))),
              GraphQLField("auctionPaymentInfo", type: .object(AuctionPaymentInfo.selections)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(acceptAgreement: AcceptAgreement, auctionPaymentInfo: AuctionPaymentInfo? = nil) {
              self.init(unsafeResultMap: ["__typename": "UserSetting", "acceptAgreement": acceptAgreement.resultMap, "auctionPaymentInfo": auctionPaymentInfo.flatMap { (value: AuctionPaymentInfo) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 是否同意 user agreement
            public var acceptAgreement: AcceptAgreement {
              get {
                return AcceptAgreement(unsafeResultMap: resultMap["acceptAgreement"]! as! ResultMap)
              }
              set {
                resultMap.updateValue(newValue.resultMap, forKey: "acceptAgreement")
              }
            }

            /// 用户为 auction 设置的 payment info，包含地址和信用卡
            public var auctionPaymentInfo: AuctionPaymentInfo? {
              get {
                return (resultMap["auctionPaymentInfo"] as? ResultMap).flatMap { AuctionPaymentInfo(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "auctionPaymentInfo")
              }
            }

            public struct AcceptAgreement: GraphQLSelectionSet {
              public static let possibleTypes = ["UserAgreement"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("auction", type: .nonNull(.scalar(Bool.self))),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(auction: Bool) {
                self.init(unsafeResultMap: ["__typename": "UserAgreement", "auction": auction])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 拍卖的用户协议
              public var auction: Bool {
                get {
                  return resultMap["auction"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "auction")
                }
              }
            }

            public struct AuctionPaymentInfo: GraphQLSelectionSet {
              public static let possibleTypes = ["AuctionPaymentInfo"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("paymentMethod", alias: "appPaymentMethod", type: .object(AppPaymentMethod.selections)),
                GraphQLField("shippingAddress", type: .object(ShippingAddress.selections)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(appPaymentMethod: AppPaymentMethod? = nil, shippingAddress: ShippingAddress? = nil) {
                self.init(unsafeResultMap: ["__typename": "AuctionPaymentInfo", "appPaymentMethod": appPaymentMethod.flatMap { (value: AppPaymentMethod) -> ResultMap in value.resultMap }, "shippingAddress": shippingAddress.flatMap { (value: ShippingAddress) -> ResultMap in value.resultMap }])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 拍卖使用的支付方式
              public var appPaymentMethod: AppPaymentMethod? {
                get {
                  return (resultMap["appPaymentMethod"] as? ResultMap).flatMap { AppPaymentMethod(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "appPaymentMethod")
                }
              }

              /// 拍卖使用的地址
              public var shippingAddress: ShippingAddress? {
                get {
                  return (resultMap["shippingAddress"] as? ResultMap).flatMap { ShippingAddress(unsafeResultMap: $0) }
                }
                set {
                  resultMap.updateValue(newValue?.resultMap, forKey: "shippingAddress")
                }
              }

              public struct AppPaymentMethod: GraphQLSelectionSet {
                public static let possibleTypes = ["LastPaymentMethodModel"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("_id", type: .scalar(GraphQLID.self)),
                  GraphQLField("paymentMethod", type: .scalar(PaymentMethod.self)),
                  GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
                  GraphQLField("card", type: .object(Card.selections)),
                ]

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(_id: GraphQLID? = nil, paymentMethod: PaymentMethod? = nil, stripePaymentMethodId: String? = nil, card: Card? = nil) {
                  self.init(unsafeResultMap: ["__typename": "LastPaymentMethodModel", "_id": _id, "paymentMethod": paymentMethod, "stripePaymentMethodId": stripePaymentMethodId, "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                public var _id: GraphQLID? {
                  get {
                    return resultMap["_id"] as? GraphQLID
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "_id")
                  }
                }

                /// 支付方式名称
                public var paymentMethod: PaymentMethod? {
                  get {
                    return resultMap["paymentMethod"] as? PaymentMethod
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "paymentMethod")
                  }
                }

                /// stripe 的 paymentMethodId，用于 createPayment 接口传入的 paymentMethodId
                public var stripePaymentMethodId: String? {
                  get {
                    return resultMap["stripePaymentMethodId"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
                  }
                }

                /// 如果 paymentMethod 字段是 CARD，这里是关联的卡片信息
                public var card: Card? {
                  get {
                    return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "card")
                  }
                }

                public struct Card: GraphQLSelectionSet {
                  public static let possibleTypes = ["Card"]

                  public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
                    GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
                    GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
                    GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
                    GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
                    GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
                    GraphQLField("last4", type: .nonNull(.scalar(String.self))),
                    GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("brand", type: .nonNull(.scalar(String.self))),
                    GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
                    GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
                    GraphQLField("invalidFields", type: .nonNull(.list(.scalar(enum__cardInvalidField.self)))),
                  ]

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(_id: GraphQLID, firstName: String, lastName: String, expiryDate: String, cvvCode: String, stripePaymentMethodId: String, last4: String, isDefaultCard: Bool, brand: String, brandIcon: String, invalidCard: Bool, invalidFields: [enum__cardInvalidField?]) {
                    self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "firstName": firstName, "lastName": lastName, "expiryDate": expiryDate, "cvvCode": cvvCode, "stripePaymentMethodId": stripePaymentMethodId, "last4": last4, "isDefaultCard": isDefaultCard, "brand": brand, "brandIcon": brandIcon, "invalidCard": invalidCard, "invalidFields": invalidFields])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  /// id
                  public var _id: GraphQLID {
                    get {
                      return resultMap["_id"]! as! GraphQLID
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "_id")
                    }
                  }

                  /// firstName
                  public var firstName: String {
                    get {
                      return resultMap["firstName"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "firstName")
                    }
                  }

                  /// lastName
                  public var lastName: String {
                    get {
                      return resultMap["lastName"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "lastName")
                    }
                  }

                  /// expiryDate
                  public var expiryDate: String {
                    get {
                      return resultMap["expiryDate"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "expiryDate")
                    }
                  }

                  /// cvvCode
                  public var cvvCode: String {
                    get {
                      return resultMap["cvvCode"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "cvvCode")
                    }
                  }

                  /// stripe payment method id
                  public var stripePaymentMethodId: String {
                    get {
                      return resultMap["stripePaymentMethodId"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
                    }
                  }

                  /// last4
                  public var last4: String {
                    get {
                      return resultMap["last4"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "last4")
                    }
                  }

                  /// 是否是默认信用卡
                  public var isDefaultCard: Bool {
                    get {
                      return resultMap["isDefaultCard"]! as! Bool
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "isDefaultCard")
                    }
                  }

                  /// 发卡机构, 对应 UI 上的`Bank Name`
                  public var brand: String {
                    get {
                      return resultMap["brand"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "brand")
                    }
                  }

                  /// 发卡机构图片
                  public var brandIcon: String {
                    get {
                      return resultMap["brandIcon"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "brandIcon")
                    }
                  }

                  /// 卡片是否无效，true 表示无效，false 表示有效
                  public var invalidCard: Bool {
                    get {
                      return resultMap["invalidCard"]! as! Bool
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "invalidCard")
                    }
                  }

                  /// 卡片校验无效时，具体无效的字段. 有效时为空数组
                  public var invalidFields: [enum__cardInvalidField?] {
                    get {
                      return resultMap["invalidFields"]! as! [enum__cardInvalidField?]
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "invalidFields")
                    }
                  }
                }
              }

              public struct ShippingAddress: GraphQLSelectionSet {
                public static let possibleTypes = ["Address"]

                public static let selections: [GraphQLSelection] = [
                  GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                  GraphQLField("_id", type: .scalar(GraphQLID.self)),
                  GraphQLField("user", type: .object(User.selections)),
                  GraphQLField("firstName", type: .scalar(String.self)),
                  GraphQLField("lastName", type: .scalar(String.self)),
                  GraphQLField("phoneNumber", type: .scalar(String.self)),
                  GraphQLField("addressLine1", type: .scalar(String.self)),
                  GraphQLField("addressLine2", type: .scalar(String.self)),
                  GraphQLField("city", type: .scalar(String.self)),
                  GraphQLField("state", type: .scalar(String.self)),
                  GraphQLField("country", type: .scalar(String.self)),
                  GraphQLField("zipCode", type: .scalar(String.self)),
                  GraphQLField("addressType", type: .scalar(enum__addressType.self)),
                  GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
                  GraphQLField("card", type: .scalar(String.self)),
                ]

                public private(set) var resultMap: ResultMap

                public init(unsafeResultMap: ResultMap) {
                  self.resultMap = unsafeResultMap
                }

                public init(_id: GraphQLID? = nil, user: User? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil, card: String? = nil) {
                  self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress, "card": card])
                }

                public var __typename: String {
                  get {
                    return resultMap["__typename"]! as! String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "__typename")
                  }
                }

                /// id
                public var _id: GraphQLID? {
                  get {
                    return resultMap["_id"] as? GraphQLID
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "_id")
                  }
                }

                /// 用户名
                public var user: User? {
                  get {
                    return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
                  }
                  set {
                    resultMap.updateValue(newValue?.resultMap, forKey: "user")
                  }
                }

                /// firstName
                public var firstName: String? {
                  get {
                    return resultMap["firstName"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "firstName")
                  }
                }

                /// lastName
                public var lastName: String? {
                  get {
                    return resultMap["lastName"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "lastName")
                  }
                }

                /// phoneNumber
                public var phoneNumber: String? {
                  get {
                    return resultMap["phoneNumber"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "phoneNumber")
                  }
                }

                /// addressLine1
                public var addressLine1: String? {
                  get {
                    return resultMap["addressLine1"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "addressLine1")
                  }
                }

                /// addressLine2
                public var addressLine2: String? {
                  get {
                    return resultMap["addressLine2"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "addressLine2")
                  }
                }

                /// city
                public var city: String? {
                  get {
                    return resultMap["city"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "city")
                  }
                }

                /// state
                public var state: String? {
                  get {
                    return resultMap["state"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "state")
                  }
                }

                /// country
                public var country: String? {
                  get {
                    return resultMap["country"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "country")
                  }
                }

                /// zipCode
                public var zipCode: String? {
                  get {
                    return resultMap["zipCode"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "zipCode")
                  }
                }

                /// ShippingAddress or BillingAddress
                public var addressType: enum__addressType? {
                  get {
                    return resultMap["addressType"] as? enum__addressType
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "addressType")
                  }
                }

                /// 是否为默认
                public var isDefaultAddress: Bool? {
                  get {
                    return resultMap["isDefaultAddress"] as? Bool
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "isDefaultAddress")
                  }
                }

                /// 当 addressType 为 BILLING 时, 有此字段，表示该账单地址和此 card 关联
                public var card: String? {
                  get {
                    return resultMap["card"] as? String
                  }
                  set {
                    resultMap.updateValue(newValue, forKey: "card")
                  }
                }

                public struct User: GraphQLSelectionSet {
                  public static let possibleTypes = ["type__user"]

                  public static let selections: [GraphQLSelection] = [
                    GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                    GraphQLField("_id", type: .scalar(GraphQLID.self)),
                    GraphQLField("avatar", type: .scalar(String.self)),
                    GraphQLField("username", type: .scalar(String.self)),
                  ]

                  public private(set) var resultMap: ResultMap

                  public init(unsafeResultMap: ResultMap) {
                    self.resultMap = unsafeResultMap
                  }

                  public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil) {
                    self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username])
                  }

                  public var __typename: String {
                    get {
                      return resultMap["__typename"]! as! String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "__typename")
                    }
                  }

                  /// id
                  public var _id: GraphQLID? {
                    get {
                      return resultMap["_id"] as? GraphQLID
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "_id")
                    }
                  }

                  /// 头像
                  public var avatar: String? {
                    get {
                      return resultMap["avatar"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "avatar")
                    }
                  }

                  /// 用户名
                  public var username: String? {
                    get {
                      return resultMap["username"] as? String
                    }
                    set {
                      resultMap.updateValue(newValue, forKey: "username")
                    }
                  }
                }
              }
            }
          }
        }

        public struct Hashtag: GraphQLSelectionSet {
          public static let possibleTypes = ["Hashtag"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("userCount", type: .scalar(Int.self)),
            GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String, userCount: Int? = nil, viewCount: Int) {
            self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "viewCount": viewCount])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// name
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 关注该话题的用户数
          public var userCount: Int? {
            get {
              return resultMap["userCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "userCount")
            }
          }

          /// 带此 hashtag 的 video 浏览次数总和
          public var viewCount: Int {
            get {
              return resultMap["viewCount"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }
    }
  }
}

public final class AppSetAuctionPaymentInfoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppSetAuctionPaymentInfo($shippingAddress: ID!, $paymentMethod: ID!) {
      appSetAuctionPaymentInfo(shippingAddress: $shippingAddress, paymentMethod: $paymentMethod) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppSetAuctionPaymentInfo"

  public var shippingAddress: GraphQLID
  public var paymentMethod: GraphQLID

  public init(shippingAddress: GraphQLID, paymentMethod: GraphQLID) {
    self.shippingAddress = shippingAddress
    self.paymentMethod = paymentMethod
  }

  public var variables: GraphQLMap? {
    return ["shippingAddress": shippingAddress, "paymentMethod": paymentMethod]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appSetAuctionPaymentInfo", arguments: ["shippingAddress": GraphQLVariable("shippingAddress"), "paymentMethod": GraphQLVariable("paymentMethod")], type: .object(AppSetAuctionPaymentInfo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appSetAuctionPaymentInfo: AppSetAuctionPaymentInfo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appSetAuctionPaymentInfo": appSetAuctionPaymentInfo.flatMap { (value: AppSetAuctionPaymentInfo) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 设置 auction 专用 payment info，包括 credit card 和地址
    public var appSetAuctionPaymentInfo: AppSetAuctionPaymentInfo? {
      get {
        return (resultMap["appSetAuctionPaymentInfo"] as? ResultMap).flatMap { AppSetAuctionPaymentInfo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appSetAuctionPaymentInfo")
      }
    }

    public struct AppSetAuctionPaymentInfo: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppSetupLiveResourcesMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppSetupLiveResources($id: ID!) {
      appSetupLiveResources(_id: $id) {
        __typename
        agoraLiveToken {
          __typename
          expireAt
          token
        }
        _id
        chatroomId
        collaboratingUser
        ivsLiveAddress
        ivsStreamingAddress
        scheduleStartAt
        streamingStatus
        status
        _id
        chatroomId
        ivsLiveAddress
        viewCount
        newFansCount
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
        likeCount
        orderCount
        coverImage
        title
        hasShownCoupon
        collaboratingUser
        coupons {
          __typename
          _id
          discountType
          value
          quantity
          receiveCount
        }
        products {
          __typename
          _id
          name
          productType
        }
        moments {
          __typename
          video
          coverImage
        }
        shareLink
        teaserVideo {
          __typename
          _id
        }
        startRecords {
          __typename
          endAt
          startAt
        }
        startAt
        endAt
      }
    }
    """

  public let operationName = "AppSetupLiveResources"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appSetupLiveResources", arguments: ["_id": GraphQLVariable("id")], type: .object(AppSetupLiveResource.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appSetupLiveResources: AppSetupLiveResource? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appSetupLiveResources": appSetupLiveResources.flatMap { (value: AppSetupLiveResource) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端创建直播所需资源
    public var appSetupLiveResources: AppSetupLiveResource? {
      get {
        return (resultMap["appSetupLiveResources"] as? ResultMap).flatMap { AppSetupLiveResource(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appSetupLiveResources")
      }
    }

    public struct AppSetupLiveResource: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("agoraLiveToken", type: .object(AgoraLiveToken.selections)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("ivsStreamingAddress", type: .scalar(String.self)),
        GraphQLField("scheduleStartAt", type: .scalar(String.self)),
        GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("orderCount", type: .scalar(Int.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("coupons", type: .list(.object(Coupon.selections))),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("moments", type: .list(.object(Moment.selections))),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("teaserVideo", type: .object(TeaserVideo.selections)),
        GraphQLField("startRecords", type: .list(.object(StartRecord.selections))),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(agoraLiveToken: AgoraLiveToken? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, collaboratingUser: GraphQLID? = nil, ivsLiveAddress: String? = nil, ivsStreamingAddress: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil, status: Bool? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, coupons: [Coupon?]? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil, shareLink: String? = nil, teaserVideo: TeaserVideo? = nil, startRecords: [StartRecord?]? = nil, startAt: Double? = nil, endAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "agoraLiveToken": agoraLiveToken.flatMap { (value: AgoraLiveToken) -> ResultMap in value.resultMap }, "_id": _id, "chatroomId": chatroomId, "collaboratingUser": collaboratingUser, "ivsLiveAddress": ivsLiveAddress, "ivsStreamingAddress": ivsStreamingAddress, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus, "status": status, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "teaserVideo": teaserVideo.flatMap { (value: TeaserVideo) -> ResultMap in value.resultMap }, "startRecords": startRecords.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, "startAt": startAt, "endAt": endAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 声网发流使用的 token。
      /// 
      /// 请求 getLiveToken 接口后，此处的 token 会更新。请求 createLive 后，此处的 token 会自动更新。
      /// 
      /// 不同人请求拿到的 token 不一样，主播请求显示的是主播使用的 token，连麦者请求后显示的是连麦者使用的 token。如果结果为 null，需要请求 getLiveToken 获取新的 token
      public var agoraLiveToken: AgoraLiveToken? {
        get {
          return (resultMap["agoraLiveToken"] as? ResultMap).flatMap { AgoraLiveToken(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "agoraLiveToken")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 同 rtmpsUrl. aws ivs CDN的推流地址
      public var ivsStreamingAddress: String? {
        get {
          return resultMap["ivsStreamingAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsStreamingAddress")
        }
      }

      /// live schedule 开始时间
      public var scheduleStartAt: String? {
        get {
          return resultMap["scheduleStartAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "scheduleStartAt")
        }
      }

      /// 直播状态，可替代早期的 status
      public var streamingStatus: LiveStreamingStatus? {
        get {
          return resultMap["streamingStatus"] as? LiveStreamingStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "streamingStatus")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 本场直播订单数量
      public var orderCount: Int? {
        get {
          return resultMap["orderCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCount")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
      public var hasShownCoupon: Bool? {
        get {
          return resultMap["hasShownCoupon"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasShownCoupon")
        }
      }

      /// 直播间正在派发的优惠劵
      public var coupons: [Coupon?]? {
        get {
          return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
        }
      }

      /// 直播间正在出售的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 直播片段
      public var moments: [Moment?]? {
        get {
          return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// live 关联的 teaser video
      public var teaserVideo: TeaserVideo? {
        get {
          return (resultMap["teaserVideo"] as? ResultMap).flatMap { TeaserVideo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "teaserVideo")
        }
      }

      /// 直播开播记录
      public var startRecords: [StartRecord?]? {
        get {
          return (resultMap["startRecords"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [StartRecord?] in value.map { (value: ResultMap?) -> StartRecord? in value.flatMap { (value: ResultMap) -> StartRecord in StartRecord(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, forKey: "startRecords")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      public struct AgoraLiveToken: GraphQLSelectionSet {
        public static let possibleTypes = ["AgoraLiveToken"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("expireAt", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(expireAt: String? = nil, token: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AgoraLiveToken", "expireAt": expireAt, "token": token])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var expireAt: String? {
          get {
            return resultMap["expireAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "expireAt")
          }
        }

        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct Coupon: GraphQLSelectionSet {
        public static let possibleTypes = ["Coupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("discountType", type: .scalar(enum__discountType.self)),
          GraphQLField("value", type: .scalar(Int.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("receiveCount", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var discountType: enum__discountType? {
          get {
            return resultMap["discountType"] as? enum__discountType
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountType")
          }
        }

        public var value: Int? {
          get {
            return resultMap["value"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        public var receiveCount: Int? {
          get {
            return resultMap["receiveCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "receiveCount")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["Product"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: String? = nil, name: String? = nil, productType: enum__productType? = nil) {
          self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "productType": productType])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: String? {
          get {
            return resultMap["_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }
      }

      public struct Moment: GraphQLSelectionSet {
        public static let possibleTypes = ["moment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("video", type: .scalar(String.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(video: String? = nil, coverImage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 视频
        public var video: String? {
          get {
            return resultMap["video"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// 封面
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }
      }

      public struct TeaserVideo: GraphQLSelectionSet {
        public static let possibleTypes = ["video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil) {
          self.init(unsafeResultMap: ["__typename": "video", "_id": _id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }
      }

      public struct StartRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveStartRecord"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("endAt", type: .scalar(String.self)),
          GraphQLField("startAt", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endAt: String? = nil, startAt: String) {
          self.init(unsafeResultMap: ["__typename": "LiveStartRecord", "endAt": endAt, "startAt": startAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 本次结束 live 的时间
        public var endAt: String? {
          get {
            return resultMap["endAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endAt")
          }
        }

        /// 本次开始 live 的时间
        public var startAt: String {
          get {
            return resultMap["startAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "startAt")
          }
        }
      }
    }
  }
}

public final class AppStoreQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppStore($page: Int!, $pageSize: Int!) {
      appStore {
        __typename
        _id
        storeName
        storePicture {
          __typename
          image
          key
        }
        storeBackgroundPicture {
          __typename
          image
          key
        }
        storeProducts(page: $page, pageSize: $pageSize, status: [ON_SALE], productType: [NORMAL]) {
          __typename
          edges {
            __typename
            _id
            name
            description
            displayInStore
            images {
              __typename
              image
              key
            }
            stock
            regularPrice
            livePrice
            variants {
              __typename
              _id
              name
              sku
              quantity
            }
            liveHost {
              __typename
              _id
              avatar
              deviceType
            }
            status
            isFreeShipping
            shippingInfo {
              __typename
              companyName
              method
              price
            }
            createdAt
            updatedAt
          }
          totalCount
          pageInfo {
            __typename
            hashNextPage
          }
        }
      }
    }
    """

  public let operationName = "AppStore"

  public var page: Int
  public var pageSize: Int

  public init(page: Int, pageSize: Int) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appStore", type: .object(AppStore.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appStore: AppStore? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appStore": appStore.flatMap { (value: AppStore) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 卖家, 卖家子账号】***
    /// app 端获取自己的店铺信息。此接口限 seller 访问
    public var appStore: AppStore? {
      get {
        return (resultMap["appStore"] as? ResultMap).flatMap { AppStore(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appStore")
      }
    }

    public struct AppStore: GraphQLSelectionSet {
      public static let possibleTypes = ["AppStore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("storeName", type: .nonNull(.scalar(String.self))),
        GraphQLField("storePicture", type: .nonNull(.object(StorePicture.selections))),
        GraphQLField("storeBackgroundPicture", type: .nonNull(.object(StoreBackgroundPicture.selections))),
        GraphQLField("storeProducts", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "status": ["ON_SALE"], "productType": ["NORMAL"]], type: .nonNull(.object(StoreProduct.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, storeName: String, storePicture: StorePicture, storeBackgroundPicture: StoreBackgroundPicture, storeProducts: StoreProduct) {
        self.init(unsafeResultMap: ["__typename": "AppStore", "_id": _id, "storeName": storeName, "storePicture": storePicture.resultMap, "storeBackgroundPicture": storeBackgroundPicture.resultMap, "storeProducts": storeProducts.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 店铺 id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 店名
      public var storeName: String {
        get {
          return resultMap["storeName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "storeName")
        }
      }

      /// 店铺 logo 图片
      public var storePicture: StorePicture {
        get {
          return StorePicture(unsafeResultMap: resultMap["storePicture"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storePicture")
        }
      }

      /// 店铺背景图片
      public var storeBackgroundPicture: StoreBackgroundPicture {
        get {
          return StoreBackgroundPicture(unsafeResultMap: resultMap["storeBackgroundPicture"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storeBackgroundPicture")
        }
      }

      /// 店铺商品. 默认 displayInStore=true 的商品排在前，=false 的商品排在后。排在后面的商品按 seller dashboard 端手动指定的顺序排序
      public var storeProducts: StoreProduct {
        get {
          return StoreProduct(unsafeResultMap: resultMap["storeProducts"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storeProducts")
        }
      }

      public struct StorePicture: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct StoreBackgroundPicture: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct StoreProduct: GraphQLSelectionSet {
        public static let possibleTypes = ["appStoreProductsResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
          GraphQLField("totalCount", type: .scalar(Int.self)),
          GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(edges: [Edge], totalCount: Int? = nil, pageInfo: PageInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "appStoreProductsResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }, "totalCount": totalCount, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var edges: [Edge] {
          get {
            return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
          }
        }

        public var totalCount: Int? {
          get {
            return resultMap["totalCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var pageInfo: PageInfo? {
          get {
            return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
          }
        }

        public struct Edge: GraphQLSelectionSet {
          public static let possibleTypes = ["Product"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("displayInStore", type: .scalar(Bool.self)),
            GraphQLField("images", type: .list(.object(Image.selections))),
            GraphQLField("stock", type: .scalar(Int.self)),
            GraphQLField("regularPrice", type: .scalar(Int.self)),
            GraphQLField("livePrice", type: .scalar(Int.self)),
            GraphQLField("variants", type: .list(.object(Variant.selections))),
            GraphQLField("liveHost", type: .object(LiveHost.selections)),
            GraphQLField("status", type: .scalar(enum__productStatus.self)),
            GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
            GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: String? = nil, name: String? = nil, description: String? = nil, displayInStore: Bool? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, liveHost: LiveHost? = nil, status: enum__productStatus? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, createdAt: Double? = nil, updatedAt: Double? = nil) {
            self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "displayInStore": displayInStore, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "liveHost": liveHost.flatMap { (value: LiveHost) -> ResultMap in value.resultMap }, "status": status, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// ID
          public var _id: String? {
            get {
              return resultMap["_id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 名称
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// ***【接口权限: 卖家, 卖家子账号】***
          /// 是否展示在 store 里，true 表示展示，false 不展示
          public var displayInStore: Bool? {
            get {
              return resultMap["displayInStore"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "displayInStore")
            }
          }

          /// 图片
          public var images: [Image?]? {
            get {
              return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
            }
          }

          /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
          public var stock: Int? {
            get {
              return resultMap["stock"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "stock")
            }
          }

          /// 常规价格
          public var regularPrice: Int? {
            get {
              return resultMap["regularPrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 直播价格
          public var livePrice: Int? {
            get {
              return resultMap["livePrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 商品属性
          public var variants: [Variant?]? {
            get {
              return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
            }
          }

          /// 带货主播
          public var liveHost: LiveHost? {
            get {
              return (resultMap["liveHost"] as? ResultMap).flatMap { LiveHost(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "liveHost")
            }
          }

          /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
          public var status: enum__productStatus? {
            get {
              return resultMap["status"] as? enum__productStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 是否包邮
          public var isFreeShipping: Bool? {
            get {
              return resultMap["isFreeShipping"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isFreeShipping")
            }
          }

          /// 运输/快递
          public var shippingInfo: ShippingInfo? {
            get {
              return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
            }
          }

          /// 创建日期
          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// 更新日期
          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }

          public struct Variant: GraphQLSelectionSet {
            public static let possibleTypes = ["Variant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("sku", type: .scalar(String.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// variant id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 属性名
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// sku number
            public var sku: String? {
              get {
                return resultMap["sku"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sku")
              }
            }

            /// 库存
            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }

          public struct LiveHost: GraphQLSelectionSet {
            public static let possibleTypes = ["user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, deviceType: enum__deviceType? = nil) {
              self.init(unsafeResultMap: ["__typename": "user", "_id": _id, "avatar": avatar, "deviceType": deviceType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 设备类型
            public var deviceType: enum__deviceType? {
              get {
                return resultMap["deviceType"] as? enum__deviceType
              }
              set {
                resultMap.updateValue(newValue, forKey: "deviceType")
              }
            }
          }

          public struct ShippingInfo: GraphQLSelectionSet {
            public static let possibleTypes = ["ShippingInfo"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("companyName", type: .scalar(String.self)),
              GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
              GraphQLField("price", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 运输公司名称
            public var companyName: String? {
              get {
                return resultMap["companyName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "companyName")
              }
            }

            /// 运输方式
            public var method: enum__shippingMethod? {
              get {
                return resultMap["method"] as? enum__shippingMethod
              }
              set {
                resultMap.updateValue(newValue, forKey: "method")
              }
            }

            /// 价格
            public var price: Int? {
              get {
                return resultMap["price"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "price")
              }
            }
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["PageInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("hashNextPage", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(hashNextPage: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
          public var hashNextPage: Bool? {
            get {
              return resultMap["hashNextPage"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hashNextPage")
            }
          }
        }
      }
    }
  }
}

public final class AppTrackerByOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppTrackerByOrder($order: ID) {
      appTrackerByOrder(order: $order) {
        __typename
        _id
        order
        trackingNumber
        carrier
        status
        statusDetail
        trackerCreatedAt
        trackerUpdatedAt
        carrier
        publicUrl
        trackingDetails {
          __typename
          message
          description
          status
          statusDetail
          datetime
          trackingLocation {
            __typename
            city
            state
            country
            zip
          }
        }
      }
    }
    """

  public let operationName = "AppTrackerByOrder"

  public var order: GraphQLID?

  public init(order: GraphQLID? = nil) {
    self.order = order
  }

  public var variables: GraphQLMap? {
    return ["order": order]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appTrackerByOrder", arguments: ["order": GraphQLVariable("order")], type: .object(AppTrackerByOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appTrackerByOrder: AppTrackerByOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appTrackerByOrder": appTrackerByOrder.flatMap { (value: AppTrackerByOrder) -> ResultMap in value.resultMap }])
    }

    /// 根据 订单ID 查询物流信息，无物流信息时返回 null
    public var appTrackerByOrder: AppTrackerByOrder? {
      get {
        return (resultMap["appTrackerByOrder"] as? ResultMap).flatMap { AppTrackerByOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appTrackerByOrder")
      }
    }

    public struct AppTrackerByOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["Tracker"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("order", type: .scalar(GraphQLID.self)),
        GraphQLField("trackingNumber", type: .scalar(String.self)),
        GraphQLField("carrier", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("statusDetail", type: .scalar(String.self)),
        GraphQLField("trackerCreatedAt", type: .scalar(Double.self)),
        GraphQLField("trackerUpdatedAt", type: .scalar(Double.self)),
        GraphQLField("carrier", type: .scalar(String.self)),
        GraphQLField("publicUrl", type: .scalar(String.self)),
        GraphQLField("trackingDetails", type: .list(.object(TrackingDetail.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, order: GraphQLID? = nil, trackingNumber: String? = nil, carrier: String? = nil, status: String? = nil, statusDetail: String? = nil, trackerCreatedAt: Double? = nil, trackerUpdatedAt: Double? = nil, publicUrl: String? = nil, trackingDetails: [TrackingDetail?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Tracker", "_id": _id, "order": order, "trackingNumber": trackingNumber, "carrier": carrier, "status": status, "statusDetail": statusDetail, "trackerCreatedAt": trackerCreatedAt, "trackerUpdatedAt": trackerUpdatedAt, "publicUrl": publicUrl, "trackingDetails": trackingDetails.flatMap { (value: [TrackingDetail?]) -> [ResultMap?] in value.map { (value: TrackingDetail?) -> ResultMap? in value.flatMap { (value: TrackingDetail) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 关联的订单 ID
      public var order: GraphQLID? {
        get {
          return resultMap["order"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 物流单号
      public var trackingNumber: String? {
        get {
          return resultMap["trackingNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "trackingNumber")
        }
      }

      /// shipping carrier
      public var carrier: String? {
        get {
          return resultMap["carrier"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "carrier")
        }
      }

      /// easypost tracker status: unknown, pre_transit, in_transit, out_for_delivery,
      /// delivered, available_for_pickup, return_to_sender, failure, cancelled or error
      public var status: String? {
        get {
          return resultMap["status"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// easypost tracker status 描述
      public var statusDetail: String? {
        get {
          return resultMap["statusDetail"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "statusDetail")
        }
      }

      public var trackerCreatedAt: Double? {
        get {
          return resultMap["trackerCreatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "trackerCreatedAt")
        }
      }

      public var trackerUpdatedAt: Double? {
        get {
          return resultMap["trackerUpdatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "trackerUpdatedAt")
        }
      }

      /// 用于查看物流运输详情的页面，由 easypost 提供
      public var publicUrl: String? {
        get {
          return resultMap["publicUrl"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "publicUrl")
        }
      }

      /// 物流追踪详情
      public var trackingDetails: [TrackingDetail?]? {
        get {
          return (resultMap["trackingDetails"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [TrackingDetail?] in value.map { (value: ResultMap?) -> TrackingDetail? in value.flatMap { (value: ResultMap) -> TrackingDetail in TrackingDetail(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [TrackingDetail?]) -> [ResultMap?] in value.map { (value: TrackingDetail?) -> ResultMap? in value.flatMap { (value: TrackingDetail) -> ResultMap in value.resultMap } } }, forKey: "trackingDetails")
        }
      }

      public struct TrackingDetail: GraphQLSelectionSet {
        public static let possibleTypes = ["TrackingDetails"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("statusDetail", type: .scalar(String.self)),
          GraphQLField("datetime", type: .scalar(Double.self)),
          GraphQLField("trackingLocation", type: .object(TrackingLocation.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(message: String? = nil, description: String? = nil, status: String? = nil, statusDetail: String? = nil, datetime: Double? = nil, trackingLocation: TrackingLocation? = nil) {
          self.init(unsafeResultMap: ["__typename": "TrackingDetails", "message": message, "description": description, "status": status, "statusDetail": statusDetail, "datetime": datetime, "trackingLocation": trackingLocation.flatMap { (value: TrackingLocation) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// easypost event 说明
        public var message: String? {
          get {
            return resultMap["message"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "message")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// easypost event status: unknown, pre_transit, in_transit, out_for_delivery,
        /// delivered, available_for_pickup, return_to_sender, failure, cancelled or error
        public var status: String? {
          get {
            return resultMap["status"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// easypost tracker status 描述
        public var statusDetail: String? {
          get {
            return resultMap["statusDetail"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "statusDetail")
          }
        }

        /// easypost event 发生时间
        public var datetime: Double? {
          get {
            return resultMap["datetime"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "datetime")
          }
        }

        /// 包裹追踪地址
        public var trackingLocation: TrackingLocation? {
          get {
            return (resultMap["trackingLocation"] as? ResultMap).flatMap { TrackingLocation(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "trackingLocation")
          }
        }

        public struct TrackingLocation: GraphQLSelectionSet {
          public static let possibleTypes = ["TrackingLocation"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("zip", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(city: String? = nil, state: String? = nil, country: String? = nil, zip: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "TrackingLocation", "city": city, "state": state, "country": country, "zip": zip])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var state: String? {
            get {
              return resultMap["state"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "state")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var zip: String? {
            get {
              return resultMap["zip"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zip")
            }
          }
        }
      }
    }
  }
}

public final class AppUpdateStoreMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppUpdateStore($input: appUpdateStoreInput!) {
      appUpdateStore(input: $input) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppUpdateStore"

  public var input: appUpdateStoreInput

  public init(input: appUpdateStoreInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appUpdateStore", arguments: ["input": GraphQLVariable("input")], type: .object(AppUpdateStore.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appUpdateStore: AppUpdateStore? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appUpdateStore": appUpdateStore.flatMap { (value: AppUpdateStore) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 卖家】***
    /// app 端更新 store 信息
    public var appUpdateStore: AppUpdateStore? {
      get {
        return (resultMap["appUpdateStore"] as? ResultMap).flatMap { AppUpdateStore(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appUpdateStore")
      }
    }

    public struct AppUpdateStore: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppUpdateVideoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppUpdateVideo($id: ID!, $update: AppUpdateVideoInput) {
      appUpdateVideo(_id: $id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppUpdateVideo"

  public var id: GraphQLID
  public var update: AppUpdateVideoInput?

  public init(id: GraphQLID, update: AppUpdateVideoInput? = nil) {
    self.id = id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["id": id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appUpdateVideo", arguments: ["_id": GraphQLVariable("id"), "update": GraphQLVariable("update")], type: .object(AppUpdateVideo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appUpdateVideo: AppUpdateVideo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appUpdateVideo": appUpdateVideo.flatMap { (value: AppUpdateVideo) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端编辑、删除视频
    public var appUpdateVideo: AppUpdateVideo? {
      get {
        return (resultMap["appUpdateVideo"] as? ResultMap).flatMap { AppUpdateVideo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appUpdateVideo")
      }
    }

    public struct AppUpdateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppViewStoreQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appViewStore($sellerId: String, $page: Int, $pageSize: Int, $status: [enum__productStatus!]!, $productType: [enum__productType!]!, $name: String) {
      appViewStore(sellerId: $sellerId) {
        __typename
        _id
        storeName
        storePicture {
          __typename
          image
          key
        }
        storeBackgroundPicture {
          __typename
          image
          key
        }
        storeProducts(page: $page, pageSize: $pageSize, status: $status, productType: $productType, name: $name) {
          __typename
          edges {
            __typename
            _id
            name
            description
            images {
              __typename
              image
              key
            }
            stock
            regularPrice
            livePrice
            liveHost {
              __typename
              _id
              avatar
              deviceType
            }
            status
            productType
            isFreeShipping
            shippingInfo {
              __typename
              companyName
              method
              price
            }
            createdAt
            updatedAt
            variants {
              __typename
              _id
              name
              sku
              quantity
            }
          }
          totalCount
          pageInfo {
            __typename
            hashNextPage
          }
        }
      }
    }
    """

  public let operationName = "appViewStore"

  public var sellerId: String?
  public var page: Int?
  public var pageSize: Int?
  public var status: [enum__productStatus]
  public var productType: [enum__productType]
  public var name: String?

  public init(sellerId: String? = nil, page: Int? = nil, pageSize: Int? = nil, status: [enum__productStatus], productType: [enum__productType], name: String? = nil) {
    self.sellerId = sellerId
    self.page = page
    self.pageSize = pageSize
    self.status = status
    self.productType = productType
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["sellerId": sellerId, "page": page, "pageSize": pageSize, "status": status, "productType": productType, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appViewStore", arguments: ["sellerId": GraphQLVariable("sellerId")], type: .object(AppViewStore.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appViewStore: AppViewStore? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appViewStore": appViewStore.flatMap { (value: AppViewStore) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端浏览 seller 的店铺信息
    public var appViewStore: AppViewStore? {
      get {
        return (resultMap["appViewStore"] as? ResultMap).flatMap { AppViewStore(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appViewStore")
      }
    }

    public struct AppViewStore: GraphQLSelectionSet {
      public static let possibleTypes = ["AppViewStore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("storeName", type: .nonNull(.scalar(String.self))),
        GraphQLField("storePicture", type: .nonNull(.object(StorePicture.selections))),
        GraphQLField("storeBackgroundPicture", type: .nonNull(.object(StoreBackgroundPicture.selections))),
        GraphQLField("storeProducts", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "status": GraphQLVariable("status"), "productType": GraphQLVariable("productType"), "name": GraphQLVariable("name")], type: .nonNull(.object(StoreProduct.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, storeName: String, storePicture: StorePicture, storeBackgroundPicture: StoreBackgroundPicture, storeProducts: StoreProduct) {
        self.init(unsafeResultMap: ["__typename": "AppViewStore", "_id": _id, "storeName": storeName, "storePicture": storePicture.resultMap, "storeBackgroundPicture": storeBackgroundPicture.resultMap, "storeProducts": storeProducts.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 店铺 id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 店名
      public var storeName: String {
        get {
          return resultMap["storeName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "storeName")
        }
      }

      /// 店铺 logo 图片
      public var storePicture: StorePicture {
        get {
          return StorePicture(unsafeResultMap: resultMap["storePicture"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storePicture")
        }
      }

      /// 店铺背景图片
      public var storeBackgroundPicture: StoreBackgroundPicture {
        get {
          return StoreBackgroundPicture(unsafeResultMap: resultMap["storeBackgroundPicture"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storeBackgroundPicture")
        }
      }

      /// 店铺商品. 只会显示 seller 选择在 store 展示的商品.
      public var storeProducts: StoreProduct {
        get {
          return StoreProduct(unsafeResultMap: resultMap["storeProducts"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "storeProducts")
        }
      }

      public struct StorePicture: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct StoreBackgroundPicture: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct StoreProduct: GraphQLSelectionSet {
        public static let possibleTypes = ["appStoreProductsResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
          GraphQLField("totalCount", type: .scalar(Int.self)),
          GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(edges: [Edge], totalCount: Int? = nil, pageInfo: PageInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "appStoreProductsResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }, "totalCount": totalCount, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var edges: [Edge] {
          get {
            return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
          }
        }

        public var totalCount: Int? {
          get {
            return resultMap["totalCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var pageInfo: PageInfo? {
          get {
            return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
          }
        }

        public struct Edge: GraphQLSelectionSet {
          public static let possibleTypes = ["Product"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("images", type: .list(.object(Image.selections))),
            GraphQLField("stock", type: .scalar(Int.self)),
            GraphQLField("regularPrice", type: .scalar(Int.self)),
            GraphQLField("livePrice", type: .scalar(Int.self)),
            GraphQLField("liveHost", type: .object(LiveHost.selections)),
            GraphQLField("status", type: .scalar(enum__productStatus.self)),
            GraphQLField("productType", type: .scalar(enum__productType.self)),
            GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
            GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("variants", type: .list(.object(Variant.selections))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, liveHost: LiveHost? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, variants: [Variant?]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "liveHost": liveHost.flatMap { (value: LiveHost) -> ResultMap in value.resultMap }, "status": status, "productType": productType, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// ID
          public var _id: String? {
            get {
              return resultMap["_id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 名称
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 图片
          public var images: [Image?]? {
            get {
              return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
            }
          }

          /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
          public var stock: Int? {
            get {
              return resultMap["stock"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "stock")
            }
          }

          /// 常规价格
          public var regularPrice: Int? {
            get {
              return resultMap["regularPrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 直播价格
          public var livePrice: Int? {
            get {
              return resultMap["livePrice"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 带货主播
          public var liveHost: LiveHost? {
            get {
              return (resultMap["liveHost"] as? ResultMap).flatMap { LiveHost(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "liveHost")
            }
          }

          /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
          public var status: enum__productStatus? {
            get {
              return resultMap["status"] as? enum__productStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 商品类型
          public var productType: enum__productType? {
            get {
              return resultMap["productType"] as? enum__productType
            }
            set {
              resultMap.updateValue(newValue, forKey: "productType")
            }
          }

          /// 是否包邮
          public var isFreeShipping: Bool? {
            get {
              return resultMap["isFreeShipping"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isFreeShipping")
            }
          }

          /// 运输/快递
          public var shippingInfo: ShippingInfo? {
            get {
              return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
            }
          }

          /// 创建日期
          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// 更新日期
          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 商品属性
          public var variants: [Variant?]? {
            get {
              return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }

          public struct LiveHost: GraphQLSelectionSet {
            public static let possibleTypes = ["user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, deviceType: enum__deviceType? = nil) {
              self.init(unsafeResultMap: ["__typename": "user", "_id": _id, "avatar": avatar, "deviceType": deviceType])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 设备类型
            public var deviceType: enum__deviceType? {
              get {
                return resultMap["deviceType"] as? enum__deviceType
              }
              set {
                resultMap.updateValue(newValue, forKey: "deviceType")
              }
            }
          }

          public struct ShippingInfo: GraphQLSelectionSet {
            public static let possibleTypes = ["ShippingInfo"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("companyName", type: .scalar(String.self)),
              GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
              GraphQLField("price", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 运输公司名称
            public var companyName: String? {
              get {
                return resultMap["companyName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "companyName")
              }
            }

            /// 运输方式
            public var method: enum__shippingMethod? {
              get {
                return resultMap["method"] as? enum__shippingMethod
              }
              set {
                resultMap.updateValue(newValue, forKey: "method")
              }
            }

            /// 价格
            public var price: Int? {
              get {
                return resultMap["price"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "price")
              }
            }
          }

          public struct Variant: GraphQLSelectionSet {
            public static let possibleTypes = ["Variant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("sku", type: .scalar(String.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// variant id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 属性名
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// sku number
            public var sku: String? {
              get {
                return resultMap["sku"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sku")
              }
            }

            /// 库存
            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["PageInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("hashNextPage", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(hashNextPage: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
          public var hashNextPage: Bool? {
            get {
              return resultMap["hashNextPage"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hashNextPage")
            }
          }
        }
      }
    }
  }
}

public final class BindPhoneNumberMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation bindPhoneNumber($token: String!, $phoneNumber: String!) {
      bindPhoneNumber(token: $token, phoneNumber: $phoneNumber) {
        __typename
        success
      }
    }
    """

  public let operationName = "bindPhoneNumber"

  public var token: String
  public var phoneNumber: String

  public init(token: String, phoneNumber: String) {
    self.token = token
    self.phoneNumber = phoneNumber
  }

  public var variables: GraphQLMap? {
    return ["token": token, "phoneNumber": phoneNumber]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("bindPhoneNumber", arguments: ["token": GraphQLVariable("token"), "phoneNumber": GraphQLVariable("phoneNumber")], type: .object(BindPhoneNumber.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(bindPhoneNumber: BindPhoneNumber? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "bindPhoneNumber": bindPhoneNumber.flatMap { (value: BindPhoneNumber) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 绑定手机号
    public var bindPhoneNumber: BindPhoneNumber? {
      get {
        return (resultMap["bindPhoneNumber"] as? ResultMap).flatMap { BindPhoneNumber(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "bindPhoneNumber")
      }
    }

    public struct BindPhoneNumber: GraphQLSelectionSet {
      public static let possibleTypes = ["bindPhoneNumber"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "bindPhoneNumber", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class CalculateOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query CalculateOrder($live: ID, $shippingAddressId: ID!, $products: [OrderProductInput!]!) {
      calculateOrder(live: $live, shippingAddressId: $shippingAddressId, products: $products) {
        __typename
        products {
          __typename
          product
          quantity
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
          sku
          chosenTag
          isFreeShipping
          shippingInfo {
            __typename
            companyName
            method
            price
          }
        }
        userCoupons {
          __typename
          _id
          value
          user {
            __typename
            _id
            avatar
            username
          }
          live {
            __typename
            _id
            status
            coverImage
            title
          }
          coupon {
            __typename
            _id
            quantity
          }
          used
          createdAt
          updatedAt
          deleted
        }
        taxTotalPrice
        shippingTotalPrice
        discountTotalPrice
        paidPrice
        liveDiscount
      }
    }
    """

  public let operationName = "CalculateOrder"

  public var live: GraphQLID?
  public var shippingAddressId: GraphQLID
  public var products: [OrderProductInput]

  public init(live: GraphQLID? = nil, shippingAddressId: GraphQLID, products: [OrderProductInput]) {
    self.live = live
    self.shippingAddressId = shippingAddressId
    self.products = products
  }

  public var variables: GraphQLMap? {
    return ["live": live, "shippingAddressId": shippingAddressId, "products": products]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("calculateOrder", arguments: ["live": GraphQLVariable("live"), "shippingAddressId": GraphQLVariable("shippingAddressId"), "products": GraphQLVariable("products")], type: .object(CalculateOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(calculateOrder: CalculateOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "calculateOrder": calculateOrder.flatMap { (value: CalculateOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 订单计算
    public var calculateOrder: CalculateOrder? {
      get {
        return (resultMap["calculateOrder"] as? ResultMap).flatMap { CalculateOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "calculateOrder")
      }
    }

    public struct CalculateOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["calculateOrder"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("userCoupons", type: .list(.object(UserCoupon.selections))),
        GraphQLField("taxTotalPrice", type: .scalar(Int.self)),
        GraphQLField("shippingTotalPrice", type: .scalar(Int.self)),
        GraphQLField("discountTotalPrice", type: .scalar(Int.self)),
        GraphQLField("paidPrice", type: .scalar(Int.self)),
        GraphQLField("liveDiscount", type: .scalar(Int.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(products: [Product?]? = nil, userCoupons: [UserCoupon?]? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, discountTotalPrice: Int? = nil, paidPrice: Int? = nil, liveDiscount: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "calculateOrder", "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "userCoupons": userCoupons.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "discountTotalPrice": discountTotalPrice, "paidPrice": paidPrice, "liveDiscount": liveDiscount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 商品信息
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 优惠劵
      public var userCoupons: [UserCoupon?]? {
        get {
          return (resultMap["userCoupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [UserCoupon?] in value.map { (value: ResultMap?) -> UserCoupon? in value.flatMap { (value: ResultMap) -> UserCoupon in UserCoupon(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, forKey: "userCoupons")
        }
      }

      /// 税金额。订单计算页面的 Tax
      public var taxTotalPrice: Int? {
        get {
          return resultMap["taxTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "taxTotalPrice")
        }
      }

      /// 快递费用。订单计算页面的 Shipping
      public var shippingTotalPrice: Int? {
        get {
          return resultMap["shippingTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shippingTotalPrice")
        }
      }

      /// 优惠券折扣金额。订单计算页面的 Coupon Discount. 注意和 Discount 区分开
      public var discountTotalPrice: Int? {
        get {
          return resultMap["discountTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "discountTotalPrice")
        }
      }

      /// 支付金额。订单计算页面的 Total
      public var paidPrice: Int? {
        get {
          return resultMap["paidPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "paidPrice")
        }
      }

      /// （常规价格 - 直播价格）* 购买数量。订单计算页面的 Discount
      public var liveDiscount: Int? {
        get {
          return resultMap["liveDiscount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveDiscount")
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["OrderProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("sku", type: .scalar(String.self)),
          GraphQLField("chosenTag", type: .scalar(String.self)),
          GraphQLField("isFreeShipping", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(product: GraphQLID, quantity: Int, variants: [Variant?]? = nil, sku: String? = nil, chosenTag: String? = nil, isFreeShipping: Bool, shippingInfo: ShippingInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "OrderProduct", "product": product, "quantity": quantity, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "sku": sku, "chosenTag": chosenTag, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 商品 ID
        public var product: GraphQLID {
          get {
            return resultMap["product"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "product")
          }
        }

        /// 商品购买数量
        public var quantity: Int {
          get {
            return resultMap["quantity"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        /// 商品款式
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 商品 sku
        @available(*, deprecated, message: "use variants sku instead")
        public var sku: String? {
          get {
            return resultMap["sku"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sku")
          }
        }

        /// 选定的商品标签
        @available(*, deprecated, message: "use chosenVariantName instead")
        public var chosenTag: String? {
          get {
            return resultMap["chosenTag"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "chosenTag")
          }
        }

        /// 商品是否包邮
        public var isFreeShipping: Bool {
          get {
            return resultMap["isFreeShipping"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 商品邮寄方式信息
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["OrderProductShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("method", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, method: String? = nil, price: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "OrderProductShippingInfo", "companyName": companyName, "method": method, "price": price])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          public var method: String? {
            get {
              return resultMap["method"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }

          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }
        }
      }

      public struct UserCoupon: GraphQLSelectionSet {
        public static let possibleTypes = ["userCoupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("value", type: .scalar(Int.self)),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("live", type: .object(Live.selections)),
          GraphQLField("coupon", type: .object(Coupon.selections)),
          GraphQLField("used", type: .scalar(Bool.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("deleted", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, value: Int? = nil, user: User? = nil, live: Live? = nil, coupon: Coupon? = nil, used: Bool? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, deleted: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "userCoupon", "_id": _id, "value": value, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "coupon": coupon.flatMap { (value: Coupon) -> ResultMap in value.resultMap }, "used": used, "createdAt": createdAt, "updatedAt": updatedAt, "deleted": deleted])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 折扣数值，百分比折扣则为百分比数值，按金额折扣则为金额数值
        public var value: Int? {
          get {
            return resultMap["value"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        /// 领取优惠券的用户
        public var user: User? {
          get {
            return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "user")
          }
        }

        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        public var coupon: Coupon? {
          get {
            return (resultMap["coupon"] as? ResultMap).flatMap { Coupon(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "coupon")
          }
        }

        /// 是否已使用，true 表示已使用
        public var used: Bool? {
          get {
            return resultMap["used"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "used")
          }
        }

        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var deleted: Bool? {
          get {
            return resultMap["deleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "deleted")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["userCoupon_user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "userCoupon_user", "_id": _id, "avatar": avatar, "username": username])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["userCoupon_live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("status", type: .scalar(String.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("title", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, status: String? = nil, coverImage: String? = nil, title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "userCoupon_live", "_id": _id, "status": status, "coverImage": coverImage, "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var status: String? {
            get {
              return resultMap["status"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }

        public struct Coupon: GraphQLSelectionSet {
          public static let possibleTypes = ["userCoupon_coupon"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "userCoupon_coupon", "_id": _id, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }
    }
  }
}

public final class CalculateTicketOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query CalculateTicketOrder($tickets: [OrderTicketsInput!]!) {
      calculateTicketOrder(tickets: $tickets) {
        __typename
        tickets {
          __typename
          ticket {
            __typename
            _id
            event {
              __typename
              _id
              name
              coverImages {
                __typename
                image
                key
              }
            }
            name
            quantity
            price
            saleDate {
              __typename
              startDate
              endDate
            }
            activateDates {
              __typename
              startDate
              endDate
            }
          }
          quantity
        }
        taxTotalPrice
        serviceFeeTotalPrice
        processFeeTotalPrice
        paidPrice
      }
    }
    """

  public let operationName = "CalculateTicketOrder"

  public var tickets: [OrderTicketsInput]

  public init(tickets: [OrderTicketsInput]) {
    self.tickets = tickets
  }

  public var variables: GraphQLMap? {
    return ["tickets": tickets]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("calculateTicketOrder", arguments: ["tickets": GraphQLVariable("tickets")], type: .object(CalculateTicketOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(calculateTicketOrder: CalculateTicketOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "calculateTicketOrder": calculateTicketOrder.flatMap { (value: CalculateTicketOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// Ticket 订单计算
    public var calculateTicketOrder: CalculateTicketOrder? {
      get {
        return (resultMap["calculateTicketOrder"] as? ResultMap).flatMap { CalculateTicketOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "calculateTicketOrder")
      }
    }

    public struct CalculateTicketOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["calculateTicketOrder"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("tickets", type: .nonNull(.list(.nonNull(.object(Ticket.selections))))),
        GraphQLField("taxTotalPrice", type: .nonNull(.scalar(Int.self))),
        GraphQLField("serviceFeeTotalPrice", type: .nonNull(.scalar(Int.self))),
        GraphQLField("processFeeTotalPrice", type: .nonNull(.scalar(Int.self))),
        GraphQLField("paidPrice", type: .nonNull(.scalar(Int.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(tickets: [Ticket], taxTotalPrice: Int, serviceFeeTotalPrice: Int, processFeeTotalPrice: Int, paidPrice: Int) {
        self.init(unsafeResultMap: ["__typename": "calculateTicketOrder", "tickets": tickets.map { (value: Ticket) -> ResultMap in value.resultMap }, "taxTotalPrice": taxTotalPrice, "serviceFeeTotalPrice": serviceFeeTotalPrice, "processFeeTotalPrice": processFeeTotalPrice, "paidPrice": paidPrice])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ticket 信息
      public var tickets: [Ticket] {
        get {
          return (resultMap["tickets"] as! [ResultMap]).map { (value: ResultMap) -> Ticket in Ticket(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Ticket) -> ResultMap in value.resultMap }, forKey: "tickets")
        }
      }

      /// 税金额。订单计算页面的 Tax
      public var taxTotalPrice: Int {
        get {
          return resultMap["taxTotalPrice"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "taxTotalPrice")
        }
      }

      /// 订单计算页面的 Service Fee
      public var serviceFeeTotalPrice: Int {
        get {
          return resultMap["serviceFeeTotalPrice"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "serviceFeeTotalPrice")
        }
      }

      /// 订单计算页面的 Process Fee
      public var processFeeTotalPrice: Int {
        get {
          return resultMap["processFeeTotalPrice"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "processFeeTotalPrice")
        }
      }

      /// 支付金额。订单计算页面的 Total
      public var paidPrice: Int {
        get {
          return resultMap["paidPrice"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "paidPrice")
        }
      }

      public struct Ticket: GraphQLSelectionSet {
        public static let possibleTypes = ["OrderTicketCalculation"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("ticket", type: .nonNull(.object(Ticket.selections))),
          GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(ticket: Ticket, quantity: Int) {
          self.init(unsafeResultMap: ["__typename": "OrderTicketCalculation", "ticket": ticket.resultMap, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 购买 ticket 详情
        public var ticket: Ticket {
          get {
            return Ticket(unsafeResultMap: resultMap["ticket"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "ticket")
          }
        }

        /// 购买 ticket 数量
        public var quantity: Int {
          get {
            return resultMap["quantity"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        public struct Ticket: GraphQLSelectionSet {
          public static let possibleTypes = ["Ticket"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("event", type: .nonNull(.object(Event.selections))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
            GraphQLField("price", type: .nonNull(.scalar(Int.self))),
            GraphQLField("saleDate", type: .nonNull(.object(SaleDate.selections))),
            GraphQLField("activateDates", type: .nonNull(.list(.nonNull(.object(ActivateDate.selections))))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, event: Event, name: String, quantity: Int, price: Int, saleDate: SaleDate, activateDates: [ActivateDate]) {
            self.init(unsafeResultMap: ["__typename": "Ticket", "_id": _id, "event": event.resultMap, "name": name, "quantity": quantity, "price": price, "saleDate": saleDate.resultMap, "activateDates": activateDates.map { (value: ActivateDate) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 关联的活动
          public var event: Event {
            get {
              return Event(unsafeResultMap: resultMap["event"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "event")
            }
          }

          /// 票券名称, maxlength: 66
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 票券库存
          public var quantity: Int {
            get {
              return resultMap["quantity"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          /// 价格，单位：分
          public var price: Int {
            get {
              return resultMap["price"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }

          /// 可售票时间
          public var saleDate: SaleDate {
            get {
              return SaleDate(unsafeResultMap: resultMap["saleDate"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "saleDate")
            }
          }

          /// 可验票时间
          public var activateDates: [ActivateDate] {
            get {
              return (resultMap["activateDates"] as! [ResultMap]).map { (value: ResultMap) -> ActivateDate in ActivateDate(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: ActivateDate) -> ResultMap in value.resultMap }, forKey: "activateDates")
            }
          }

          public struct Event: GraphQLSelectionSet {
            public static let possibleTypes = ["Event"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("coverImages", type: .nonNull(.list(.nonNull(.object(CoverImage.selections))))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID, name: String, coverImages: [CoverImage]) {
              self.init(unsafeResultMap: ["__typename": "Event", "_id": _id, "name": name, "coverImages": coverImages.map { (value: CoverImage) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID {
              get {
                return resultMap["_id"]! as! GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 活动标题
            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 活动描述图片
            public var coverImages: [CoverImage] {
              get {
                return (resultMap["coverImages"] as! [ResultMap]).map { (value: ResultMap) -> CoverImage in CoverImage(unsafeResultMap: value) }
              }
              set {
                resultMap.updateValue(newValue.map { (value: CoverImage) -> ResultMap in value.resultMap }, forKey: "coverImages")
              }
            }

            public struct CoverImage: GraphQLSelectionSet {
              public static let possibleTypes = ["ImageWithKey"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("image", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(image: String? = nil, key: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var image: String? {
                get {
                  return resultMap["image"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "image")
                }
              }

              public var key: String? {
                get {
                  return resultMap["key"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "key")
                }
              }
            }
          }

          public struct SaleDate: GraphQLSelectionSet {
            public static let possibleTypes = ["TicketDate"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
              GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(startDate: String, endDate: String) {
              self.init(unsafeResultMap: ["__typename": "TicketDate", "startDate": startDate, "endDate": endDate])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 起始日期时间戳，单位：毫秒，举例:1660042761137
            public var startDate: String {
              get {
                return resultMap["startDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "startDate")
              }
            }

            /// 结束日期时间戳，单位：毫秒，举例：1660042761137
            public var endDate: String {
              get {
                return resultMap["endDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "endDate")
              }
            }
          }

          public struct ActivateDate: GraphQLSelectionSet {
            public static let possibleTypes = ["TicketDate"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("startDate", type: .nonNull(.scalar(String.self))),
              GraphQLField("endDate", type: .nonNull(.scalar(String.self))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(startDate: String, endDate: String) {
              self.init(unsafeResultMap: ["__typename": "TicketDate", "startDate": startDate, "endDate": endDate])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 起始日期时间戳，单位：毫秒，举例:1660042761137
            public var startDate: String {
              get {
                return resultMap["startDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "startDate")
              }
            }

            /// 结束日期时间戳，单位：毫秒，举例：1660042761137
            public var endDate: String {
              get {
                return resultMap["endDate"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "endDate")
              }
            }
          }
        }
      }
    }
  }
}

public final class CheckSessionTokenQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query CheckSessionToken {
      self {
        __typename
        _id
        avatar
        gender
        deviceType
        deviceId
        username
        birthday
        phoneNumber
        email
        role
      }
    }
    """

  public let operationName = "CheckSessionToken"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("self", type: .object(`Self`.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(`self` _self: `Self`? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "self": _self.flatMap { (value: `Self`) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取登陆用户自己的用户信息
    public var `self`: `Self`? {
      get {
        return (resultMap["self"] as? ResultMap).flatMap { `Self`(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "self")
      }
    }

    public struct `Self`: GraphQLSelectionSet {
      public static let possibleTypes = ["userSelf"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(enum__gender.self)),
        GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
        GraphQLField("deviceId", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("birthday", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("role", type: .scalar(enum__userRole.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, avatar: String? = nil, gender: enum__gender? = nil, deviceType: enum__deviceType? = nil, deviceId: String? = nil, username: String? = nil, birthday: String? = nil, phoneNumber: String? = nil, email: String? = nil, role: enum__userRole? = nil) {
        self.init(unsafeResultMap: ["__typename": "userSelf", "_id": _id, "avatar": avatar, "gender": gender, "deviceType": deviceType, "deviceId": deviceId, "username": username, "birthday": birthday, "phoneNumber": phoneNumber, "email": email, "role": role])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 性别
      public var gender: enum__gender? {
        get {
          return resultMap["gender"] as? enum__gender
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      /// 设备类型
      public var deviceType: enum__deviceType? {
        get {
          return resultMap["deviceType"] as? enum__deviceType
        }
        set {
          resultMap.updateValue(newValue, forKey: "deviceType")
        }
      }

      /// 手机唯一识别 id，安卓的 imei，ios 的 idfa
      public var deviceId: String? {
        get {
          return resultMap["deviceId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "deviceId")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 生日 (日/月/年) 格式 DD/MM/YYYY
      public var birthday: String? {
        get {
          return resultMap["birthday"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthday")
        }
      }

      /// 手机号
      public var phoneNumber: String? {
        get {
          return resultMap["phoneNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      /// 邮箱
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 用户角色
      public var role: enum__userRole? {
        get {
          return resultMap["role"] as? enum__userRole
        }
        set {
          resultMap.updateValue(newValue, forKey: "role")
        }
      }
    }
  }
}

public final class CreateAddressMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createAddress($firstName: String!, $lastName: String!, $phoneNumber: String, $addressLine1: String!, $addressLine2: String, $city: String!, $state: String!, $country: String!, $zipCode: String!, $addressType: enum__addressType!, $isDefaultAddress: Boolean) {
      createAddress(firstName: $firstName, lastName: $lastName, phoneNumber: $phoneNumber, addressLine1: $addressLine1, addressLine2: $addressLine2, city: $city, state: $state, country: $country, zipCode: $zipCode, addressType: $addressType, isDefaultAddress: $isDefaultAddress) {
        __typename
        _id
        firstName
        lastName
        addressLine1
        addressLine2
        city
        country
        zipCode
        state
        addressType
        isDefaultAddress
        phoneNumber
      }
    }
    """

  public let operationName = "createAddress"

  public var firstName: String
  public var lastName: String
  public var phoneNumber: String?
  public var addressLine1: String
  public var addressLine2: String?
  public var city: String
  public var state: String
  public var country: String
  public var zipCode: String
  public var addressType: enum__addressType
  public var isDefaultAddress: Bool?

  public init(firstName: String, lastName: String, phoneNumber: String? = nil, addressLine1: String, addressLine2: String? = nil, city: String, state: String, country: String, zipCode: String, addressType: enum__addressType, isDefaultAddress: Bool? = nil) {
    self.firstName = firstName
    self.lastName = lastName
    self.phoneNumber = phoneNumber
    self.addressLine1 = addressLine1
    self.addressLine2 = addressLine2
    self.city = city
    self.state = state
    self.country = country
    self.zipCode = zipCode
    self.addressType = addressType
    self.isDefaultAddress = isDefaultAddress
  }

  public var variables: GraphQLMap? {
    return ["firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createAddress", arguments: ["firstName": GraphQLVariable("firstName"), "lastName": GraphQLVariable("lastName"), "phoneNumber": GraphQLVariable("phoneNumber"), "addressLine1": GraphQLVariable("addressLine1"), "addressLine2": GraphQLVariable("addressLine2"), "city": GraphQLVariable("city"), "state": GraphQLVariable("state"), "country": GraphQLVariable("country"), "zipCode": GraphQLVariable("zipCode"), "addressType": GraphQLVariable("addressType"), "isDefaultAddress": GraphQLVariable("isDefaultAddress")], type: .object(CreateAddress.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createAddress: CreateAddress? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createAddress": createAddress.flatMap { (value: CreateAddress) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建address。创建前需要先调用 validateAddress 校验地址。未通过校验的地址调用此接口会报错
    public var createAddress: CreateAddress? {
      get {
        return (resultMap["createAddress"] as? ResultMap).flatMap { CreateAddress(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createAddress")
      }
    }

    public struct CreateAddress: GraphQLSelectionSet {
      public static let possibleTypes = ["Address"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("addressLine1", type: .scalar(String.self)),
        GraphQLField("addressLine2", type: .scalar(String.self)),
        GraphQLField("city", type: .scalar(String.self)),
        GraphQLField("country", type: .scalar(String.self)),
        GraphQLField("zipCode", type: .scalar(String.self)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("addressType", type: .scalar(enum__addressType.self)),
        GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, country: String? = nil, zipCode: String? = nil, state: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil, phoneNumber: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "country": country, "zipCode": zipCode, "state": state, "addressType": addressType, "isDefaultAddress": isDefaultAddress, "phoneNumber": phoneNumber])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// firstName
      public var firstName: String? {
        get {
          return resultMap["firstName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      /// lastName
      public var lastName: String? {
        get {
          return resultMap["lastName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      /// addressLine1
      public var addressLine1: String? {
        get {
          return resultMap["addressLine1"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressLine1")
        }
      }

      /// addressLine2
      public var addressLine2: String? {
        get {
          return resultMap["addressLine2"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressLine2")
        }
      }

      /// city
      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      /// country
      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      /// zipCode
      public var zipCode: String? {
        get {
          return resultMap["zipCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zipCode")
        }
      }

      /// state
      public var state: String? {
        get {
          return resultMap["state"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "state")
        }
      }

      /// ShippingAddress or BillingAddress
      public var addressType: enum__addressType? {
        get {
          return resultMap["addressType"] as? enum__addressType
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressType")
        }
      }

      /// 是否为默认
      public var isDefaultAddress: Bool? {
        get {
          return resultMap["isDefaultAddress"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefaultAddress")
        }
      }

      /// phoneNumber
      public var phoneNumber: String? {
        get {
          return resultMap["phoneNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumber")
        }
      }
    }
  }
}

public final class CreateCardMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createCard($firstName: String!, $lastName: String!, $email: String!, $cardNumber: String!, $expiryDate: String!, $cvvCode: String!, $isDefaultCard: Boolean!, $billingAddress: ID!) {
      createCard(firstName: $firstName, lastName: $lastName, email: $email, cardNumber: $cardNumber, expiryDate: $expiryDate, cvvCode: $cvvCode, isDefaultCard: $isDefaultCard, billingAddress: $billingAddress) {
        __typename
        _id
        firstName
        lastName
        expiryDate
        cvvCode
        email
        stripePaymentMethodId
        isDefaultCard
        last4
        brand
        brandIcon
        invalidCard
        billingAddress {
          __typename
          _id
          firstName
          lastName
          phoneNumber
          addressLine1
          addressLine2
          city
          state
          country
          zipCode
          addressType
          isDefaultAddress
          card
        }
      }
    }
    """

  public let operationName = "createCard"

  public var firstName: String
  public var lastName: String
  public var email: String
  public var cardNumber: String
  public var expiryDate: String
  public var cvvCode: String
  public var isDefaultCard: Bool
  public var billingAddress: GraphQLID

  public init(firstName: String, lastName: String, email: String, cardNumber: String, expiryDate: String, cvvCode: String, isDefaultCard: Bool, billingAddress: GraphQLID) {
    self.firstName = firstName
    self.lastName = lastName
    self.email = email
    self.cardNumber = cardNumber
    self.expiryDate = expiryDate
    self.cvvCode = cvvCode
    self.isDefaultCard = isDefaultCard
    self.billingAddress = billingAddress
  }

  public var variables: GraphQLMap? {
    return ["firstName": firstName, "lastName": lastName, "email": email, "cardNumber": cardNumber, "expiryDate": expiryDate, "cvvCode": cvvCode, "isDefaultCard": isDefaultCard, "billingAddress": billingAddress]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createCard", arguments: ["firstName": GraphQLVariable("firstName"), "lastName": GraphQLVariable("lastName"), "email": GraphQLVariable("email"), "cardNumber": GraphQLVariable("cardNumber"), "expiryDate": GraphQLVariable("expiryDate"), "cvvCode": GraphQLVariable("cvvCode"), "isDefaultCard": GraphQLVariable("isDefaultCard"), "billingAddress": GraphQLVariable("billingAddress")], type: .object(CreateCard.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createCard: CreateCard? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createCard": createCard.flatMap { (value: CreateCard) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建card
    public var createCard: CreateCard? {
      get {
        return (resultMap["createCard"] as? ResultMap).flatMap { CreateCard(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createCard")
      }
    }

    public struct CreateCard: GraphQLSelectionSet {
      public static let possibleTypes = ["Card"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
        GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("last4", type: .nonNull(.scalar(String.self))),
        GraphQLField("brand", type: .nonNull(.scalar(String.self))),
        GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
        GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("billingAddress", type: .object(BillingAddress.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, firstName: String, lastName: String, expiryDate: String, cvvCode: String, email: String? = nil, stripePaymentMethodId: String, isDefaultCard: Bool, last4: String, brand: String, brandIcon: String, invalidCard: Bool, billingAddress: BillingAddress? = nil) {
        self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "firstName": firstName, "lastName": lastName, "expiryDate": expiryDate, "cvvCode": cvvCode, "email": email, "stripePaymentMethodId": stripePaymentMethodId, "isDefaultCard": isDefaultCard, "last4": last4, "brand": brand, "brandIcon": brandIcon, "invalidCard": invalidCard, "billingAddress": billingAddress.flatMap { (value: BillingAddress) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// firstName
      public var firstName: String {
        get {
          return resultMap["firstName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      /// lastName
      public var lastName: String {
        get {
          return resultMap["lastName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      /// expiryDate
      public var expiryDate: String {
        get {
          return resultMap["expiryDate"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiryDate")
        }
      }

      /// cvvCode
      public var cvvCode: String {
        get {
          return resultMap["cvvCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "cvvCode")
        }
      }

      /// 邮箱
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// stripe payment method id
      public var stripePaymentMethodId: String {
        get {
          return resultMap["stripePaymentMethodId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
        }
      }

      /// 是否是默认信用卡
      public var isDefaultCard: Bool {
        get {
          return resultMap["isDefaultCard"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefaultCard")
        }
      }

      /// last4
      public var last4: String {
        get {
          return resultMap["last4"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "last4")
        }
      }

      /// 发卡机构, 对应 UI 上的`Bank Name`
      public var brand: String {
        get {
          return resultMap["brand"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "brand")
        }
      }

      /// 发卡机构图片
      public var brandIcon: String {
        get {
          return resultMap["brandIcon"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "brandIcon")
        }
      }

      /// 卡片是否无效，true 表示无效，false 表示有效
      public var invalidCard: Bool {
        get {
          return resultMap["invalidCard"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "invalidCard")
        }
      }

      /// 账单地址
      public var billingAddress: BillingAddress? {
        get {
          return (resultMap["billingAddress"] as? ResultMap).flatMap { BillingAddress(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "billingAddress")
        }
      }

      public struct BillingAddress: GraphQLSelectionSet {
        public static let possibleTypes = ["Address"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("firstName", type: .scalar(String.self)),
          GraphQLField("lastName", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("addressLine1", type: .scalar(String.self)),
          GraphQLField("addressLine2", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("zipCode", type: .scalar(String.self)),
          GraphQLField("addressType", type: .scalar(enum__addressType.self)),
          GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
          GraphQLField("card", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil, card: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress, "card": card])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// firstName
        public var firstName: String? {
          get {
            return resultMap["firstName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstName")
          }
        }

        /// lastName
        public var lastName: String? {
          get {
            return resultMap["lastName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastName")
          }
        }

        /// phoneNumber
        public var phoneNumber: String? {
          get {
            return resultMap["phoneNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        /// addressLine1
        public var addressLine1: String? {
          get {
            return resultMap["addressLine1"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "addressLine1")
          }
        }

        /// addressLine2
        public var addressLine2: String? {
          get {
            return resultMap["addressLine2"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "addressLine2")
          }
        }

        /// city
        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        /// state
        public var state: String? {
          get {
            return resultMap["state"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "state")
          }
        }

        /// country
        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        /// zipCode
        public var zipCode: String? {
          get {
            return resultMap["zipCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zipCode")
          }
        }

        /// ShippingAddress or BillingAddress
        public var addressType: enum__addressType? {
          get {
            return resultMap["addressType"] as? enum__addressType
          }
          set {
            resultMap.updateValue(newValue, forKey: "addressType")
          }
        }

        /// 是否为默认
        public var isDefaultAddress: Bool? {
          get {
            return resultMap["isDefaultAddress"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDefaultAddress")
          }
        }

        /// 当 addressType 为 BILLING 时, 有此字段，表示该账单地址和此 card 关联
        public var card: String? {
          get {
            return resultMap["card"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "card")
          }
        }
      }
    }
  }
}

public final class CreateCommentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createComment($video: ID!, $content: String!) {
      createComment(video: $video, content: $content) {
        __typename
        _id
        user {
          __typename
          _id
          avatar
          username
        }
        video
        content
        likeCount
        liked
        deleted
        createdAt
        updatedAt
      }
    }
    """

  public let operationName = "createComment"

  public var video: GraphQLID
  public var content: String

  public init(video: GraphQLID, content: String) {
    self.video = video
    self.content = content
  }

  public var variables: GraphQLMap? {
    return ["video": video, "content": content]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createComment", arguments: ["video": GraphQLVariable("video"), "content": GraphQLVariable("content")], type: .object(CreateComment.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createComment: CreateComment? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createComment": createComment.flatMap { (value: CreateComment) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建评论
    public var createComment: CreateComment? {
      get {
        return (resultMap["createComment"] as? ResultMap).flatMap { CreateComment(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createComment")
      }
    }

    public struct CreateComment: GraphQLSelectionSet {
      public static let possibleTypes = ["comment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("video", type: .scalar(GraphQLID.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, user: User? = nil, video: GraphQLID? = nil, content: String? = nil, likeCount: Int? = nil, liked: Bool? = nil, deleted: Bool? = nil, createdAt: Double? = nil, updatedAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "comment", "_id": _id, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "video": video, "content": content, "likeCount": likeCount, "liked": liked, "deleted": deleted, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 用户名
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频id
      public var video: GraphQLID? {
        get {
          return resultMap["video"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 评论内容
      public var content: String? {
        get {
          return resultMap["content"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 点赞数量
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 是否点赞了
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 创建日期
      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }
      }
    }
  }
}

public final class CreateFuturePaymentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createFuturePayment($apiVersion: String!) {
      createFuturePayment(apiVersion: $apiVersion) {
        __typename
        customer
        ephemeralKey {
          __typename
          secret
        }
        setupIntentId
        setupIntentClientSecret
      }
    }
    """

  public let operationName = "createFuturePayment"

  public var apiVersion: String

  public init(apiVersion: String) {
    self.apiVersion = apiVersion
  }

  public var variables: GraphQLMap? {
    return ["apiVersion": apiVersion]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createFuturePayment", arguments: ["apiVersion": GraphQLVariable("apiVersion")], type: .object(CreateFuturePayment.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createFuturePayment: CreateFuturePayment? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createFuturePayment": createFuturePayment.flatMap { (value: CreateFuturePayment) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建未来支付请求
    public var createFuturePayment: CreateFuturePayment? {
      get {
        return (resultMap["createFuturePayment"] as? ResultMap).flatMap { CreateFuturePayment(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createFuturePayment")
      }
    }

    public struct CreateFuturePayment: GraphQLSelectionSet {
      public static let possibleTypes = ["createFuturePayment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("customer", type: .scalar(String.self)),
        GraphQLField("ephemeralKey", type: .object(EphemeralKey.selections)),
        GraphQLField("setupIntentId", type: .scalar(String.self)),
        GraphQLField("setupIntentClientSecret", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(customer: String? = nil, ephemeralKey: EphemeralKey? = nil, setupIntentId: String? = nil, setupIntentClientSecret: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "createFuturePayment", "customer": customer, "ephemeralKey": ephemeralKey.flatMap { (value: EphemeralKey) -> ResultMap in value.resultMap }, "setupIntentId": setupIntentId, "setupIntentClientSecret": setupIntentClientSecret])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var customer: String? {
        get {
          return resultMap["customer"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "customer")
        }
      }

      public var ephemeralKey: EphemeralKey? {
        get {
          return (resultMap["ephemeralKey"] as? ResultMap).flatMap { EphemeralKey(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "ephemeralKey")
        }
      }

      public var setupIntentId: String? {
        get {
          return resultMap["setupIntentId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "setupIntentId")
        }
      }

      public var setupIntentClientSecret: String? {
        get {
          return resultMap["setupIntentClientSecret"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "setupIntentClientSecret")
        }
      }

      public struct EphemeralKey: GraphQLSelectionSet {
        public static let possibleTypes = ["getEphemeralKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("secret", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(secret: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "getEphemeralKey", "secret": secret])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// The key's secret. You can use this value to make authorized requests to the Stripe API.
        public var secret: String? {
          get {
            return resultMap["secret"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "secret")
          }
        }
      }
    }
  }
}

public final class CreateIvsChanelMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createIvsChanel($liveId: ID!) {
      createIVSChannel(liveId: $liveId) {
        __typename
        rtmpsUrl
        chatroomId
      }
    }
    """

  public let operationName = "createIvsChanel"

  public var liveId: GraphQLID

  public init(liveId: GraphQLID) {
    self.liveId = liveId
  }

  public var variables: GraphQLMap? {
    return ["liveId": liveId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createIVSChannel", arguments: ["liveId": GraphQLVariable("liveId")], type: .object(CreateIvsChannel.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createIvsChannel: CreateIvsChannel? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createIVSChannel": createIvsChannel.flatMap { (value: CreateIvsChannel) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建直播推流CDN
    public var createIvsChannel: CreateIvsChannel? {
      get {
        return (resultMap["createIVSChannel"] as? ResultMap).flatMap { CreateIvsChannel(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createIVSChannel")
      }
    }

    public struct CreateIvsChannel: GraphQLSelectionSet {
      public static let possibleTypes = ["createIVSChannel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("rtmpsUrl", type: .nonNull(.scalar(String.self))),
        GraphQLField("chatroomId", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(rtmpsUrl: String, chatroomId: String) {
        self.init(unsafeResultMap: ["__typename": "createIVSChannel", "rtmpsUrl": rtmpsUrl, "chatroomId": chatroomId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// aws ivs CDN的推流地址
      public var rtmpsUrl: String {
        get {
          return resultMap["rtmpsUrl"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "rtmpsUrl")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String {
        get {
          return resultMap["chatroomId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }
    }
  }
}

public final class CreateKeywordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createKeyword($name: String!) {
      createKeyword(name: $name) {
        __typename
        _id
        name
        viewCount
        recommend
        deleted
      }
    }
    """

  public let operationName = "createKeyword"

  public var name: String

  public init(name: String) {
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createKeyword", arguments: ["name": GraphQLVariable("name")], type: .object(CreateKeyword.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createKeyword: CreateKeyword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createKeyword": createKeyword.flatMap { (value: CreateKeyword) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建关键词
    public var createKeyword: CreateKeyword? {
      get {
        return (resultMap["createKeyword"] as? ResultMap).flatMap { CreateKeyword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createKeyword")
      }
    }

    public struct CreateKeyword: GraphQLSelectionSet {
      public static let possibleTypes = ["keyword"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("recommend", type: .scalar(Int.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, viewCount: Int, recommend: Int? = nil, deleted: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "keyword", "_id": _id, "name": name, "viewCount": viewCount, "recommend": recommend, "deleted": deleted])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 被搜索的次数
      public var viewCount: Int {
        get {
          return resultMap["viewCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 推荐
      @available(*, deprecated, message: "不需要此字段")
      public var recommend: Int? {
        get {
          return resultMap["recommend"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "recommend")
        }
      }

      /// 是否被删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }
    }
  }
}

public final class CreateOrderMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createOrder($live: ID!, $shippingAddressId: ID!, $products: [OrderProductInput!]!) {
      createOrder(live: $live, shippingAddressId: $shippingAddressId, products: $products) {
        __typename
        _id
        orderCode
        taxTotalPrice
        shippingTotalPrice
        discountTotalPrice
        status
        paidPrice
        paidAt
        deliverStartAt
        deliverEndAt
        fulfilledAt
      }
    }
    """

  public let operationName = "createOrder"

  public var live: GraphQLID
  public var shippingAddressId: GraphQLID
  public var products: [OrderProductInput]

  public init(live: GraphQLID, shippingAddressId: GraphQLID, products: [OrderProductInput]) {
    self.live = live
    self.shippingAddressId = shippingAddressId
    self.products = products
  }

  public var variables: GraphQLMap? {
    return ["live": live, "shippingAddressId": shippingAddressId, "products": products]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createOrder", arguments: ["live": GraphQLVariable("live"), "shippingAddressId": GraphQLVariable("shippingAddressId"), "products": GraphQLVariable("products")], type: .object(CreateOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createOrder: CreateOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createOrder": createOrder.flatMap { (value: CreateOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端创建订单
    public var createOrder: CreateOrder? {
      get {
        return (resultMap["createOrder"] as? ResultMap).flatMap { CreateOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createOrder")
      }
    }

    public struct CreateOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["order"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("orderCode", type: .scalar(String.self)),
        GraphQLField("taxTotalPrice", type: .scalar(Int.self)),
        GraphQLField("shippingTotalPrice", type: .scalar(Int.self)),
        GraphQLField("discountTotalPrice", type: .scalar(Int.self)),
        GraphQLField("status", type: .scalar(OrderStatus.self)),
        GraphQLField("paidPrice", type: .scalar(Int.self)),
        GraphQLField("paidAt", type: .scalar(Double.self)),
        GraphQLField("deliverStartAt", type: .scalar(Double.self)),
        GraphQLField("deliverEndAt", type: .scalar(Double.self)),
        GraphQLField("fulfilledAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, orderCode: String? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, discountTotalPrice: Int? = nil, status: OrderStatus? = nil, paidPrice: Int? = nil, paidAt: Double? = nil, deliverStartAt: Double? = nil, deliverEndAt: Double? = nil, fulfilledAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "order", "_id": _id, "orderCode": orderCode, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "discountTotalPrice": discountTotalPrice, "status": status, "paidPrice": paidPrice, "paidAt": paidAt, "deliverStartAt": deliverStartAt, "deliverEndAt": deliverEndAt, "fulfilledAt": fulfilledAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 订单编号
      public var orderCode: String? {
        get {
          return resultMap["orderCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCode")
        }
      }

      /// 税金额。订单计算页面的 Tax，单位：分
      public var taxTotalPrice: Int? {
        get {
          return resultMap["taxTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "taxTotalPrice")
        }
      }

      /// 快递费用。订单计算页面的 Shipping，单位：分
      public var shippingTotalPrice: Int? {
        get {
          return resultMap["shippingTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shippingTotalPrice")
        }
      }

      /// 优惠券折扣金额。订单计算页面的 Coupon Discount. 注意和 Discount 区分开，单位：分
      public var discountTotalPrice: Int? {
        get {
          return resultMap["discountTotalPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "discountTotalPrice")
        }
      }

      /// 订单状态
      public var status: OrderStatus? {
        get {
          return resultMap["status"] as? OrderStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 支付金额。订单计算页面的 Total，单位：分
      public var paidPrice: Int? {
        get {
          return resultMap["paidPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "paidPrice")
        }
      }

      /// 支付时间
      public var paidAt: Double? {
        get {
          return resultMap["paidAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "paidAt")
        }
      }

      /// 快递开始时间
      public var deliverStartAt: Double? {
        get {
          return resultMap["deliverStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "deliverStartAt")
        }
      }

      /// 快递结束时间
      public var deliverEndAt: Double? {
        get {
          return resultMap["deliverEndAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "deliverEndAt")
        }
      }

      /// 订单完成时间
      public var fulfilledAt: Double? {
        get {
          return resultMap["fulfilledAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "fulfilledAt")
        }
      }
    }
  }
}

public final class CreatePaymentMethodMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreatePaymentMethod($paymentMethod: PaymentMethodCreateChoice!, $isFuturePaymentMethod: Boolean) {
      createPaymentMethod(paymentMethod: $paymentMethod, isFuturePaymentMethod: $isFuturePaymentMethod) {
        __typename
        _id
        paymentMethod
        stripePaymentMethodId
        createdAt
        updateAt
      }
    }
    """

  public let operationName = "CreatePaymentMethod"

  public var paymentMethod: PaymentMethodCreateChoice
  public var isFuturePaymentMethod: Bool?

  public init(paymentMethod: PaymentMethodCreateChoice, isFuturePaymentMethod: Bool? = nil) {
    self.paymentMethod = paymentMethod
    self.isFuturePaymentMethod = isFuturePaymentMethod
  }

  public var variables: GraphQLMap? {
    return ["paymentMethod": paymentMethod, "isFuturePaymentMethod": isFuturePaymentMethod]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createPaymentMethod", arguments: ["paymentMethod": GraphQLVariable("paymentMethod"), "isFuturePaymentMethod": GraphQLVariable("isFuturePaymentMethod")], type: .object(CreatePaymentMethod.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createPaymentMethod: CreatePaymentMethod? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createPaymentMethod": createPaymentMethod.flatMap { (value: CreatePaymentMethod) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建新的支付方式
    public var createPaymentMethod: CreatePaymentMethod? {
      get {
        return (resultMap["createPaymentMethod"] as? ResultMap).flatMap { CreatePaymentMethod(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createPaymentMethod")
      }
    }

    public struct CreatePaymentMethod: GraphQLSelectionSet {
      public static let possibleTypes = ["PaymentMethodModel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("paymentMethod", type: .scalar(PaymentMethod.self)),
        GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updateAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, paymentMethod: PaymentMethod? = nil, stripePaymentMethodId: String? = nil, createdAt: Double? = nil, updateAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "PaymentMethodModel", "_id": _id, "paymentMethod": paymentMethod, "stripePaymentMethodId": stripePaymentMethodId, "createdAt": createdAt, "updateAt": updateAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 支付方式名称
      public var paymentMethod: PaymentMethod? {
        get {
          return resultMap["paymentMethod"] as? PaymentMethod
        }
        set {
          resultMap.updateValue(newValue, forKey: "paymentMethod")
        }
      }

      /// stripe 的 paymentMethodId，用于 createPayment 接口传入的 paymentMethodId
      public var stripePaymentMethodId: String? {
        get {
          return resultMap["stripePaymentMethodId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
        }
      }

      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 名字打错的字段，可替换成 updatedAt
      @available(*, deprecated, message: "Use `updatedAt` instead")
      public var updateAt: Double? {
        get {
          return resultMap["updateAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updateAt")
        }
      }
    }
  }
}

public final class CreatePaymentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreatePayment($order: ID!, $paymentMethod: PaymentMethod!, $paymentMethodId: String!, $source: PaymentSource) {
      createPayment(order: $order, paymentMethod: $paymentMethod, paymentMethodId: $paymentMethodId, source: $source) {
        __typename
        _id
        paymentIntentsId
        paymentIntentsClientSecret
        status
      }
    }
    """

  public let operationName = "CreatePayment"

  public var order: GraphQLID
  public var paymentMethod: PaymentMethod
  public var paymentMethodId: String
  public var source: PaymentSource?

  public init(order: GraphQLID, paymentMethod: PaymentMethod, paymentMethodId: String, source: PaymentSource? = nil) {
    self.order = order
    self.paymentMethod = paymentMethod
    self.paymentMethodId = paymentMethodId
    self.source = source
  }

  public var variables: GraphQLMap? {
    return ["order": order, "paymentMethod": paymentMethod, "paymentMethodId": paymentMethodId, "source": source]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createPayment", arguments: ["order": GraphQLVariable("order"), "paymentMethod": GraphQLVariable("paymentMethod"), "paymentMethodId": GraphQLVariable("paymentMethodId"), "source": GraphQLVariable("source")], type: .object(CreatePayment.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createPayment: CreatePayment? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createPayment": createPayment.flatMap { (value: CreatePayment) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建支付请求
    public var createPayment: CreatePayment? {
      get {
        return (resultMap["createPayment"] as? ResultMap).flatMap { CreatePayment(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createPayment")
      }
    }

    public struct CreatePayment: GraphQLSelectionSet {
      public static let possibleTypes = ["createPayment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("paymentIntentsId", type: .scalar(String.self)),
        GraphQLField("paymentIntentsClientSecret", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(PaymentStatus.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, paymentIntentsId: String? = nil, paymentIntentsClientSecret: String? = nil, status: PaymentStatus? = nil) {
        self.init(unsafeResultMap: ["__typename": "createPayment", "_id": _id, "paymentIntentsId": paymentIntentsId, "paymentIntentsClientSecret": paymentIntentsClientSecret, "status": status])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      public var paymentIntentsId: String? {
        get {
          return resultMap["paymentIntentsId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "paymentIntentsId")
        }
      }

      public var paymentIntentsClientSecret: String? {
        get {
          return resultMap["paymentIntentsClientSecret"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "paymentIntentsClientSecret")
        }
      }

      public var status: PaymentStatus? {
        get {
          return resultMap["status"] as? PaymentStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }
    }
  }
}

public final class CreateTicketOrderMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreateTicketOrder($tickets: [OrderTicketsInput!]!, $holders: [TicketHolderInput!]!, $contactPhoneNumber: String) {
      createTicketOrder(tickets: $tickets, holders: $holders, contactPhoneNumber: $contactPhoneNumber) {
        __typename
        _id
        orderCode
        status
      }
    }
    """

  public let operationName = "CreateTicketOrder"

  public var tickets: [OrderTicketsInput]
  public var holders: [TicketHolderInput]
  public var contactPhoneNumber: String?

  public init(tickets: [OrderTicketsInput], holders: [TicketHolderInput], contactPhoneNumber: String? = nil) {
    self.tickets = tickets
    self.holders = holders
    self.contactPhoneNumber = contactPhoneNumber
  }

  public var variables: GraphQLMap? {
    return ["tickets": tickets, "holders": holders, "contactPhoneNumber": contactPhoneNumber]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createTicketOrder", arguments: ["tickets": GraphQLVariable("tickets"), "holders": GraphQLVariable("holders"), "contactPhoneNumber": GraphQLVariable("contactPhoneNumber")], type: .object(CreateTicketOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createTicketOrder: CreateTicketOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createTicketOrder": createTicketOrder.flatMap { (value: CreateTicketOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    public var createTicketOrder: CreateTicketOrder? {
      get {
        return (resultMap["createTicketOrder"] as? ResultMap).flatMap { CreateTicketOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createTicketOrder")
      }
    }

    public struct CreateTicketOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["TicketOrder"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("orderCode", type: .nonNull(.scalar(String.self))),
        GraphQLField("status", type: .nonNull(.scalar(TicketOrderStatus.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, orderCode: String, status: TicketOrderStatus) {
        self.init(unsafeResultMap: ["__typename": "TicketOrder", "_id": _id, "orderCode": orderCode, "status": status])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 订单编号
      public var orderCode: String {
        get {
          return resultMap["orderCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCode")
        }
      }

      /// 订单状态
      public var status: TicketOrderStatus {
        get {
          return resultMap["status"]! as! TicketOrderStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }
    }
  }
}

public final class CreateUserCouponMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createUserCoupon($coupon: ID!) {
      createUserCoupon(coupon: $coupon) {
        __typename
        _id
        coupon {
          __typename
          _id
          quantity
        }
        discountType
        value
        used
        usedAt
        createdAt
        deleted
      }
    }
    """

  public let operationName = "createUserCoupon"

  public var coupon: GraphQLID

  public init(coupon: GraphQLID) {
    self.coupon = coupon
  }

  public var variables: GraphQLMap? {
    return ["coupon": coupon]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUserCoupon", arguments: ["coupon": GraphQLVariable("coupon")], type: .object(CreateUserCoupon.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createUserCoupon: CreateUserCoupon? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createUserCoupon": createUserCoupon.flatMap { (value: CreateUserCoupon) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建用户优惠劵
    public var createUserCoupon: CreateUserCoupon? {
      get {
        return (resultMap["createUserCoupon"] as? ResultMap).flatMap { CreateUserCoupon(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createUserCoupon")
      }
    }

    public struct CreateUserCoupon: GraphQLSelectionSet {
      public static let possibleTypes = ["userCoupon"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coupon", type: .object(Coupon.selections)),
        GraphQLField("discountType", type: .scalar(enum__discountType.self)),
        GraphQLField("value", type: .scalar(Int.self)),
        GraphQLField("used", type: .scalar(Bool.self)),
        GraphQLField("usedAt", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coupon: Coupon? = nil, discountType: enum__discountType? = nil, value: Int? = nil, used: Bool? = nil, usedAt: String? = nil, createdAt: Double? = nil, deleted: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "userCoupon", "_id": _id, "coupon": coupon.flatMap { (value: Coupon) -> ResultMap in value.resultMap }, "discountType": discountType, "value": value, "used": used, "usedAt": usedAt, "createdAt": createdAt, "deleted": deleted])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      public var coupon: Coupon? {
        get {
          return (resultMap["coupon"] as? ResultMap).flatMap { Coupon(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "coupon")
        }
      }

      /// 优惠券类型
      public var discountType: enum__discountType? {
        get {
          return resultMap["discountType"] as? enum__discountType
        }
        set {
          resultMap.updateValue(newValue, forKey: "discountType")
        }
      }

      /// 折扣数值，百分比折扣则为百分比数值，按金额折扣则为金额数值
      public var value: Int? {
        get {
          return resultMap["value"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      /// 是否已使用，true 表示已使用
      public var used: Bool? {
        get {
          return resultMap["used"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "used")
        }
      }

      /// 使用时间
      public var usedAt: String? {
        get {
          return resultMap["usedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "usedAt")
        }
      }

      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      public struct Coupon: GraphQLSelectionSet {
        public static let possibleTypes = ["userCoupon_coupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "userCoupon_coupon", "_id": _id, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }
      }
    }
  }
}

public final class DeleteAddressMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation deleteAddress($_id: ID!) {
      deleteAddress(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "deleteAddress"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteAddress", arguments: ["_id": GraphQLVariable("_id")], type: .object(DeleteAddress.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteAddress: DeleteAddress? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteAddress": deleteAddress.flatMap { (value: DeleteAddress) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 删除address
    public var deleteAddress: DeleteAddress? {
      get {
        return (resultMap["deleteAddress"] as? ResultMap).flatMap { DeleteAddress(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "deleteAddress")
      }
    }

    public struct DeleteAddress: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class DeleteCardMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation deleteCard($_id: ID!) {
      deleteCard(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "deleteCard"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteCard", arguments: ["_id": GraphQLVariable("_id")], type: .object(DeleteCard.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteCard: DeleteCard? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteCard": deleteCard.flatMap { (value: DeleteCard) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 删除card
    public var deleteCard: DeleteCard? {
      get {
        return (resultMap["deleteCard"] as? ResultMap).flatMap { DeleteCard(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "deleteCard")
      }
    }

    public struct DeleteCard: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class DeletePaymentMethodMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation deletePaymentMethod($_ids: [ID!]!) {
      deletePaymentMethod(_ids: $_ids) {
        __typename
        success
      }
    }
    """

  public let operationName = "deletePaymentMethod"

  public var _ids: [GraphQLID]

  public init(_ids: [GraphQLID]) {
    self._ids = _ids
  }

  public var variables: GraphQLMap? {
    return ["_ids": _ids]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deletePaymentMethod", arguments: ["_ids": GraphQLVariable("_ids")], type: .object(DeletePaymentMethod.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deletePaymentMethod: DeletePaymentMethod? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deletePaymentMethod": deletePaymentMethod.flatMap { (value: DeletePaymentMethod) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 批量删除支付方式
    public var deletePaymentMethod: DeletePaymentMethod? {
      get {
        return (resultMap["deletePaymentMethod"] as? ResultMap).flatMap { DeletePaymentMethod(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "deletePaymentMethod")
      }
    }

    public struct DeletePaymentMethod: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AlgorithmFindVideosQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query algorithmFindVideos($page: Int, $pageSize: Int, $moduleName: algorithmFindVideos_mudelNames!) {
      algorithmFindVideos(page: $page, pageSize: $pageSize, moduleName: $moduleName) {
        __typename
        _id
        coverImage
        teaserTitle
        video
        viewCount
        describe
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        updatedAt
        shareLink
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          avatar
          username
          followed
          role
        }
        videoType
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
    }
    """

  public let operationName = "algorithmFindVideos"

  public var page: Int?
  public var pageSize: Int?
  public var moduleName: algorithmFindVideos_mudelNames

  public init(page: Int? = nil, pageSize: Int? = nil, moduleName: algorithmFindVideos_mudelNames) {
    self.page = page
    self.pageSize = pageSize
    self.moduleName = moduleName
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "moduleName": moduleName]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("algorithmFindVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "moduleName": GraphQLVariable("moduleName")], type: .list(.object(AlgorithmFindVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(algorithmFindVideos: [AlgorithmFindVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "algorithmFindVideos": algorithmFindVideos.flatMap { (value: [AlgorithmFindVideo?]) -> [ResultMap?] in value.map { (value: AlgorithmFindVideo?) -> ResultMap? in value.flatMap { (value: AlgorithmFindVideo) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端根据页面模块查询短视频列表
    public var algorithmFindVideos: [AlgorithmFindVideo?]? {
      get {
        return (resultMap["algorithmFindVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindVideo?] in value.map { (value: ResultMap?) -> AlgorithmFindVideo? in value.flatMap { (value: ResultMap) -> AlgorithmFindVideo in AlgorithmFindVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindVideo?]) -> [ResultMap?] in value.map { (value: AlgorithmFindVideo?) -> ResultMap? in value.flatMap { (value: AlgorithmFindVideo) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindVideos")
      }
    }

    public struct AlgorithmFindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, shareLink: String? = nil, music: Music? = nil, user: User? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "describe": describe, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "shareLink": shareLink, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }
  }
}

public final class AppBatchCreateLiveProductsMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppBatchCreateLiveProducts($products: [ID!]!, $live: ID) {
      appBatchCreateLiveProducts(products: $products, live: $live) {
        __typename
        _id
        name
        description
        images {
          __typename
          image
          key
        }
        regularPrice
        livePrice
        variants {
          __typename
          _id
          name
          quantity
          shopifyProductVariantId
        }
        status
        productType
        isFreeShipping
        shippingInfo {
          __typename
          companyName
          method
          price
        }
        shopifyProductId
      }
    }
    """

  public let operationName = "AppBatchCreateLiveProducts"

  public var products: [GraphQLID]
  public var live: GraphQLID?

  public init(products: [GraphQLID], live: GraphQLID? = nil) {
    self.products = products
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["products": products, "live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appBatchCreateLiveProducts", arguments: ["products": GraphQLVariable("products"), "live": GraphQLVariable("live")], type: .list(.object(AppBatchCreateLiveProduct.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appBatchCreateLiveProducts: [AppBatchCreateLiveProduct?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appBatchCreateLiveProducts": appBatchCreateLiveProducts.flatMap { (value: [AppBatchCreateLiveProduct?]) -> [ResultMap?] in value.map { (value: AppBatchCreateLiveProduct?) -> ResultMap? in value.flatMap { (value: AppBatchCreateLiveProduct) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 开带货 live 前从 Store Products 中选取商品创建 Live Products，此接口可多次重复请求。
    /// 
    /// 为简化 app 端交互，不提供主动删除已创建的 Live Products 接口，每次重新传入 Store Products 时，
    /// 后端做一次 diff 操作，删去不需要的 products，创建新选取的 products。
    /// 
    /// 此接口返回结果是本次 diff 后新创建的商品，而不是所有商品。如果用于展示，请勿依赖此接口返回结果
    public var appBatchCreateLiveProducts: [AppBatchCreateLiveProduct?]? {
      get {
        return (resultMap["appBatchCreateLiveProducts"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AppBatchCreateLiveProduct?] in value.map { (value: ResultMap?) -> AppBatchCreateLiveProduct? in value.flatMap { (value: ResultMap) -> AppBatchCreateLiveProduct in AppBatchCreateLiveProduct(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AppBatchCreateLiveProduct?]) -> [ResultMap?] in value.map { (value: AppBatchCreateLiveProduct?) -> ResultMap? in value.flatMap { (value: AppBatchCreateLiveProduct) -> ResultMap in value.resultMap } } }, forKey: "appBatchCreateLiveProducts")
      }
    }

    public struct AppBatchCreateLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["LiveProduct"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        GraphQLField("shopifyProductId", type: .scalar(GraphQLID.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, shopifyProductId: GraphQLID? = nil) {
        self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "status": status, "productType": productType, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "shopifyProductId": shopifyProductId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      /// 通过shopify创建的商品id
      public var shopifyProductId: GraphQLID? {
        get {
          return resultMap["shopifyProductId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "shopifyProductId")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("shopifyProductVariantId", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil, shopifyProductVariantId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity, "shopifyProductVariantId": shopifyProductVariantId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        /// 关联的 shopify product.variants.id
        public var shopifyProductVariantId: String? {
          get {
            return resultMap["shopifyProductVariantId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shopifyProductVariantId")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }
    }
  }
}

public final class AppBlockUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation appBlockUser($blockUser: ID!) {
      appBlockUser(blockUser: $blockUser) {
        __typename
        success
      }
    }
    """

  public let operationName = "appBlockUser"

  public var blockUser: GraphQLID

  public init(blockUser: GraphQLID) {
    self.blockUser = blockUser
  }

  public var variables: GraphQLMap? {
    return ["blockUser": blockUser]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appBlockUser", arguments: ["blockUser": GraphQLVariable("blockUser")], type: .object(AppBlockUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appBlockUser: AppBlockUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appBlockUser": appBlockUser.flatMap { (value: AppBlockUser) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 用户 A 拉黑用户 B。拉黑后双向屏蔽内容和点赞，并解除 Follow 关系
    public var appBlockUser: AppBlockUser? {
      get {
        return (resultMap["appBlockUser"] as? ResultMap).flatMap { AppBlockUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appBlockUser")
      }
    }

    public struct AppBlockUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppChangePhoneNumberMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation appChangePhoneNumber($verifyPhoneToken: String!, $changePhoneToken: String!, $newPhoneNumber: String!) {
      appChangePhoneNumber(verifyPhoneToken: $verifyPhoneToken, changePhoneToken: $changePhoneToken, newPhoneNumber: $newPhoneNumber) {
        __typename
        success
      }
    }
    """

  public let operationName = "appChangePhoneNumber"

  public var verifyPhoneToken: String
  public var changePhoneToken: String
  public var newPhoneNumber: String

  public init(verifyPhoneToken: String, changePhoneToken: String, newPhoneNumber: String) {
    self.verifyPhoneToken = verifyPhoneToken
    self.changePhoneToken = changePhoneToken
    self.newPhoneNumber = newPhoneNumber
  }

  public var variables: GraphQLMap? {
    return ["verifyPhoneToken": verifyPhoneToken, "changePhoneToken": changePhoneToken, "newPhoneNumber": newPhoneNumber]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appChangePhoneNumber", arguments: ["verifyPhoneToken": GraphQLVariable("verifyPhoneToken"), "changePhoneToken": GraphQLVariable("changePhoneToken"), "newPhoneNumber": GraphQLVariable("newPhoneNumber")], type: .object(AppChangePhoneNumber.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appChangePhoneNumber: AppChangePhoneNumber? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appChangePhoneNumber": appChangePhoneNumber.flatMap { (value: AppChangePhoneNumber) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 修改手机号。修改手机号前需要验证现有手机号，故此接口需要验证旧手机的 token 和验证新手机的 token
    public var appChangePhoneNumber: AppChangePhoneNumber? {
      get {
        return (resultMap["appChangePhoneNumber"] as? ResultMap).flatMap { AppChangePhoneNumber(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appChangePhoneNumber")
      }
    }

    public struct AppChangePhoneNumber: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppCreateLiveProductMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppCreateLiveProduct($productType: enum__productType!, $name: String!, $images: [String]!, $regularPrice: Int, $livePrice: Int, $variants: [VariantInput!], $isFreeShipping: Boolean, $shippingInfo: ShippingInfoInput, $live: ID, $description: String, $auctionPrice: Int, $auctionSetting: AuctionSettingInput) {
      appCreateLiveProduct(productType: $productType, name: $name, images: $images, regularPrice: $regularPrice, livePrice: $livePrice, variants: $variants, isFreeShipping: $isFreeShipping, shippingInfo: $shippingInfo, live: $live, description: $description, auctionPrice: $auctionPrice, auctionSetting: $auctionSetting) {
        __typename
        _id
        name
        description
        images {
          __typename
          image
          key
        }
        regularPrice
        livePrice
        variants {
          __typename
          _id
          name
          quantity
          shopifyProductVariantId
        }
        status
        productType
        isFreeShipping
        shippingInfo {
          __typename
          companyName
          method
          price
        }
        edited
        product {
          __typename
          _id
          variants {
            __typename
            _id
            quantity
          }
        }
        stock
        shopifyProductId
        auctionPrice
        auctionSetting {
          __typename
          duration
          extendTime
          auctionStartedAt
        }
        auctionStatus
      }
    }
    """

  public let operationName = "AppCreateLiveProduct"

  public var productType: enum__productType
  public var name: String
  public var images: [String?]
  public var regularPrice: Int?
  public var livePrice: Int?
  public var variants: [VariantInput]?
  public var isFreeShipping: Bool?
  public var shippingInfo: ShippingInfoInput?
  public var live: GraphQLID?
  public var description: String?
  public var auctionPrice: Int?
  public var auctionSetting: AuctionSettingInput?

  public init(productType: enum__productType, name: String, images: [String?], regularPrice: Int? = nil, livePrice: Int? = nil, variants: [VariantInput]?, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfoInput? = nil, live: GraphQLID? = nil, description: String? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSettingInput? = nil) {
    self.productType = productType
    self.name = name
    self.images = images
    self.regularPrice = regularPrice
    self.livePrice = livePrice
    self.variants = variants
    self.isFreeShipping = isFreeShipping
    self.shippingInfo = shippingInfo
    self.live = live
    self.description = description
    self.auctionPrice = auctionPrice
    self.auctionSetting = auctionSetting
  }

  public var variables: GraphQLMap? {
    return ["productType": productType, "name": name, "images": images, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo, "live": live, "description": description, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appCreateLiveProduct", arguments: ["productType": GraphQLVariable("productType"), "name": GraphQLVariable("name"), "images": GraphQLVariable("images"), "regularPrice": GraphQLVariable("regularPrice"), "livePrice": GraphQLVariable("livePrice"), "variants": GraphQLVariable("variants"), "isFreeShipping": GraphQLVariable("isFreeShipping"), "shippingInfo": GraphQLVariable("shippingInfo"), "live": GraphQLVariable("live"), "description": GraphQLVariable("description"), "auctionPrice": GraphQLVariable("auctionPrice"), "auctionSetting": GraphQLVariable("auctionSetting")], type: .object(AppCreateLiveProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appCreateLiveProduct: AppCreateLiveProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appCreateLiveProduct": appCreateLiveProduct.flatMap { (value: AppCreateLiveProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端创建直播商品
    public var appCreateLiveProduct: AppCreateLiveProduct? {
      get {
        return (resultMap["appCreateLiveProduct"] as? ResultMap).flatMap { AppCreateLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appCreateLiveProduct")
      }
    }

    public struct AppCreateLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["LiveProduct"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        GraphQLField("edited", type: .scalar(Bool.self)),
        GraphQLField("product", type: .object(Product.selections)),
        GraphQLField("stock", type: .scalar(Int.self)),
        GraphQLField("shopifyProductId", type: .scalar(GraphQLID.self)),
        GraphQLField("auctionPrice", type: .scalar(Int.self)),
        GraphQLField("auctionSetting", type: .object(AuctionSetting.selections)),
        GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, edited: Bool? = nil, product: Product? = nil, stock: Int? = nil, shopifyProductId: GraphQLID? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSetting? = nil, auctionStatus: AuctionStatus? = nil) {
        self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "status": status, "productType": productType, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "edited": edited, "product": product.flatMap { (value: Product) -> ResultMap in value.resultMap }, "stock": stock, "shopifyProductId": shopifyProductId, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting.flatMap { (value: AuctionSetting) -> ResultMap in value.resultMap }, "auctionStatus": auctionStatus])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      /// 从小店商品 Product 同步过来时，是否已编辑过。
      /// 
      /// 调用 appCreateLiveProduct 创建的商品和调用过 appUpdateLiveProduct 修改的商品，都会被标记为已编辑过。
      /// 
      /// appBatchCreateLiveProducts 接口每次都会清空原直播商品编辑临时数据，重新创建直播商品。但标记已编辑过的商品，如果在调用
      /// appBatchCreateLiveProducts 时在参数里将 id 传过来了，则不会重新创建，会保留原编辑的信息。
      public var edited: Bool? {
        get {
          return resultMap["edited"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "edited")
        }
      }

      /// 关联的小店商品
      public var product: Product? {
        get {
          return (resultMap["product"] as? ResultMap).flatMap { Product(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "product")
        }
      }

      /// 商品总数量。是 variants 中各种款式商品数量总和
      public var stock: Int? {
        get {
          return resultMap["stock"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "stock")
        }
      }

      /// 通过shopify创建的商品id
      public var shopifyProductId: GraphQLID? {
        get {
          return resultMap["shopifyProductId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "shopifyProductId")
        }
      }

      /// 拍卖价格, productType == AUCTION 时有
      public var auctionPrice: Int? {
        get {
          return resultMap["auctionPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionPrice")
        }
      }

      /// 拍卖配置信息, productType == AUCTION 时有
      public var auctionSetting: AuctionSetting? {
        get {
          return (resultMap["auctionSetting"] as? ResultMap).flatMap { AuctionSetting(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "auctionSetting")
        }
      }

      /// 拍卖状态, productType == AUCTION 时有
      public var auctionStatus: AuctionStatus? {
        get {
          return resultMap["auctionStatus"] as? AuctionStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "auctionStatus")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("shopifyProductVariantId", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil, shopifyProductVariantId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity, "shopifyProductVariantId": shopifyProductVariantId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        /// 关联的 shopify product.variants.id
        public var shopifyProductVariantId: String? {
          get {
            return resultMap["shopifyProductVariantId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shopifyProductVariantId")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["Product"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(String.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: String? = nil, variants: [Variant?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: String? {
          get {
            return resultMap["_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }

      public struct AuctionSetting: GraphQLSelectionSet {
        public static let possibleTypes = ["AuctionSetting"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("duration", type: .scalar(Int.self)),
          GraphQLField("extendTime", type: .scalar(Int.self)),
          GraphQLField("auctionStartedAt", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(duration: Int? = nil, extendTime: Int? = nil, auctionStartedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AuctionSetting", "duration": duration, "extendTime": extendTime, "auctionStartedAt": auctionStartedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 初始拍卖时长，单位：秒
        public var duration: Int? {
          get {
            return resultMap["duration"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "duration")
          }
        }

        /// 每次延长拍卖时，延长的时间，单位：秒
        public var extendTime: Int? {
          get {
            return resultMap["extendTime"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "extendTime")
          }
        }

        /// 开始拍卖时间, productType == AUCTION 时且已经开始拍卖时有
        public var auctionStartedAt: String? {
          get {
            return resultMap["auctionStartedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStartedAt")
          }
        }
      }
    }
  }
}

public final class AppDeleteLiveProductMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppDeleteLiveProduct($_id: ID!) {
      appDeleteLiveProduct(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppDeleteLiveProduct"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appDeleteLiveProduct", arguments: ["_id": GraphQLVariable("_id")], type: .object(AppDeleteLiveProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appDeleteLiveProduct: AppDeleteLiveProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appDeleteLiveProduct": appDeleteLiveProduct.flatMap { (value: AppDeleteLiveProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端删除直播商品（仅能在直播前删除商品，直播中及直播后商品无法删除）
    public var appDeleteLiveProduct: AppDeleteLiveProduct? {
      get {
        return (resultMap["appDeleteLiveProduct"] as? ResultMap).flatMap { AppDeleteLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appDeleteLiveProduct")
      }
    }

    public struct AppDeleteLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppFindProductQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appFindProduct($_id: ID!) {
      appFindProduct(_id: $_id) {
        __typename
        _id
        name
        description
        images {
          __typename
          image
          key
        }
        stock
        regularPrice
        livePrice
        variants {
          __typename
          _id
          name
          quantity
        }
        status
        isFreeShipping
        productType
        shippingInfo {
          __typename
          companyName
          method
          price
        }
      }
    }
    """

  public let operationName = "appFindProduct"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appFindProduct", arguments: ["_id": GraphQLVariable("_id")], type: .object(AppFindProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appFindProduct: AppFindProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appFindProduct": appFindProduct.flatMap { (value: AppFindProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端查询商品详情
    public var appFindProduct: AppFindProduct? {
      get {
        return (resultMap["appFindProduct"] as? ResultMap).flatMap { AppFindProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appFindProduct")
      }
    }

    public struct AppFindProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["Product"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("stock", type: .scalar(Int.self)),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, status: enum__productStatus? = nil, isFreeShipping: Bool? = nil, productType: enum__productType? = nil, shippingInfo: ShippingInfo? = nil) {
        self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "status": status, "isFreeShipping": isFreeShipping, "productType": productType, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
      public var stock: Int? {
        get {
          return resultMap["stock"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "stock")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }
    }
  }
}

public final class AppGetVersionQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appGetVersion {
      appGetVersion {
        __typename
        _id
        newBuild
        minBuild
        updateTitle
        updateDescription
        url
        target
      }
    }
    """

  public let operationName = "appGetVersion"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appGetVersion", type: .object(AppGetVersion.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appGetVersion: AppGetVersion? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appGetVersion": appGetVersion.flatMap { (value: AppGetVersion) -> ResultMap in value.resultMap }])
    }

    /// 客户端查询 app 版本升级信息
    public var appGetVersion: AppGetVersion? {
      get {
        return (resultMap["appGetVersion"] as? ResultMap).flatMap { AppGetVersion(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appGetVersion")
      }
    }

    public struct AppGetVersion: GraphQLSelectionSet {
      public static let possibleTypes = ["Version"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("newBuild", type: .scalar(String.self)),
        GraphQLField("minBuild", type: .scalar(String.self)),
        GraphQLField("updateTitle", type: .scalar(String.self)),
        GraphQLField("updateDescription", type: .scalar(String.self)),
        GraphQLField("url", type: .scalar(String.self)),
        GraphQLField("target", type: .scalar(VersionTarget.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, newBuild: String? = nil, minBuild: String? = nil, updateTitle: String? = nil, updateDescription: String? = nil, url: String? = nil, target: VersionTarget? = nil) {
        self.init(unsafeResultMap: ["__typename": "Version", "_id": _id, "newBuild": newBuild, "minBuild": minBuild, "updateTitle": updateTitle, "updateDescription": updateDescription, "url": url, "target": target])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 最新 build 号(客户端根据 build 号而不是版本号来比较是否需要提示升级)
      public var newBuild: String? {
        get {
          return resultMap["newBuild"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "newBuild")
        }
      }

      /// 最低可用 build 号
      public var minBuild: String? {
        get {
          return resultMap["minBuild"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "minBuild")
        }
      }

      /// 更新提示标题
      public var updateTitle: String? {
        get {
          return resultMap["updateTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updateTitle")
        }
      }

      /// 更新提示内容
      public var updateDescription: String? {
        get {
          return resultMap["updateDescription"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updateDescription")
        }
      }

      /// IOS: App Store 地址
      /// ANDROID: Apk 下载地址
      /// USER_AGREEMENT: 用户协议地址
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }

      /// version 更新提示对象
      public var target: VersionTarget? {
        get {
          return resultMap["target"] as? VersionTarget
        }
        set {
          resultMap.updateValue(newValue, forKey: "target")
        }
      }
    }
  }
}

public final class AppListLiveProductsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query AppListLiveProducts($live: ID!, $page: Int, $pageSize: Int) {
      appListLiveProducts(live: $live, page: $page, pageSize: $pageSize) {
        __typename
        totalCount
        edges {
          __typename
          _id
          name
          description
          images {
            __typename
            image
            key
          }
          stock
          labels
          regularPrice
          livePrice
          variants {
            __typename
            _id
            name
            quantity
            shopifyProductVariantId
          }
          status
          productType
          isFreeShipping
          shippingInfo {
            __typename
            companyName
            method
            price
          }
          shopifyProductId
          auctionPrice
          auctionSetting {
            __typename
            duration
            extendTime
            auctionStartedAt
          }
          auctionStatus
          auctionBidInfo {
            __typename
            productId
            auctionStatus
            endBidTime
            extendBidTime
            latestBidPrice
            recommendBidPrice
            bidsCount
            latestBidder {
              __typename
              _id
              avatar
              username
              name
              uid
              role
              userType
              phoneNumber
              email
            }
          }
        }
        pageInfo {
          __typename
          hashNextPage
        }
      }
    }
    """

  public let operationName = "AppListLiveProducts"

  public var live: GraphQLID
  public var page: Int?
  public var pageSize: Int?

  public init(live: GraphQLID, page: Int? = nil, pageSize: Int? = nil) {
    self.live = live
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["live": live, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListLiveProducts", arguments: ["live": GraphQLVariable("live"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(AppListLiveProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListLiveProducts: AppListLiveProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListLiveProducts": appListLiveProducts.flatMap { (value: AppListLiveProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端查询直播商品列表。开播后主播端和用户端要查询商品列表，可以从这个接口获取. 此接口商品顺序同 live 的 products 属性排序，主播和用户看到的一样
    public var appListLiveProducts: AppListLiveProduct? {
      get {
        return (resultMap["appListLiveProducts"] as? ResultMap).flatMap { AppListLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListLiveProducts")
      }
    }

    public struct AppListLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["listLiveProductsResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("totalCount", type: .scalar(Int.self)),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int? = nil, edges: [Edge?]? = nil, pageInfo: PageInfo? = nil) {
        self.init(unsafeResultMap: ["__typename": "listLiveProductsResponse", "totalCount": totalCount, "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("stock", type: .scalar(Int.self)),
          GraphQLField("labels", type: .list(.scalar(String.self))),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("status", type: .scalar(enum__productStatus.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
          GraphQLField("shopifyProductId", type: .scalar(GraphQLID.self)),
          GraphQLField("auctionPrice", type: .scalar(Int.self)),
          GraphQLField("auctionSetting", type: .object(AuctionSetting.selections)),
          GraphQLField("auctionStatus", type: .scalar(AuctionStatus.self)),
          GraphQLField("auctionBidInfo", type: .object(AuctionBidInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, labels: [String?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, shopifyProductId: GraphQLID? = nil, auctionPrice: Int? = nil, auctionSetting: AuctionSetting? = nil, auctionStatus: AuctionStatus? = nil, auctionBidInfo: AuctionBidInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "LiveProduct", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "labels": labels, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "status": status, "productType": productType, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "shopifyProductId": shopifyProductId, "auctionPrice": auctionPrice, "auctionSetting": auctionSetting.flatMap { (value: AuctionSetting) -> ResultMap in value.resultMap }, "auctionStatus": auctionStatus, "auctionBidInfo": auctionBidInfo.flatMap { (value: AuctionBidInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品总数量。是 variants 中各种款式商品数量总和
        public var stock: Int? {
          get {
            return resultMap["stock"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 商品 label，拍卖商品 UI 上需要一些字段展示商品属性，如“颜色”、“尺码”等，同时这些属性不关联库存，所以和 variant 不是一个概念。此属性当前是拍卖商品专属。
        public var labels: [String?]? {
          get {
            return resultMap["labels"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "labels")
          }
        }

        /// 常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
        public var status: enum__productStatus? {
          get {
            return resultMap["status"] as? enum__productStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 运输/快递
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        /// 通过shopify创建的商品id
        public var shopifyProductId: GraphQLID? {
          get {
            return resultMap["shopifyProductId"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "shopifyProductId")
          }
        }

        /// 拍卖价格, productType == AUCTION 时有
        public var auctionPrice: Int? {
          get {
            return resultMap["auctionPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionPrice")
          }
        }

        /// 拍卖配置信息, productType == AUCTION 时有
        public var auctionSetting: AuctionSetting? {
          get {
            return (resultMap["auctionSetting"] as? ResultMap).flatMap { AuctionSetting(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionSetting")
          }
        }

        /// 拍卖状态, productType == AUCTION 时有
        public var auctionStatus: AuctionStatus? {
          get {
            return resultMap["auctionStatus"] as? AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStatus")
          }
        }

        /// 拍卖出价信息, productType == AUCTION 时且已经开始拍卖时有
        public var auctionBidInfo: AuctionBidInfo? {
          get {
            return (resultMap["auctionBidInfo"] as? ResultMap).flatMap { AuctionBidInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionBidInfo")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
            GraphQLField("shopifyProductVariantId", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil, shopifyProductVariantId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity, "shopifyProductVariantId": shopifyProductVariantId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          /// 关联的 shopify product.variants.id
          public var shopifyProductVariantId: String? {
            get {
              return resultMap["shopifyProductVariantId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shopifyProductVariantId")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["ShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
            GraphQLField("price", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 运输公司名称
          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          /// 运输方式
          public var method: enum__shippingMethod? {
            get {
              return resultMap["method"] as? enum__shippingMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }

          /// 价格
          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }
        }

        public struct AuctionSetting: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionSetting"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("duration", type: .scalar(Int.self)),
            GraphQLField("extendTime", type: .scalar(Int.self)),
            GraphQLField("auctionStartedAt", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(duration: Int? = nil, extendTime: Int? = nil, auctionStartedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionSetting", "duration": duration, "extendTime": extendTime, "auctionStartedAt": auctionStartedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 初始拍卖时长，单位：秒
          public var duration: Int? {
            get {
              return resultMap["duration"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 每次延长拍卖时，延长的时间，单位：秒
          public var extendTime: Int? {
            get {
              return resultMap["extendTime"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "extendTime")
            }
          }

          /// 开始拍卖时间, productType == AUCTION 时且已经开始拍卖时有
          public var auctionStartedAt: String? {
            get {
              return resultMap["auctionStartedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStartedAt")
            }
          }
        }

        public struct AuctionBidInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionBidInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("productId", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("auctionStatus", type: .nonNull(.scalar(AuctionStatus.self))),
            GraphQLField("endBidTime", type: .nonNull(.scalar(String.self))),
            GraphQLField("extendBidTime", type: .scalar(Int.self)),
            GraphQLField("latestBidPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("recommendBidPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("bidsCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("latestBidder", type: .object(LatestBidder.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(productId: GraphQLID, auctionStatus: AuctionStatus, endBidTime: String, extendBidTime: Int? = nil, latestBidPrice: Int, recommendBidPrice: Int, bidsCount: Int, latestBidder: LatestBidder? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionBidInfo", "productId": productId, "auctionStatus": auctionStatus, "endBidTime": endBidTime, "extendBidTime": extendBidTime, "latestBidPrice": latestBidPrice, "recommendBidPrice": recommendBidPrice, "bidsCount": bidsCount, "latestBidder": latestBidder.flatMap { (value: LatestBidder) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 商品 id
          public var productId: GraphQLID {
            get {
              return resultMap["productId"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "productId")
            }
          }

          /// 当前拍卖状态
          public var auctionStatus: AuctionStatus {
            get {
              return resultMap["auctionStatus"]! as! AuctionStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "auctionStatus")
            }
          }

          /// 当前出价结束时间
          public var endBidTime: String {
            get {
              return resultMap["endBidTime"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "endBidTime")
            }
          }

          /// 延长出价时间，单位：秒。此字段有值时，表示出价时间延长 {extendBidTime} 秒；为 null 时，表示无延长时间逻辑，即客户端不需要做处理
          public var extendBidTime: Int? {
            get {
              return resultMap["extendBidTime"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "extendBidTime")
            }
          }

          /// 最新出价
          public var latestBidPrice: Int {
            get {
              return resultMap["latestBidPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "latestBidPrice")
            }
          }

          /// 建议出价
          public var recommendBidPrice: Int {
            get {
              return resultMap["recommendBidPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "recommendBidPrice")
            }
          }

          /// 出价次数
          public var bidsCount: Int {
            get {
              return resultMap["bidsCount"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "bidsCount")
            }
          }

          /// 最新出价用户信息
          public var latestBidder: LatestBidder? {
            get {
              return (resultMap["latestBidder"] as? ResultMap).flatMap { LatestBidder(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "latestBidder")
            }
          }

          public struct LatestBidder: GraphQLSelectionSet {
            public static let possibleTypes = ["SimpleUser"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("uid", type: .scalar(String.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
              GraphQLField("userType", type: .scalar(enum__userType.self)),
              GraphQLField("phoneNumber", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil, role: enum__userRole? = nil, userType: enum__userType? = nil, phoneNumber: String? = nil, email: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid, "role": role, "userType": userType, "phoneNumber": phoneNumber, "email": email])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 用户名字
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }

            /// 用户类型
            public var userType: enum__userType? {
              get {
                return resultMap["userType"] as? enum__userType
              }
              set {
                resultMap.updateValue(newValue, forKey: "userType")
              }
            }

            /// 手机号
            public var phoneNumber: String? {
              get {
                return resultMap["phoneNumber"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "phoneNumber")
              }
            }

            /// 邮箱
            public var email: String? {
              get {
                return resultMap["email"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "email")
              }
            }
          }
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }
    }
  }
}

public final class AppMusicsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appMusics($page: Int, $pageSize: Int) {
      appMusics(page: $page, pageSize: $pageSize) {
        __typename
        _id
        title
        artist
        assets {
          __typename
          s_15: _15 {
            __typename
            _id
            music
          }
          s_30: _30 {
            __typename
            _id
            music
          }
          s_90: _90 {
            __typename
            _id
            music
          }
          s_300: _300 {
            __typename
            _id
            music
          }
        }
      }
    }
    """

  public let operationName = "appMusics"

  public var page: Int?
  public var pageSize: Int?

  public init(page: Int? = nil, pageSize: Int? = nil) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appMusics", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .list(.object(AppMusic.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appMusics: [AppMusic?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appMusics": appMusics.flatMap { (value: [AppMusic?]) -> [ResultMap?] in value.map { (value: AppMusic?) -> ResultMap? in value.flatMap { (value: AppMusic) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端查询短视频配乐列表
    public var appMusics: [AppMusic?]? {
      get {
        return (resultMap["appMusics"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AppMusic?] in value.map { (value: ResultMap?) -> AppMusic? in value.flatMap { (value: ResultMap) -> AppMusic in AppMusic(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AppMusic?]) -> [ResultMap?] in value.map { (value: AppMusic?) -> ResultMap? in value.flatMap { (value: AppMusic) -> ResultMap in value.resultMap } } }, forKey: "appMusics")
      }
    }

    public struct AppMusic: GraphQLSelectionSet {
      public static let possibleTypes = ["music"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("artist", type: .scalar(String.self)),
        GraphQLField("assets", type: .object(Asset.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, title: String? = nil, artist: String? = nil, assets: Asset? = nil) {
        self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title, "artist": artist, "assets": assets.flatMap { (value: Asset) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 音乐标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// 艺术家
      public var artist: String? {
        get {
          return resultMap["artist"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "artist")
        }
      }

      /// 音乐文件
      public var assets: Asset? {
        get {
          return (resultMap["assets"] as? ResultMap).flatMap { Asset(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "assets")
        }
      }

      public struct Asset: GraphQLSelectionSet {
        public static let possibleTypes = ["musicFile"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_15", alias: "s_15", type: .object(S_15.selections)),
          GraphQLField("_30", alias: "s_30", type: .object(S_30.selections)),
          GraphQLField("_90", alias: "s_90", type: .object(S_90.selections)),
          GraphQLField("_300", alias: "s_300", type: .object(S_300.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(s_15: S_15? = nil, s_30: S_30? = nil, s_90: S_90? = nil, s_300: S_300? = nil) {
          self.init(unsafeResultMap: ["__typename": "musicFile", "s_15": s_15.flatMap { (value: S_15) -> ResultMap in value.resultMap }, "s_30": s_30.flatMap { (value: S_30) -> ResultMap in value.resultMap }, "s_90": s_90.flatMap { (value: S_90) -> ResultMap in value.resultMap }, "s_300": s_300.flatMap { (value: S_300) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 15 秒的音乐。graphql field 格式允许下划线和字母开头，不允许数字字符开头，故加上下划线
        public var s_15: S_15? {
          get {
            return (resultMap["s_15"] as? ResultMap).flatMap { S_15(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "s_15")
          }
        }

        /// 30 秒的音乐
        public var s_30: S_30? {
          get {
            return (resultMap["s_30"] as? ResultMap).flatMap { S_30(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "s_30")
          }
        }

        /// 90 秒的音乐
        public var s_90: S_90? {
          get {
            return (resultMap["s_90"] as? ResultMap).flatMap { S_90(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "s_90")
          }
        }

        /// 300 秒的音乐
        public var s_300: S_300? {
          get {
            return (resultMap["s_300"] as? ResultMap).flatMap { S_300(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "s_300")
          }
        }

        public struct S_15: GraphQLSelectionSet {
          public static let possibleTypes = ["musicAsset"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("music", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, music: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "musicAsset", "_id": _id, "music": music])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// asset id, 注意和 music id 区分，两者不是一个概念
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 音乐文件链接
          public var music: String? {
            get {
              return resultMap["music"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "music")
            }
          }
        }

        public struct S_30: GraphQLSelectionSet {
          public static let possibleTypes = ["musicAsset"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("music", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, music: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "musicAsset", "_id": _id, "music": music])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// asset id, 注意和 music id 区分，两者不是一个概念
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 音乐文件链接
          public var music: String? {
            get {
              return resultMap["music"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "music")
            }
          }
        }

        public struct S_90: GraphQLSelectionSet {
          public static let possibleTypes = ["musicAsset"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("music", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, music: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "musicAsset", "_id": _id, "music": music])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// asset id, 注意和 music id 区分，两者不是一个概念
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 音乐文件链接
          public var music: String? {
            get {
              return resultMap["music"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "music")
            }
          }
        }

        public struct S_300: GraphQLSelectionSet {
          public static let possibleTypes = ["musicAsset"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("music", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, music: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "musicAsset", "_id": _id, "music": music])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// asset id, 注意和 music id 区分，两者不是一个概念
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 音乐文件链接
          public var music: String? {
            get {
              return resultMap["music"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "music")
            }
          }
        }
      }
    }
  }
}

public final class AppUnblockUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation appUnblockUser($unblockUser: ID!) {
      appUnblockUser(unblockUser: $unblockUser) {
        __typename
        success
      }
    }
    """

  public let operationName = "appUnblockUser"

  public var unblockUser: GraphQLID

  public init(unblockUser: GraphQLID) {
    self.unblockUser = unblockUser
  }

  public var variables: GraphQLMap? {
    return ["unblockUser": unblockUser]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appUnblockUser", arguments: ["unblockUser": GraphQLVariable("unblockUser")], type: .object(AppUnblockUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appUnblockUser: AppUnblockUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appUnblockUser": appUnblockUser.flatMap { (value: AppUnblockUser) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 用户 A 取消拉黑用户 B。取消拉黑后如之前存在 Follow 关系，则会还原
    public var appUnblockUser: AppUnblockUser? {
      get {
        return (resultMap["appUnblockUser"] as? ResultMap).flatMap { AppUnblockUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appUnblockUser")
      }
    }

    public struct AppUnblockUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class AppUpdateLiveProductMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation AppUpdateLiveProduct($id: ID!, $update: AppUpdateLiveProductInput!) {
      appUpdateLiveProduct(_id: $id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "AppUpdateLiveProduct"

  public var id: GraphQLID
  public var update: AppUpdateLiveProductInput

  public init(id: GraphQLID, update: AppUpdateLiveProductInput) {
    self.id = id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["id": id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appUpdateLiveProduct", arguments: ["_id": GraphQLVariable("id"), "update": GraphQLVariable("update")], type: .object(AppUpdateLiveProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appUpdateLiveProduct: AppUpdateLiveProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "appUpdateLiveProduct": appUpdateLiveProduct.flatMap { (value: AppUpdateLiveProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端更新直播商品
    public var appUpdateLiveProduct: AppUpdateLiveProduct? {
      get {
        return (resultMap["appUpdateLiveProduct"] as? ResultMap).flatMap { AppUpdateLiveProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appUpdateLiveProduct")
      }
    }

    public struct AppUpdateLiveProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class CheckPhoneNumberQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query checkPhoneNumber($phoneNumber: String!) {
      checkPhoneNumber(phoneNumber: $phoneNumber) {
        __typename
        phoneNumberDuplicate
      }
    }
    """

  public let operationName = "checkPhoneNumber"

  public var phoneNumber: String

  public init(phoneNumber: String) {
    self.phoneNumber = phoneNumber
  }

  public var variables: GraphQLMap? {
    return ["phoneNumber": phoneNumber]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("checkPhoneNumber", arguments: ["phoneNumber": GraphQLVariable("phoneNumber")], type: .object(CheckPhoneNumber.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(checkPhoneNumber: CheckPhoneNumber? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "checkPhoneNumber": checkPhoneNumber.flatMap { (value: CheckPhoneNumber) -> ResultMap in value.resultMap }])
    }

    /// 查询手机号是否已注册
    public var checkPhoneNumber: CheckPhoneNumber? {
      get {
        return (resultMap["checkPhoneNumber"] as? ResultMap).flatMap { CheckPhoneNumber(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "checkPhoneNumber")
      }
    }

    public struct CheckPhoneNumber: GraphQLSelectionSet {
      public static let possibleTypes = ["checkPhoneNumber"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("phoneNumberDuplicate", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(phoneNumberDuplicate: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "checkPhoneNumber", "phoneNumberDuplicate": phoneNumberDuplicate])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var phoneNumberDuplicate: Bool? {
        get {
          return resultMap["phoneNumberDuplicate"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumberDuplicate")
        }
      }
    }
  }
}

public final class CheckUsernameQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query checkUsername($name: String!) {
      checkUsername(username: $name) {
        __typename
        usernameDuplicate
      }
    }
    """

  public let operationName = "checkUsername"

  public var name: String

  public init(name: String) {
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("checkUsername", arguments: ["username": GraphQLVariable("name")], type: .object(CheckUsername.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(checkUsername: CheckUsername? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "checkUsername": checkUsername.flatMap { (value: CheckUsername) -> ResultMap in value.resultMap }])
    }

    /// 查询用户名是否已存在
    public var checkUsername: CheckUsername? {
      get {
        return (resultMap["checkUsername"] as? ResultMap).flatMap { CheckUsername(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "checkUsername")
      }
    }

    public struct CheckUsername: GraphQLSelectionSet {
      public static let possibleTypes = ["checkUsername"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("usernameDuplicate", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(usernameDuplicate: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "checkUsername", "usernameDuplicate": usernameDuplicate])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 是否重名
      public var usernameDuplicate: Bool? {
        get {
          return resultMap["usernameDuplicate"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "usernameDuplicate")
        }
      }
    }
  }
}

public final class CreateClientLogMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreateClientLog($fileKey: String!, $logTime: String!, $reportTime: Float!, $deviceType: enum__deviceType!) {
      createClientLog(fileKey: $fileKey, logTime: $logTime, reportTime: $reportTime, deviceType: $deviceType) {
        __typename
        _id
      }
    }
    """

  public let operationName = "CreateClientLog"

  public var fileKey: String
  public var logTime: String
  public var reportTime: Double
  public var deviceType: enum__deviceType

  public init(fileKey: String, logTime: String, reportTime: Double, deviceType: enum__deviceType) {
    self.fileKey = fileKey
    self.logTime = logTime
    self.reportTime = reportTime
    self.deviceType = deviceType
  }

  public var variables: GraphQLMap? {
    return ["fileKey": fileKey, "logTime": logTime, "reportTime": reportTime, "deviceType": deviceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createClientLog", arguments: ["fileKey": GraphQLVariable("fileKey"), "logTime": GraphQLVariable("logTime"), "reportTime": GraphQLVariable("reportTime"), "deviceType": GraphQLVariable("deviceType")], type: .object(CreateClientLog.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createClientLog: CreateClientLog? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createClientLog": createClientLog.flatMap { (value: CreateClientLog) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端上传日志时，先调用 getUploadURL 上传到 aws 对象存储，上传结束后调用此接口上报日志元信息
    public var createClientLog: CreateClientLog? {
      get {
        return (resultMap["createClientLog"] as? ResultMap).flatMap { CreateClientLog(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createClientLog")
      }
    }

    public struct CreateClientLog: GraphQLSelectionSet {
      public static let possibleTypes = ["ClientLog"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "ClientLog", "_id": _id])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }
    }
  }
}

public final class CreateCouponMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createCoupon($discountType: enum__discountType!, $value: Int!, $quantity: Int!, $live: ID) {
      createCoupon(discountType: $discountType, value: $value, quantity: $quantity, live: $live) {
        __typename
        _id
      }
    }
    """

  public let operationName = "createCoupon"

  public var discountType: enum__discountType
  public var value: Int
  public var quantity: Int
  public var live: GraphQLID?

  public init(discountType: enum__discountType, value: Int, quantity: Int, live: GraphQLID? = nil) {
    self.discountType = discountType
    self.value = value
    self.quantity = quantity
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["discountType": discountType, "value": value, "quantity": quantity, "live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createCoupon", arguments: ["discountType": GraphQLVariable("discountType"), "value": GraphQLVariable("value"), "quantity": GraphQLVariable("quantity"), "live": GraphQLVariable("live")], type: .object(CreateCoupon.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createCoupon: CreateCoupon? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createCoupon": createCoupon.flatMap { (value: CreateCoupon) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建优惠劵
    public var createCoupon: CreateCoupon? {
      get {
        return (resultMap["createCoupon"] as? ResultMap).flatMap { CreateCoupon(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createCoupon")
      }
    }

    public struct CreateCoupon: GraphQLSelectionSet {
      public static let possibleTypes = ["Coupon"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil) {
        self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }
    }
  }
}

public final class CreateLiveMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreateLive($title: String!, $coverImage: String!, $scheduleStartAt: Timestamp, $teaserVideo: ID, $coupons: [ID], $products: [ID]) {
      createLive(title: $title, coverImage: $coverImage, scheduleStartAt: $scheduleStartAt, teaserVideo: $teaserVideo, coupons: $coupons, products: $products) {
        __typename
        agoraLiveToken {
          __typename
          token
          expireAt
        }
        ivsStreamingAddress
        scheduleStartAt
        streamingStatus
        status
        _id
        chatroomId
        ivsLiveAddress
        viewCount
        newFansCount
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
        likeCount
        orderCount
        coverImage
        title
        hasShownCoupon
        collaboratingUser
        explainProduct
        coupons {
          __typename
          _id
          discountType
          value
          quantity
          receiveCount
        }
        products {
          __typename
          _id
          name
          description
          images {
            __typename
            image
            key
          }
          stock
          regularPrice
          livePrice
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
          isFreeShipping
          shippingInfo {
            __typename
            companyName
            price
            method
          }
          productType
        }
        moments {
          __typename
          video
          coverImage
        }
        shareLink
        startRecords {
          __typename
          endAt
          startAt
        }
        startAt
        endAt
      }
    }
    """

  public let operationName = "CreateLive"

  public var title: String
  public var coverImage: String
  public var scheduleStartAt: String?
  public var teaserVideo: GraphQLID?
  public var coupons: [GraphQLID?]?
  public var products: [GraphQLID?]?

  public init(title: String, coverImage: String, scheduleStartAt: String? = nil, teaserVideo: GraphQLID? = nil, coupons: [GraphQLID?]? = nil, products: [GraphQLID?]? = nil) {
    self.title = title
    self.coverImage = coverImage
    self.scheduleStartAt = scheduleStartAt
    self.teaserVideo = teaserVideo
    self.coupons = coupons
    self.products = products
  }

  public var variables: GraphQLMap? {
    return ["title": title, "coverImage": coverImage, "scheduleStartAt": scheduleStartAt, "teaserVideo": teaserVideo, "coupons": coupons, "products": products]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createLive", arguments: ["title": GraphQLVariable("title"), "coverImage": GraphQLVariable("coverImage"), "scheduleStartAt": GraphQLVariable("scheduleStartAt"), "teaserVideo": GraphQLVariable("teaserVideo"), "coupons": GraphQLVariable("coupons"), "products": GraphQLVariable("products")], type: .object(CreateLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createLive: CreateLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createLive": createLive.flatMap { (value: CreateLive) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端创建直播
    public var createLive: CreateLive? {
      get {
        return (resultMap["createLive"] as? ResultMap).flatMap { CreateLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createLive")
      }
    }

    public struct CreateLive: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("agoraLiveToken", type: .object(AgoraLiveToken.selections)),
        GraphQLField("ivsStreamingAddress", type: .scalar(String.self)),
        GraphQLField("scheduleStartAt", type: .scalar(String.self)),
        GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("orderCount", type: .scalar(Int.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("explainProduct", type: .scalar(GraphQLID.self)),
        GraphQLField("coupons", type: .list(.object(Coupon.selections))),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("moments", type: .list(.object(Moment.selections))),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("startRecords", type: .list(.object(StartRecord.selections))),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(agoraLiveToken: AgoraLiveToken? = nil, ivsStreamingAddress: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil, status: Bool? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, collaboratingUser: GraphQLID? = nil, explainProduct: GraphQLID? = nil, coupons: [Coupon?]? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil, shareLink: String? = nil, startRecords: [StartRecord?]? = nil, startAt: Double? = nil, endAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "agoraLiveToken": agoraLiveToken.flatMap { (value: AgoraLiveToken) -> ResultMap in value.resultMap }, "ivsStreamingAddress": ivsStreamingAddress, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus, "status": status, "_id": _id, "chatroomId": chatroomId, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "collaboratingUser": collaboratingUser, "explainProduct": explainProduct, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "startRecords": startRecords.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, "startAt": startAt, "endAt": endAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 声网发流使用的 token。
      /// 
      /// 请求 getLiveToken 接口后，此处的 token 会更新。请求 createLive 后，此处的 token 会自动更新。
      /// 
      /// 不同人请求拿到的 token 不一样，主播请求显示的是主播使用的 token，连麦者请求后显示的是连麦者使用的 token。如果结果为 null，需要请求 getLiveToken 获取新的 token
      public var agoraLiveToken: AgoraLiveToken? {
        get {
          return (resultMap["agoraLiveToken"] as? ResultMap).flatMap { AgoraLiveToken(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "agoraLiveToken")
        }
      }

      /// 同 rtmpsUrl. aws ivs CDN的推流地址
      public var ivsStreamingAddress: String? {
        get {
          return resultMap["ivsStreamingAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsStreamingAddress")
        }
      }

      /// live schedule 开始时间
      public var scheduleStartAt: String? {
        get {
          return resultMap["scheduleStartAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "scheduleStartAt")
        }
      }

      /// 直播状态，可替代早期的 status
      public var streamingStatus: LiveStreamingStatus? {
        get {
          return resultMap["streamingStatus"] as? LiveStreamingStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "streamingStatus")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 本场直播订单数量
      public var orderCount: Int? {
        get {
          return resultMap["orderCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCount")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
      public var hasShownCoupon: Bool? {
        get {
          return resultMap["hasShownCoupon"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasShownCoupon")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 主播正在讲解的商品
      public var explainProduct: GraphQLID? {
        get {
          return resultMap["explainProduct"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "explainProduct")
        }
      }

      /// 直播间正在派发的优惠劵
      public var coupons: [Coupon?]? {
        get {
          return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
        }
      }

      /// 直播间正在出售的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 直播片段
      public var moments: [Moment?]? {
        get {
          return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 直播开播记录
      public var startRecords: [StartRecord?]? {
        get {
          return (resultMap["startRecords"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [StartRecord?] in value.map { (value: ResultMap?) -> StartRecord? in value.flatMap { (value: ResultMap) -> StartRecord in StartRecord(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [StartRecord?]) -> [ResultMap?] in value.map { (value: StartRecord?) -> ResultMap? in value.flatMap { (value: StartRecord) -> ResultMap in value.resultMap } } }, forKey: "startRecords")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      public struct AgoraLiveToken: GraphQLSelectionSet {
        public static let possibleTypes = ["AgoraLiveToken"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("expireAt", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(token: String? = nil, expireAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "AgoraLiveToken", "token": token, "expireAt": expireAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        public var expireAt: String? {
          get {
            return resultMap["expireAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "expireAt")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct Coupon: GraphQLSelectionSet {
        public static let possibleTypes = ["Coupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("discountType", type: .scalar(enum__discountType.self)),
          GraphQLField("value", type: .scalar(Int.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("receiveCount", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var discountType: enum__discountType? {
          get {
            return resultMap["discountType"] as? enum__discountType
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountType")
          }
        }

        public var value: Int? {
          get {
            return resultMap["value"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        public var receiveCount: Int? {
          get {
            return resultMap["receiveCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "receiveCount")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["Product"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("stock", type: .scalar(Int.self)),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, productType: enum__productType? = nil) {
          self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "productType": productType])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: String? {
          get {
            return resultMap["_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
        public var stock: Int? {
          get {
            return resultMap["stock"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 运输/快递
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["ShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
            GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, price: Int? = nil, method: enum__shippingMethod? = nil) {
            self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "price": price, "method": method])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 运输公司名称
          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          /// 价格
          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }

          /// 运输方式
          public var method: enum__shippingMethod? {
            get {
              return resultMap["method"] as? enum__shippingMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }
        }
      }

      public struct Moment: GraphQLSelectionSet {
        public static let possibleTypes = ["moment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("video", type: .scalar(String.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(video: String? = nil, coverImage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 视频
        public var video: String? {
          get {
            return resultMap["video"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// 封面
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }
      }

      public struct StartRecord: GraphQLSelectionSet {
        public static let possibleTypes = ["LiveStartRecord"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("endAt", type: .scalar(String.self)),
          GraphQLField("startAt", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(endAt: String? = nil, startAt: String) {
          self.init(unsafeResultMap: ["__typename": "LiveStartRecord", "endAt": endAt, "startAt": startAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 本次结束 live 的时间
        public var endAt: String? {
          get {
            return resultMap["endAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endAt")
          }
        }

        /// 本次开始 live 的时间
        public var startAt: String {
          get {
            return resultMap["startAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "startAt")
          }
        }
      }
    }
  }
}

public final class CreateProductMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createProduct($name: String!, $description: String!, $images: [String]!, $variants: [VariantInput!]!, $regularPrice: Int!, $livePrice: Int, $isFreeShipping: Boolean, $displayInStore: Boolean, $shippingInfo: ShippingInfoInput, $productType: enum__productType!, $live: ID) {
      createProduct(name: $name, description: $description, images: $images, variants: $variants, regularPrice: $regularPrice, livePrice: $livePrice, isFreeShipping: $isFreeShipping, displayInStore: $displayInStore, shippingInfo: $shippingInfo, productType: $productType, live: $live) {
        __typename
        _id
        name
        description
        images {
          __typename
          image
          key
        }
        regularPrice
        livePrice
        variants {
          __typename
          _id
          name
          sku
          quantity
        }
        liveHost {
          __typename
          _id
          avatar
          deviceType
        }
        status
        productType
        isFreeShipping
        shippingInfo {
          __typename
          companyName
          method
          price
        }
        stock
        displayInStore
      }
    }
    """

  public let operationName = "createProduct"

  public var name: String
  public var description: String
  public var images: [String?]
  public var variants: [VariantInput]
  public var regularPrice: Int
  public var livePrice: Int?
  public var isFreeShipping: Bool?
  public var displayInStore: Bool?
  public var shippingInfo: ShippingInfoInput?
  public var productType: enum__productType
  public var live: GraphQLID?

  public init(name: String, description: String, images: [String?], variants: [VariantInput], regularPrice: Int, livePrice: Int? = nil, isFreeShipping: Bool? = nil, displayInStore: Bool? = nil, shippingInfo: ShippingInfoInput? = nil, productType: enum__productType, live: GraphQLID? = nil) {
    self.name = name
    self.description = description
    self.images = images
    self.variants = variants
    self.regularPrice = regularPrice
    self.livePrice = livePrice
    self.isFreeShipping = isFreeShipping
    self.displayInStore = displayInStore
    self.shippingInfo = shippingInfo
    self.productType = productType
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["name": name, "description": description, "images": images, "variants": variants, "regularPrice": regularPrice, "livePrice": livePrice, "isFreeShipping": isFreeShipping, "displayInStore": displayInStore, "shippingInfo": shippingInfo, "productType": productType, "live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createProduct", arguments: ["name": GraphQLVariable("name"), "description": GraphQLVariable("description"), "images": GraphQLVariable("images"), "variants": GraphQLVariable("variants"), "regularPrice": GraphQLVariable("regularPrice"), "livePrice": GraphQLVariable("livePrice"), "isFreeShipping": GraphQLVariable("isFreeShipping"), "displayInStore": GraphQLVariable("displayInStore"), "shippingInfo": GraphQLVariable("shippingInfo"), "productType": GraphQLVariable("productType"), "live": GraphQLVariable("live")], type: .object(CreateProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createProduct: CreateProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createProduct": createProduct.flatMap { (value: CreateProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建产品
    public var createProduct: CreateProduct? {
      get {
        return (resultMap["createProduct"] as? ResultMap).flatMap { CreateProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createProduct")
      }
    }

    public struct CreateProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["Product"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("liveHost", type: .object(LiveHost.selections)),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        GraphQLField("stock", type: .scalar(Int.self)),
        GraphQLField("displayInStore", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, liveHost: LiveHost? = nil, status: enum__productStatus? = nil, productType: enum__productType? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil, stock: Int? = nil, displayInStore: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "liveHost": liveHost.flatMap { (value: LiveHost) -> ResultMap in value.resultMap }, "status": status, "productType": productType, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "stock": stock, "displayInStore": displayInStore])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 带货主播
      public var liveHost: LiveHost? {
        get {
          return (resultMap["liveHost"] as? ResultMap).flatMap { LiveHost(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "liveHost")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
      public var stock: Int? {
        get {
          return resultMap["stock"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "stock")
        }
      }

      /// ***【接口权限: 卖家, 卖家子账号】***
      /// 是否展示在 store 里，true 表示展示，false 不展示
      public var displayInStore: Bool? {
        get {
          return resultMap["displayInStore"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "displayInStore")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("sku", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// sku number
        public var sku: String? {
          get {
            return resultMap["sku"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sku")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }
      }

      public struct LiveHost: GraphQLSelectionSet {
        public static let possibleTypes = ["user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, deviceType: enum__deviceType? = nil) {
          self.init(unsafeResultMap: ["__typename": "user", "_id": _id, "avatar": avatar, "deviceType": deviceType])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 设备类型
        public var deviceType: enum__deviceType? {
          get {
            return resultMap["deviceType"] as? enum__deviceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceType")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }
    }
  }
}

public final class CreateReportMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation CreateReport($type: reportType!, $objectId: ID!, $objectModel: reportObjectModel!, $content: String, $chatroomCommentContent: String) {
      createReport(type: $type, objectId: $objectId, objectModel: $objectModel, content: $content, chatroomCommentContent: $chatroomCommentContent) {
        __typename
        success
      }
    }
    """

  public let operationName = "CreateReport"

  public var type: reportType
  public var objectId: GraphQLID
  public var objectModel: reportObjectModel
  public var content: String?
  public var chatroomCommentContent: String?

  public init(type: reportType, objectId: GraphQLID, objectModel: reportObjectModel, content: String? = nil, chatroomCommentContent: String? = nil) {
    self.type = type
    self.objectId = objectId
    self.objectModel = objectModel
    self.content = content
    self.chatroomCommentContent = chatroomCommentContent
  }

  public var variables: GraphQLMap? {
    return ["type": type, "objectId": objectId, "objectModel": objectModel, "content": content, "chatroomCommentContent": chatroomCommentContent]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createReport", arguments: ["type": GraphQLVariable("type"), "objectId": GraphQLVariable("objectId"), "objectModel": GraphQLVariable("objectModel"), "content": GraphQLVariable("content"), "chatroomCommentContent": GraphQLVariable("chatroomCommentContent")], type: .object(CreateReport.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createReport: CreateReport? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createReport": createReport.flatMap { (value: CreateReport) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端创建举报
    public var createReport: CreateReport? {
      get {
        return (resultMap["createReport"] as? ResultMap).flatMap { CreateReport(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createReport")
      }
    }

    public struct CreateReport: GraphQLSelectionSet {
      public static let possibleTypes = ["createReport"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "createReport", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class CreateVideoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation createVideo($coverImage: String!, $video: String!, $duration: Float!, $describe: String!, $music: ID, $watch: enumWatch, $allowComment: Boolean, $interests: [ID], $placeId: String, $videoType: VideoTypeUserCreate, $live: ID) {
      createVideo(coverImage: $coverImage, video: $video, duration: $duration, describe: $describe, music: $music, watch: $watch, allowComment: $allowComment, interests: $interests, placeId: $placeId, videoType: $videoType, live: $live) {
        __typename
        _id
      }
    }
    """

  public let operationName = "createVideo"

  public var coverImage: String
  public var video: String
  public var duration: Double
  public var describe: String
  public var music: GraphQLID?
  public var watch: enumWatch?
  public var allowComment: Bool?
  public var interests: [GraphQLID?]?
  public var placeId: String?
  public var videoType: VideoTypeUserCreate?
  public var live: GraphQLID?

  public init(coverImage: String, video: String, duration: Double, describe: String, music: GraphQLID? = nil, watch: enumWatch? = nil, allowComment: Bool? = nil, interests: [GraphQLID?]? = nil, placeId: String? = nil, videoType: VideoTypeUserCreate? = nil, live: GraphQLID? = nil) {
    self.coverImage = coverImage
    self.video = video
    self.duration = duration
    self.describe = describe
    self.music = music
    self.watch = watch
    self.allowComment = allowComment
    self.interests = interests
    self.placeId = placeId
    self.videoType = videoType
    self.live = live
  }

  public var variables: GraphQLMap? {
    return ["coverImage": coverImage, "video": video, "duration": duration, "describe": describe, "music": music, "watch": watch, "allowComment": allowComment, "interests": interests, "placeId": placeId, "videoType": videoType, "live": live]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createVideo", arguments: ["coverImage": GraphQLVariable("coverImage"), "video": GraphQLVariable("video"), "duration": GraphQLVariable("duration"), "describe": GraphQLVariable("describe"), "music": GraphQLVariable("music"), "watch": GraphQLVariable("watch"), "allowComment": GraphQLVariable("allowComment"), "interests": GraphQLVariable("interests"), "placeId": GraphQLVariable("placeId"), "videoType": GraphQLVariable("videoType"), "live": GraphQLVariable("live")], type: .object(CreateVideo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createVideo: CreateVideo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createVideo": createVideo.flatMap { (value: CreateVideo) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 创建视频
    public var createVideo: CreateVideo? {
      get {
        return (resultMap["createVideo"] as? ResultMap).flatMap { CreateVideo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createVideo")
      }
    }

    public struct CreateVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }
    }
  }
}

public final class EndLiveQueryQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query endLiveQuery($_id: ID, $userID: ID) {
      appFindLive(_id: $_id) {
        __typename
        status
      }
      findUsers(_id: $userID) {
        __typename
        followed
      }
    }
    """

  public let operationName = "endLiveQuery"

  public var _id: GraphQLID?
  public var userID: GraphQLID?

  public init(_id: GraphQLID? = nil, userID: GraphQLID? = nil) {
    self._id = _id
    self.userID = userID
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "userID": userID]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appFindLive", arguments: ["_id": GraphQLVariable("_id")], type: .object(AppFindLive.selections)),
      GraphQLField("findUsers", arguments: ["_id": GraphQLVariable("userID")], type: .list(.object(FindUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appFindLive: AppFindLive? = nil, findUsers: [FindUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appFindLive": appFindLive.flatMap { (value: AppFindLive) -> ResultMap in value.resultMap }, "findUsers": findUsers.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }])
    }

    /// 客户端查询 live 详情
    public var appFindLive: AppFindLive? {
      get {
        return (resultMap["appFindLive"] as? ResultMap).flatMap { AppFindLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appFindLive")
      }
    }

    /// 查询用户
    public var findUsers: [FindUser?]? {
      get {
        return (resultMap["findUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindUser?] in value.map { (value: ResultMap?) -> FindUser? in value.flatMap { (value: ResultMap) -> FindUser in FindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, forKey: "findUsers")
      }
    }

    public struct AppFindLive: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("status", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(status: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "status": status])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("followed", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(followed: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "followed": followed])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }
    }
  }
}

public final class FindFollowUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findFollowUsers($page: Int, $pageSize: Int, $users: [ID], $followUsers: [ID], $status: Boolean) {
      findFollowUsers(page: $page, pageSize: $pageSize, users: $users, followUsers: $followUsers, status: $status) {
        __typename
        _id
        status
        deleted
        user {
          __typename
          _id
          avatar
          username
          name
          bio
          followed
        }
        followUser {
          __typename
          _id
          avatar
          username
          name
          bio
          followed
        }
      }
    }
    """

  public let operationName = "findFollowUsers"

  public var page: Int?
  public var pageSize: Int?
  public var users: [GraphQLID?]?
  public var followUsers: [GraphQLID?]?
  public var status: Bool?

  public init(page: Int? = nil, pageSize: Int? = nil, users: [GraphQLID?]? = nil, followUsers: [GraphQLID?]? = nil, status: Bool? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.users = users
    self.followUsers = followUsers
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "users": users, "followUsers": followUsers, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findFollowUsers", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "users": GraphQLVariable("users"), "followUsers": GraphQLVariable("followUsers"), "status": GraphQLVariable("status")], type: .list(.object(FindFollowUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findFollowUsers: [FindFollowUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findFollowUsers": findFollowUsers.flatMap { (value: [FindFollowUser?]) -> [ResultMap?] in value.map { (value: FindFollowUser?) -> ResultMap? in value.flatMap { (value: FindFollowUser) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询 follower 或 following
    public var findFollowUsers: [FindFollowUser?]? {
      get {
        return (resultMap["findFollowUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindFollowUser?] in value.map { (value: ResultMap?) -> FindFollowUser? in value.flatMap { (value: ResultMap) -> FindFollowUser in FindFollowUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindFollowUser?]) -> [ResultMap?] in value.map { (value: FindFollowUser?) -> ResultMap? in value.flatMap { (value: FindFollowUser) -> ResultMap in value.resultMap } } }, forKey: "findFollowUsers")
      }
    }

    public struct FindFollowUser: GraphQLSelectionSet {
      public static let possibleTypes = ["findFollowUsers"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("followUser", type: .object(FollowUser.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, status: Bool? = nil, deleted: Bool? = nil, user: User? = nil, followUser: FollowUser? = nil) {
        self.init(unsafeResultMap: ["__typename": "findFollowUsers", "_id": _id, "status": status, "deleted": deleted, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "followUser": followUser.flatMap { (value: FollowUser) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 是否关注的状态
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 是否删除
      @available(*, deprecated, message: "废弃参数")
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 用户关注的用户
      public var followUser: FollowUser? {
        get {
          return (resultMap["followUser"] as? ResultMap).flatMap { FollowUser(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "followUser")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("bio", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, bio: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "name": name, "bio": bio, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 用户名字
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 个人简历
        public var bio: String? {
          get {
            return resultMap["bio"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bio")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct FollowUser: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("bio", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, bio: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "name": name, "bio": bio, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 用户名字
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 个人简历
        public var bio: String? {
          get {
            return resultMap["bio"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bio")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }
    }
  }
}

public final class FindHashtagsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findHashtags($page: Int, $pageSize: Int, $interest: ID, $name: String) {
      findHashtags(page: $page, pageSize: $pageSize, name: $name, interest: $interest) {
        __typename
        _id
        name
        userCount
        viewCount
      }
    }
    """

  public let operationName = "findHashtags"

  public var page: Int?
  public var pageSize: Int?
  public var interest: GraphQLID?
  public var name: String?

  public init(page: Int? = nil, pageSize: Int? = nil, interest: GraphQLID? = nil, name: String? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.interest = interest
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "interest": interest, "name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findHashtags", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "name": GraphQLVariable("name"), "interest": GraphQLVariable("interest")], type: .list(.object(FindHashtag.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findHashtags: [FindHashtag?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findHashtags": findHashtags.flatMap { (value: [FindHashtag?]) -> [ResultMap?] in value.map { (value: FindHashtag?) -> ResultMap? in value.flatMap { (value: FindHashtag) -> ResultMap in value.resultMap } } }])
    }

    /// 根据 Interest 查询话题：传入 Interest id 或 name，返回 Interest 下的 hashtags
    public var findHashtags: [FindHashtag?]? {
      get {
        return (resultMap["findHashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindHashtag?] in value.map { (value: ResultMap?) -> FindHashtag? in value.flatMap { (value: ResultMap) -> FindHashtag in FindHashtag(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindHashtag?]) -> [ResultMap?] in value.map { (value: FindHashtag?) -> ResultMap? in value.flatMap { (value: FindHashtag) -> ResultMap in value.resultMap } } }, forKey: "findHashtags")
      }
    }

    public struct FindHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["Hashtag"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("userCount", type: .scalar(Int.self)),
        GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, userCount: Int? = nil, viewCount: Int) {
        self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "viewCount": viewCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// name
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 关注该话题的用户数
      public var userCount: Int? {
        get {
          return resultMap["userCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "userCount")
        }
      }

      /// 带此 hashtag 的 video 浏览次数总和
      public var viewCount: Int {
        get {
          return resultMap["viewCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }
    }
  }
}

public final class FindInterestsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findInterests {
      findInterests {
        __typename
        _id
        userCount
        name
        priority
        followed
      }
    }
    """

  public let operationName = "findInterests"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findInterests", type: .list(.object(FindInterest.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findInterests: [FindInterest?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findInterests": findInterests.flatMap { (value: [FindInterest?]) -> [ResultMap?] in value.map { (value: FindInterest?) -> ResultMap? in value.flatMap { (value: FindInterest) -> ResultMap in value.resultMap } } }])
    }

    /// 查询所有兴趣：
    public var findInterests: [FindInterest?]? {
      get {
        return (resultMap["findInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindInterest?] in value.map { (value: ResultMap?) -> FindInterest? in value.flatMap { (value: ResultMap) -> FindInterest in FindInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindInterest?]) -> [ResultMap?] in value.map { (value: FindInterest?) -> ResultMap? in value.flatMap { (value: FindInterest) -> ResultMap in value.resultMap } } }, forKey: "findInterests")
      }
    }

    public struct FindInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["Interest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("priority", type: .scalar(Int.self)),
        GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, userCount: Int, name: String, priority: Int? = nil, followed: Bool) {
        self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "userCount": userCount, "name": name, "priority": priority, "followed": followed])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 对该 Interest 感兴趣的用户数量
      public var userCount: Int {
        get {
          return resultMap["userCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "userCount")
        }
      }

      /// interest 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 优先级
      public var priority: Int? {
        get {
          return resultMap["priority"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "priority")
        }
      }

      /// 用户是否关注该 interest
      public var followed: Bool {
        get {
          return resultMap["followed"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }
    }
  }
}

public final class FindInterestsWithNameQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findInterestsWithName($name: String, $page: Int, $pageSize: Int) {
      findInterests(name: $name, page: $page, pageSize: $pageSize) {
        __typename
        videoCount
        videos {
          __typename
          edges {
            __typename
            _id
            videoType
            coverImage
            teaserTitle
            video
            viewCount
            likeCount
            commentCount
            duration
            shareCount
            allowComment
            liveStartAt
            liked
            updatedAt
            describe
            liveStartAt
            createdAt
            updatedAt
            deleted
            live {
              __typename
              _id
              status
              title
              scheduleStartAt
              streamingStatus
            }
            products {
              __typename
              product
              name
              description
              images {
                __typename
                image
                key
              }
              regularPrice
              livePrice
              productType
              variants {
                __typename
                _id
                name
                sku
                quantity
              }
            }
            music {
              __typename
              _id
              title
            }
            user {
              __typename
              _id
              avatar
              username
              followed
              role
            }
            shareLink
            hasSubscribedLive
          }
          pageInfo {
            __typename
            hashNextPage
          }
          totalCount
        }
      }
    }
    """

  public let operationName = "findInterestsWithName"

  public var name: String?
  public var page: Int?
  public var pageSize: Int?

  public init(name: String? = nil, page: Int? = nil, pageSize: Int? = nil) {
    self.name = name
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["name": name, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findInterests", arguments: ["name": GraphQLVariable("name"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .list(.object(FindInterest.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findInterests: [FindInterest?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findInterests": findInterests.flatMap { (value: [FindInterest?]) -> [ResultMap?] in value.map { (value: FindInterest?) -> ResultMap? in value.flatMap { (value: FindInterest) -> ResultMap in value.resultMap } } }])
    }

    /// 查询所有兴趣：
    public var findInterests: [FindInterest?]? {
      get {
        return (resultMap["findInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindInterest?] in value.map { (value: ResultMap?) -> FindInterest? in value.flatMap { (value: ResultMap) -> FindInterest in FindInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindInterest?]) -> [ResultMap?] in value.map { (value: FindInterest?) -> ResultMap? in value.flatMap { (value: FindInterest) -> ResultMap in value.resultMap } } }, forKey: "findInterests")
      }
    }

    public struct FindInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["Interest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("videoCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("videos", type: .object(Video.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(videoCount: Int, videos: Video? = nil) {
        self.init(unsafeResultMap: ["__typename": "Interest", "videoCount": videoCount, "videos": videos.flatMap { (value: Video) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 携带该 interest 的视频数量
      public var videoCount: Int {
        get {
          return resultMap["videoCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoCount")
        }
      }

      /// 发布时关联了该 interest 的 video 列表. 该列表返回的 Video 只会有 Normal Video 和 Teaser Video 两种，不包含 Past Show
      public var videos: Video? {
        get {
          return (resultMap["videos"] as? ResultMap).flatMap { Video(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "videos")
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["interestVideosResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("edges", type: .list(.object(Edge.selections))),
          GraphQLField("pageInfo", type: .object(PageInfo.selections)),
          GraphQLField("totalCount", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil, totalCount: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "interestVideosResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }, "totalCount": totalCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var edges: [Edge?]? {
          get {
            return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
          }
        }

        public var pageInfo: PageInfo? {
          get {
            return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
          }
        }

        public var totalCount: Int? {
          get {
            return resultMap["totalCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public struct Edge: GraphQLSelectionSet {
          public static let possibleTypes = ["video"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("videoType", type: .scalar(VideoType.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("teaserTitle", type: .scalar(String.self)),
            GraphQLField("video", type: .scalar(String.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("commentCount", type: .scalar(Int.self)),
            GraphQLField("duration", type: .scalar(Double.self)),
            GraphQLField("shareCount", type: .scalar(Int.self)),
            GraphQLField("allowComment", type: .scalar(Bool.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("liked", type: .scalar(Bool.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("describe", type: .scalar(String.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("deleted", type: .scalar(Bool.self)),
            GraphQLField("live", type: .object(Live.selections)),
            GraphQLField("products", type: .list(.object(Product.selections))),
            GraphQLField("music", type: .object(Music.selections)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, describe: String? = nil, createdAt: Double? = nil, deleted: Bool? = nil, live: Live? = nil, products: [Product?]? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, hasSubscribedLive: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "describe": describe, "createdAt": createdAt, "deleted": deleted, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "hasSubscribedLive": hasSubscribedLive])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
          public var videoType: VideoType? {
            get {
              return resultMap["videoType"] as? VideoType
            }
            set {
              resultMap.updateValue(newValue, forKey: "videoType")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 【teaser 短视频】预告直播标题
          public var teaserTitle: String? {
            get {
              return resultMap["teaserTitle"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "teaserTitle")
            }
          }

          /// 视频播放地址
          public var video: String? {
            get {
              return resultMap["video"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// 浏览次数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 点赞次数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 评论次数
          public var commentCount: Int? {
            get {
              return resultMap["commentCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "commentCount")
            }
          }

          /// 视频时长
          public var duration: Double? {
            get {
              return resultMap["duration"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 分享次数
          public var shareCount: Int? {
            get {
              return resultMap["shareCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareCount")
            }
          }

          /// 是否允许评论
          public var allowComment: Bool? {
            get {
              return resultMap["allowComment"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "allowComment")
            }
          }

          /// 【teaser / past show 短视频】直播开始日期
          public var liveStartAt: Double? {
            get {
              return resultMap["liveStartAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveStartAt")
            }
          }

          /// 是否点赞
          public var liked: Bool? {
            get {
              return resultMap["liked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "liked")
            }
          }

          /// 更新日期
          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 描述
          public var describe: String? {
            get {
              return resultMap["describe"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "describe")
            }
          }

          /// 创建日期
          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// ***【接口权限: 普通登录用户】***
          /// 删除
          public var deleted: Bool? {
            get {
              return resultMap["deleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "deleted")
            }
          }

          /// 【teaser / past show 短视频】直播预告关联的直播
          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
          public var products: [Product?]? {
            get {
              return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
            }
          }

          /// 视频中搭配的音乐
          public var music: Music? {
            get {
              return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "music")
            }
          }

          /// 作者
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          /// video 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 【teaser 短视频】是否已订阅对应的 live
          public var hasSubscribedLive: Bool? {
            get {
              return resultMap["hasSubscribedLive"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("status", type: .scalar(Bool.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("scheduleStartAt", type: .scalar(String.self)),
              GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, status: Bool? = nil, title: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
              self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "status": status, "title": title, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 是否正在直播
            public var status: Bool? {
              get {
                return resultMap["status"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "status")
              }
            }

            /// 标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }

            /// live schedule 开始时间
            public var scheduleStartAt: String? {
              get {
                return resultMap["scheduleStartAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "scheduleStartAt")
              }
            }

            /// 直播状态，可替代早期的 status
            public var streamingStatus: LiveStreamingStatus? {
              get {
                return resultMap["streamingStatus"] as? LiveStreamingStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "streamingStatus")
              }
            }
          }

          public struct Product: GraphQLSelectionSet {
            public static let possibleTypes = ["PastShowProduct"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("product", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("images", type: .list(.object(Image.selections))),
              GraphQLField("regularPrice", type: .scalar(Int.self)),
              GraphQLField("livePrice", type: .scalar(Int.self)),
              GraphQLField("productType", type: .scalar(enum__productType.self)),
              GraphQLField("variants", type: .list(.object(Variant.selections))),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
              self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 商品 ID
            public var product: String? {
              get {
                return resultMap["product"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "product")
              }
            }

            /// 商品名称
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 商品描述
            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            /// 商品图片
            public var images: [Image?]? {
              get {
                return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
              }
            }

            /// 商品常规价格
            public var regularPrice: Int? {
              get {
                return resultMap["regularPrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "regularPrice")
              }
            }

            /// 商品直播价格
            public var livePrice: Int? {
              get {
                return resultMap["livePrice"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "livePrice")
              }
            }

            /// 商品类型
            public var productType: enum__productType? {
              get {
                return resultMap["productType"] as? enum__productType
              }
              set {
                resultMap.updateValue(newValue, forKey: "productType")
              }
            }

            /// 商品属性
            public var variants: [Variant?]? {
              get {
                return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
              }
              set {
                resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
              }
            }

            public struct Image: GraphQLSelectionSet {
              public static let possibleTypes = ["ImageWithKey"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("image", type: .scalar(String.self)),
                GraphQLField("key", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(image: String? = nil, key: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              public var image: String? {
                get {
                  return resultMap["image"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "image")
                }
              }

              public var key: String? {
                get {
                  return resultMap["key"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "key")
                }
              }
            }

            public struct Variant: GraphQLSelectionSet {
              public static let possibleTypes = ["Variant"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("name", type: .scalar(String.self)),
                GraphQLField("sku", type: .scalar(String.self)),
                GraphQLField("quantity", type: .scalar(Int.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
                self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// variant id
              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 属性名
              public var name: String? {
                get {
                  return resultMap["name"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "name")
                }
              }

              /// sku number
              public var sku: String? {
                get {
                  return resultMap["sku"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "sku")
                }
              }

              /// 库存
              public var quantity: Int? {
                get {
                  return resultMap["quantity"] as? Int
                }
                set {
                  resultMap.updateValue(newValue, forKey: "quantity")
                }
              }
            }
          }

          public struct Music: GraphQLSelectionSet {
            public static let possibleTypes = ["music"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 音乐标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["PageInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("hashNextPage", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(hashNextPage: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
          public var hashNextPage: Bool? {
            get {
              return resultMap["hashNextPage"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hashNextPage")
            }
          }
        }
      }
    }
  }
}

public final class FindLivesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findLives($page: Int, $pageSize: Int, $status: Boolean) {
      findLives(page: $page, pageSize: $pageSize, status: $status, sort: [{field: createdAt, value: DESC}]) {
        __typename
        status
        _id
        chatroomId
        ivsLiveAddress
        startAt
        endAt
        viewCount
        newFansCount
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
        likeCount
        orderCount
        coverImage
        title
        hasShownCoupon
        collaboratingUser
        explainProduct
        coupons {
          __typename
          _id
          discountType
          value
          quantity
          receiveCount
        }
        shareLink
        products {
          __typename
          _id
          name
          description
          images {
            __typename
            image
            key
          }
          stock
          regularPrice
          livePrice
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
          isFreeShipping
          shippingInfo {
            __typename
            companyName
            price
            method
          }
        }
        moments {
          __typename
          video
          coverImage
        }
      }
    }
    """

  public let operationName = "findLives"

  public var page: Int?
  public var pageSize: Int?
  public var status: Bool?

  public init(page: Int? = nil, pageSize: Int? = nil, status: Bool? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findLives", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "status": GraphQLVariable("status"), "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(FindLife.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findLives: [FindLife?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findLives": findLives.flatMap { (value: [FindLife?]) -> [ResultMap?] in value.map { (value: FindLife?) -> ResultMap? in value.flatMap { (value: FindLife) -> ResultMap in value.resultMap } } }])
    }

    /// 客户端查询 live 列表
    public var findLives: [FindLife?]? {
      get {
        return (resultMap["findLives"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindLife?] in value.map { (value: ResultMap?) -> FindLife? in value.flatMap { (value: ResultMap) -> FindLife in FindLife(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindLife?]) -> [ResultMap?] in value.map { (value: FindLife?) -> ResultMap? in value.flatMap { (value: FindLife) -> ResultMap in value.resultMap } } }, forKey: "findLives")
      }
    }

    public struct FindLife: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("orderCount", type: .scalar(Int.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("hasShownCoupon", type: .scalar(Bool.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("explainProduct", type: .scalar(GraphQLID.self)),
        GraphQLField("coupons", type: .list(.object(Coupon.selections))),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("moments", type: .list(.object(Moment.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(status: Bool? = nil, _id: GraphQLID? = nil, chatroomId: String? = nil, ivsLiveAddress: String? = nil, startAt: Double? = nil, endAt: Double? = nil, viewCount: Int? = nil, newFansCount: Int? = nil, user: User? = nil, likeCount: Int? = nil, orderCount: Int? = nil, coverImage: String? = nil, title: String? = nil, hasShownCoupon: Bool? = nil, collaboratingUser: GraphQLID? = nil, explainProduct: GraphQLID? = nil, coupons: [Coupon?]? = nil, shareLink: String? = nil, products: [Product?]? = nil, moments: [Moment?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "status": status, "_id": _id, "chatroomId": chatroomId, "ivsLiveAddress": ivsLiveAddress, "startAt": startAt, "endAt": endAt, "viewCount": viewCount, "newFansCount": newFansCount, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "likeCount": likeCount, "orderCount": orderCount, "coverImage": coverImage, "title": title, "hasShownCoupon": hasShownCoupon, "collaboratingUser": collaboratingUser, "explainProduct": explainProduct, "coupons": coupons.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, "shareLink": shareLink, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "moments": moments.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 本场直播订单数量
      public var orderCount: Int? {
        get {
          return resultMap["orderCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "orderCount")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// app 端是否已展示过 coupon 领取动画. 默认 false，请求 viewLive 接口后返回 true. 状态保存 1 天
      public var hasShownCoupon: Bool? {
        get {
          return resultMap["hasShownCoupon"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasShownCoupon")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 主播正在讲解的商品
      public var explainProduct: GraphQLID? {
        get {
          return resultMap["explainProduct"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "explainProduct")
        }
      }

      /// 直播间正在派发的优惠劵
      public var coupons: [Coupon?]? {
        get {
          return (resultMap["coupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Coupon?] in value.map { (value: ResultMap?) -> Coupon? in value.flatMap { (value: ResultMap) -> Coupon in Coupon(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Coupon?]) -> [ResultMap?] in value.map { (value: Coupon?) -> ResultMap? in value.flatMap { (value: Coupon) -> ResultMap in value.resultMap } } }, forKey: "coupons")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 直播间正在出售的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 直播片段
      public var moments: [Moment?]? {
        get {
          return (resultMap["moments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Moment?] in value.map { (value: ResultMap?) -> Moment? in value.flatMap { (value: ResultMap) -> Moment in Moment(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Moment?]) -> [ResultMap?] in value.map { (value: Moment?) -> ResultMap? in value.flatMap { (value: Moment) -> ResultMap in value.resultMap } } }, forKey: "moments")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct Coupon: GraphQLSelectionSet {
        public static let possibleTypes = ["Coupon"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("discountType", type: .scalar(enum__discountType.self)),
          GraphQLField("value", type: .scalar(Int.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
          GraphQLField("receiveCount", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, discountType: enum__discountType? = nil, value: Int? = nil, quantity: Int? = nil, receiveCount: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Coupon", "_id": _id, "discountType": discountType, "value": value, "quantity": quantity, "receiveCount": receiveCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var discountType: enum__discountType? {
          get {
            return resultMap["discountType"] as? enum__discountType
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountType")
          }
        }

        public var value: Int? {
          get {
            return resultMap["value"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }

        public var receiveCount: Int? {
          get {
            return resultMap["receiveCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "receiveCount")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["Product"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("stock", type: .scalar(Int.self)),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, stock: Int? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, variants: [Variant?]? = nil, isFreeShipping: Bool? = nil, shippingInfo: ShippingInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "stock": stock, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var _id: String? {
          get {
            return resultMap["_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
        public var stock: Int? {
          get {
            return resultMap["stock"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 运输/快递
        public var shippingInfo: ShippingInfo? {
          get {
            return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }

        public struct ShippingInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["ShippingInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("companyName", type: .scalar(String.self)),
            GraphQLField("price", type: .scalar(Int.self)),
            GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(companyName: String? = nil, price: Int? = nil, method: enum__shippingMethod? = nil) {
            self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "price": price, "method": method])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 运输公司名称
          public var companyName: String? {
            get {
              return resultMap["companyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "companyName")
            }
          }

          /// 价格
          public var price: Int? {
            get {
              return resultMap["price"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "price")
            }
          }

          /// 运输方式
          public var method: enum__shippingMethod? {
            get {
              return resultMap["method"] as? enum__shippingMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "method")
            }
          }
        }
      }

      public struct Moment: GraphQLSelectionSet {
        public static let possibleTypes = ["moment"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("video", type: .scalar(String.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(video: String? = nil, coverImage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "moment", "video": video, "coverImage": coverImage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 视频
        public var video: String? {
          get {
            return resultMap["video"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// 封面
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }
      }
    }
  }
}

public final class FindProductsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findProducts($page: Int, $pageSize: Int, $liveHost: ID) {
      findProducts(liveHost: $liveHost, page: $page, pageSize: $pageSize, sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        name
        description
        images {
          __typename
          image
          key
        }
        variants {
          __typename
          _id
          name
          sku
          quantity
        }
        regularPrice
        livePrice
        liveHost {
          __typename
          _id
          avatar
          deviceType
        }
        status
        stock
        isFreeShipping
        productType
        shippingInfo {
          __typename
          companyName
          method
          price
        }
      }
    }
    """

  public let operationName = "findProducts"

  public var page: Int?
  public var pageSize: Int?
  public var liveHost: GraphQLID?

  public init(page: Int? = nil, pageSize: Int? = nil, liveHost: GraphQLID? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.liveHost = liveHost
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "liveHost": liveHost]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findProducts", arguments: ["liveHost": GraphQLVariable("liveHost"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(FindProduct.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findProducts: [FindProduct?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findProducts": findProducts.flatMap { (value: [FindProduct?]) -> [ResultMap?] in value.map { (value: FindProduct?) -> ResultMap? in value.flatMap { (value: FindProduct) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询产品
    public var findProducts: [FindProduct?]? {
      get {
        return (resultMap["findProducts"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindProduct?] in value.map { (value: ResultMap?) -> FindProduct? in value.flatMap { (value: ResultMap) -> FindProduct in FindProduct(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindProduct?]) -> [ResultMap?] in value.map { (value: FindProduct?) -> ResultMap? in value.flatMap { (value: FindProduct) -> ResultMap in value.resultMap } } }, forKey: "findProducts")
      }
    }

    public struct FindProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["Product"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("description", type: .scalar(String.self)),
        GraphQLField("images", type: .list(.object(Image.selections))),
        GraphQLField("variants", type: .list(.object(Variant.selections))),
        GraphQLField("regularPrice", type: .scalar(Int.self)),
        GraphQLField("livePrice", type: .scalar(Int.self)),
        GraphQLField("liveHost", type: .object(LiveHost.selections)),
        GraphQLField("status", type: .scalar(enum__productStatus.self)),
        GraphQLField("stock", type: .scalar(Int.self)),
        GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
        GraphQLField("productType", type: .scalar(enum__productType.self)),
        GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, variants: [Variant?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, liveHost: LiveHost? = nil, status: enum__productStatus? = nil, stock: Int? = nil, isFreeShipping: Bool? = nil, productType: enum__productType? = nil, shippingInfo: ShippingInfo? = nil) {
        self.init(unsafeResultMap: ["__typename": "Product", "_id": _id, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "liveHost": liveHost.flatMap { (value: LiveHost) -> ResultMap in value.resultMap }, "status": status, "stock": stock, "isFreeShipping": isFreeShipping, "productType": productType, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 图片
      public var images: [Image?]? {
        get {
          return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
        }
      }

      /// 商品属性
      public var variants: [Variant?]? {
        get {
          return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
        }
      }

      /// 常规价格
      public var regularPrice: Int? {
        get {
          return resultMap["regularPrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "regularPrice")
        }
      }

      /// 直播价格
      public var livePrice: Int? {
        get {
          return resultMap["livePrice"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "livePrice")
        }
      }

      /// 带货主播
      public var liveHost: LiveHost? {
        get {
          return (resultMap["liveHost"] as? ResultMap).flatMap { LiveHost(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "liveHost")
        }
      }

      /// 状态(OFF_SALE：未上架，用户不能看见; AWAIT_SALE: 待销售，用户可见但不可下单; ON_SALE: 正在销售，用户可见、可以下单)
      public var status: enum__productStatus? {
        get {
          return resultMap["status"] as? enum__productStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 商品总数量，正整数。是 variants 中各种款式商品数量总和
      public var stock: Int? {
        get {
          return resultMap["stock"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "stock")
        }
      }

      /// 是否包邮
      public var isFreeShipping: Bool? {
        get {
          return resultMap["isFreeShipping"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isFreeShipping")
        }
      }

      /// 商品类型
      public var productType: enum__productType? {
        get {
          return resultMap["productType"] as? enum__productType
        }
        set {
          resultMap.updateValue(newValue, forKey: "productType")
        }
      }

      /// 运输/快递
      public var shippingInfo: ShippingInfo? {
        get {
          return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
        }
      }

      public struct Image: GraphQLSelectionSet {
        public static let possibleTypes = ["ImageWithKey"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("key", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(image: String? = nil, key: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }
      }

      public struct Variant: GraphQLSelectionSet {
        public static let possibleTypes = ["Variant"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("sku", type: .scalar(String.self)),
          GraphQLField("quantity", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// variant id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 属性名
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// sku number
        public var sku: String? {
          get {
            return resultMap["sku"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sku")
          }
        }

        /// 库存
        public var quantity: Int? {
          get {
            return resultMap["quantity"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "quantity")
          }
        }
      }

      public struct LiveHost: GraphQLSelectionSet {
        public static let possibleTypes = ["user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, deviceType: enum__deviceType? = nil) {
          self.init(unsafeResultMap: ["__typename": "user", "_id": _id, "avatar": avatar, "deviceType": deviceType])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 设备类型
        public var deviceType: enum__deviceType? {
          get {
            return resultMap["deviceType"] as? enum__deviceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceType")
          }
        }
      }

      public struct ShippingInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["ShippingInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("companyName", type: .scalar(String.self)),
          GraphQLField("method", type: .scalar(enum__shippingMethod.self)),
          GraphQLField("price", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(companyName: String? = nil, method: enum__shippingMethod? = nil, price: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "ShippingInfo", "companyName": companyName, "method": method, "price": price])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 运输公司名称
        public var companyName: String? {
          get {
            return resultMap["companyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "companyName")
          }
        }

        /// 运输方式
        public var method: enum__shippingMethod? {
          get {
            return resultMap["method"] as? enum__shippingMethod
          }
          set {
            resultMap.updateValue(newValue, forKey: "method")
          }
        }

        /// 价格
        public var price: Int? {
          get {
            return resultMap["price"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "price")
          }
        }
      }
    }
  }
}

public final class FindShippingOptionsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findShippingOptions {
      findShippingOptions {
        __typename
        companyName
      }
    }
    """

  public let operationName = "findShippingOptions"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findShippingOptions", type: .nonNull(.list(.object(FindShippingOption.selections)))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findShippingOptions: [FindShippingOption?]) {
      self.init(unsafeResultMap: ["__typename": "Query", "findShippingOptions": findShippingOptions.map { (value: FindShippingOption?) -> ResultMap? in value.flatMap { (value: FindShippingOption) -> ResultMap in value.resultMap } }])
    }

    /// 获取可选择的物流公司
    public var findShippingOptions: [FindShippingOption?] {
      get {
        return (resultMap["findShippingOptions"] as! [ResultMap?]).map { (value: ResultMap?) -> FindShippingOption? in value.flatMap { (value: ResultMap) -> FindShippingOption in FindShippingOption(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.map { (value: FindShippingOption?) -> ResultMap? in value.flatMap { (value: FindShippingOption) -> ResultMap in value.resultMap } }, forKey: "findShippingOptions")
      }
    }

    public struct FindShippingOption: GraphQLSelectionSet {
      public static let possibleTypes = ["ShippingOption"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("companyName", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(companyName: String) {
        self.init(unsafeResultMap: ["__typename": "ShippingOption", "companyName": companyName])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var companyName: String {
        get {
          return resultMap["companyName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "companyName")
        }
      }
    }
  }
}

public final class FindUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query FindUsers($page: Int, $pageSize: Int, $id: ID, $ids: [ID!], $username: String) {
      findUsers(page: $page, pageSize: $pageSize, _id: $id, _ids: $ids, username: $username) {
        __typename
        _id
        uid
        hasBlocked
        avatar
        name
        username
        followCount
        fansCount
        likeCount
        liveStatus
        liveId
        bio
        website
        role
        facebook {
          __typename
          id
          username
          homePage
        }
        instagram {
          __typename
          id
          username
          homePage
        }
        followed
        newOrdersCount {
          __typename
          selling
          buying
          ticket
        }
        store {
          __typename
          _id
          storeName
          storePicture {
            __typename
            image
            key
          }
          deleted
        }
        userSetting {
          __typename
          acceptAgreement {
            __typename
            auction
          }
          auctionPaymentInfo {
            __typename
            appPaymentMethod: paymentMethod {
              __typename
              _id
              paymentMethod
              stripePaymentMethodId
              card {
                __typename
                _id
                firstName
                lastName
                expiryDate
                cvvCode
                stripePaymentMethodId
                last4
                isDefaultCard
                brand
                brandIcon
                invalidCard
                invalidFields
              }
            }
            shippingAddress {
              __typename
              _id
              user {
                __typename
                _id
                avatar
                username
              }
              firstName
              lastName
              phoneNumber
              addressLine1
              addressLine2
              city
              state
              country
              zipCode
              addressType
              isDefaultAddress
              card
            }
          }
        }
        recentSellerRequest {
          __typename
          reviewStatus
        }
      }
    }
    """

  public let operationName = "FindUsers"

  public var page: Int?
  public var pageSize: Int?
  public var id: GraphQLID?
  public var ids: [GraphQLID]?
  public var username: String?

  public init(page: Int? = nil, pageSize: Int? = nil, id: GraphQLID? = nil, ids: [GraphQLID]?, username: String? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.id = id
    self.ids = ids
    self.username = username
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "id": id, "ids": ids, "username": username]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findUsers", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "_id": GraphQLVariable("id"), "_ids": GraphQLVariable("ids"), "username": GraphQLVariable("username")], type: .list(.object(FindUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findUsers: [FindUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findUsers": findUsers.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }])
    }

    /// 查询用户
    public var findUsers: [FindUser?]? {
      get {
        return (resultMap["findUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindUser?] in value.map { (value: ResultMap?) -> FindUser? in value.flatMap { (value: ResultMap) -> FindUser in FindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, forKey: "findUsers")
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("uid", type: .scalar(String.self)),
        GraphQLField("hasBlocked", type: .scalar(Bool.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("followCount", type: .scalar(Int.self)),
        GraphQLField("fansCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("liveStatus", type: .scalar(Bool.self)),
        GraphQLField("liveId", type: .scalar(GraphQLID.self)),
        GraphQLField("bio", type: .scalar(String.self)),
        GraphQLField("website", type: .scalar(String.self)),
        GraphQLField("role", type: .scalar(enum__userRole.self)),
        GraphQLField("facebook", type: .object(Facebook.selections)),
        GraphQLField("instagram", type: .object(Instagram.selections)),
        GraphQLField("followed", type: .scalar(Bool.self)),
        GraphQLField("newOrdersCount", type: .object(NewOrdersCount.selections)),
        GraphQLField("store", type: .object(Store.selections)),
        GraphQLField("userSetting", type: .object(UserSetting.selections)),
        GraphQLField("recentSellerRequest", type: .object(RecentSellerRequest.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, uid: String? = nil, hasBlocked: Bool? = nil, avatar: String? = nil, name: String? = nil, username: String? = nil, followCount: Int? = nil, fansCount: Int? = nil, likeCount: Int? = nil, liveStatus: Bool? = nil, liveId: GraphQLID? = nil, bio: String? = nil, website: String? = nil, role: enum__userRole? = nil, facebook: Facebook? = nil, instagram: Instagram? = nil, followed: Bool? = nil, newOrdersCount: NewOrdersCount? = nil, store: Store? = nil, userSetting: UserSetting? = nil, recentSellerRequest: RecentSellerRequest? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "uid": uid, "hasBlocked": hasBlocked, "avatar": avatar, "name": name, "username": username, "followCount": followCount, "fansCount": fansCount, "likeCount": likeCount, "liveStatus": liveStatus, "liveId": liveId, "bio": bio, "website": website, "role": role, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "followed": followed, "newOrdersCount": newOrdersCount.flatMap { (value: NewOrdersCount) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: Store) -> ResultMap in value.resultMap }, "userSetting": userSetting.flatMap { (value: UserSetting) -> ResultMap in value.resultMap }, "recentSellerRequest": recentSellerRequest.flatMap { (value: RecentSellerRequest) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
      public var uid: String? {
        get {
          return resultMap["uid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uid")
        }
      }

      /// 请求用户信息时，指示是否已经把此用户屏蔽
      public var hasBlocked: Bool? {
        get {
          return resultMap["hasBlocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasBlocked")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 用户名字
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 关注人数
      public var followCount: Int? {
        get {
          return resultMap["followCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "followCount")
        }
      }

      /// 粉丝数
      public var fansCount: Int? {
        get {
          return resultMap["fansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "fansCount")
        }
      }

      /// 获取的点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 此用户是否在直播中，true 直播中，false 未直播
      public var liveStatus: Bool? {
        get {
          return resultMap["liveStatus"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStatus")
        }
      }

      /// 此用户直播间 ID，未直播时返回 null
      public var liveId: GraphQLID? {
        get {
          return resultMap["liveId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveId")
        }
      }

      /// 个人简历
      public var bio: String? {
        get {
          return resultMap["bio"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "bio")
        }
      }

      /// 个人网站
      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      /// 用户角色
      public var role: enum__userRole? {
        get {
          return resultMap["role"] as? enum__userRole
        }
        set {
          resultMap.updateValue(newValue, forKey: "role")
        }
      }

      /// facebook
      public var facebook: Facebook? {
        get {
          return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
        }
      }

      /// instagram
      public var instagram: Instagram? {
        get {
          return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }

      /// 新订单提醒数量
      public var newOrdersCount: NewOrdersCount? {
        get {
          return (resultMap["newOrdersCount"] as? ResultMap).flatMap { NewOrdersCount(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "newOrdersCount")
        }
      }

      /// 商店
      public var store: Store? {
        get {
          return (resultMap["store"] as? ResultMap).flatMap { Store(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "store")
        }
      }

      /// 用户关联的一些扩展信息
      public var userSetting: UserSetting? {
        get {
          return (resultMap["userSetting"] as? ResultMap).flatMap { UserSetting(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "userSetting")
        }
      }

      /// 最近一次 seller request
      public var recentSellerRequest: RecentSellerRequest? {
        get {
          return (resultMap["recentSellerRequest"] as? ResultMap).flatMap { RecentSellerRequest(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "recentSellerRequest")
        }
      }

      public struct Facebook: GraphQLSelectionSet {
        public static let possibleTypes = ["user_facebook"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct Instagram: GraphQLSelectionSet {
        public static let possibleTypes = ["user_instagram"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct NewOrdersCount: GraphQLSelectionSet {
        public static let possibleTypes = ["UserNewOrdersCount"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("selling", type: .scalar(Int.self)),
          GraphQLField("buying", type: .scalar(Int.self)),
          GraphQLField("ticket", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(selling: Int? = nil, buying: Int? = nil, ticket: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserNewOrdersCount", "selling": selling, "buying": buying, "ticket": ticket])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 未查看的新 selling 订单数
        public var selling: Int? {
          get {
            return resultMap["selling"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "selling")
          }
        }

        /// 未查看的新 buying 订单数
        public var buying: Int? {
          get {
            return resultMap["buying"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "buying")
          }
        }

        /// 未查看的新 ticket 订单数
        public var ticket: Int? {
          get {
            return resultMap["ticket"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticket")
          }
        }
      }

      public struct Store: GraphQLSelectionSet {
        public static let possibleTypes = ["type__userStore"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("storeName", type: .scalar(String.self)),
          GraphQLField("storePicture", type: .object(StorePicture.selections)),
          GraphQLField("deleted", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, storeName: String? = nil, storePicture: StorePicture? = nil, deleted: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__userStore", "_id": _id, "storeName": storeName, "storePicture": storePicture.flatMap { (value: StorePicture) -> ResultMap in value.resultMap }, "deleted": deleted])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var storeName: String? {
          get {
            return resultMap["storeName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "storeName")
          }
        }

        public var storePicture: StorePicture? {
          get {
            return (resultMap["storePicture"] as? ResultMap).flatMap { StorePicture(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "storePicture")
          }
        }

        public var deleted: Bool? {
          get {
            return resultMap["deleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "deleted")
          }
        }

        public struct StorePicture: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }
      }

      public struct UserSetting: GraphQLSelectionSet {
        public static let possibleTypes = ["UserSetting"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("acceptAgreement", type: .nonNull(.object(AcceptAgreement.selections))),
          GraphQLField("auctionPaymentInfo", type: .object(AuctionPaymentInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(acceptAgreement: AcceptAgreement, auctionPaymentInfo: AuctionPaymentInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserSetting", "acceptAgreement": acceptAgreement.resultMap, "auctionPaymentInfo": auctionPaymentInfo.flatMap { (value: AuctionPaymentInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否同意 user agreement
        public var acceptAgreement: AcceptAgreement {
          get {
            return AcceptAgreement(unsafeResultMap: resultMap["acceptAgreement"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "acceptAgreement")
          }
        }

        /// 用户为 auction 设置的 payment info，包含地址和信用卡
        public var auctionPaymentInfo: AuctionPaymentInfo? {
          get {
            return (resultMap["auctionPaymentInfo"] as? ResultMap).flatMap { AuctionPaymentInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "auctionPaymentInfo")
          }
        }

        public struct AcceptAgreement: GraphQLSelectionSet {
          public static let possibleTypes = ["UserAgreement"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("auction", type: .nonNull(.scalar(Bool.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(auction: Bool) {
            self.init(unsafeResultMap: ["__typename": "UserAgreement", "auction": auction])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 拍卖的用户协议
          public var auction: Bool {
            get {
              return resultMap["auction"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "auction")
            }
          }
        }

        public struct AuctionPaymentInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["AuctionPaymentInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("paymentMethod", alias: "appPaymentMethod", type: .object(AppPaymentMethod.selections)),
            GraphQLField("shippingAddress", type: .object(ShippingAddress.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(appPaymentMethod: AppPaymentMethod? = nil, shippingAddress: ShippingAddress? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuctionPaymentInfo", "appPaymentMethod": appPaymentMethod.flatMap { (value: AppPaymentMethod) -> ResultMap in value.resultMap }, "shippingAddress": shippingAddress.flatMap { (value: ShippingAddress) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 拍卖使用的支付方式
          public var appPaymentMethod: AppPaymentMethod? {
            get {
              return (resultMap["appPaymentMethod"] as? ResultMap).flatMap { AppPaymentMethod(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "appPaymentMethod")
            }
          }

          /// 拍卖使用的地址
          public var shippingAddress: ShippingAddress? {
            get {
              return (resultMap["shippingAddress"] as? ResultMap).flatMap { ShippingAddress(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingAddress")
            }
          }

          public struct AppPaymentMethod: GraphQLSelectionSet {
            public static let possibleTypes = ["LastPaymentMethodModel"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("paymentMethod", type: .scalar(PaymentMethod.self)),
              GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
              GraphQLField("card", type: .object(Card.selections)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, paymentMethod: PaymentMethod? = nil, stripePaymentMethodId: String? = nil, card: Card? = nil) {
              self.init(unsafeResultMap: ["__typename": "LastPaymentMethodModel", "_id": _id, "paymentMethod": paymentMethod, "stripePaymentMethodId": stripePaymentMethodId, "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 支付方式名称
            public var paymentMethod: PaymentMethod? {
              get {
                return resultMap["paymentMethod"] as? PaymentMethod
              }
              set {
                resultMap.updateValue(newValue, forKey: "paymentMethod")
              }
            }

            /// stripe 的 paymentMethodId，用于 createPayment 接口传入的 paymentMethodId
            public var stripePaymentMethodId: String? {
              get {
                return resultMap["stripePaymentMethodId"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
              }
            }

            /// 如果 paymentMethod 字段是 CARD，这里是关联的卡片信息
            public var card: Card? {
              get {
                return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "card")
              }
            }

            public struct Card: GraphQLSelectionSet {
              public static let possibleTypes = ["Card"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
                GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
                GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
                GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
                GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
                GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
                GraphQLField("last4", type: .nonNull(.scalar(String.self))),
                GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("brand", type: .nonNull(.scalar(String.self))),
                GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
                GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
                GraphQLField("invalidFields", type: .nonNull(.list(.scalar(enum__cardInvalidField.self)))),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID, firstName: String, lastName: String, expiryDate: String, cvvCode: String, stripePaymentMethodId: String, last4: String, isDefaultCard: Bool, brand: String, brandIcon: String, invalidCard: Bool, invalidFields: [enum__cardInvalidField?]) {
                self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "firstName": firstName, "lastName": lastName, "expiryDate": expiryDate, "cvvCode": cvvCode, "stripePaymentMethodId": stripePaymentMethodId, "last4": last4, "isDefaultCard": isDefaultCard, "brand": brand, "brandIcon": brandIcon, "invalidCard": invalidCard, "invalidFields": invalidFields])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// id
              public var _id: GraphQLID {
                get {
                  return resultMap["_id"]! as! GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// firstName
              public var firstName: String {
                get {
                  return resultMap["firstName"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "firstName")
                }
              }

              /// lastName
              public var lastName: String {
                get {
                  return resultMap["lastName"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "lastName")
                }
              }

              /// expiryDate
              public var expiryDate: String {
                get {
                  return resultMap["expiryDate"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "expiryDate")
                }
              }

              /// cvvCode
              public var cvvCode: String {
                get {
                  return resultMap["cvvCode"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "cvvCode")
                }
              }

              /// stripe payment method id
              public var stripePaymentMethodId: String {
                get {
                  return resultMap["stripePaymentMethodId"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
                }
              }

              /// last4
              public var last4: String {
                get {
                  return resultMap["last4"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "last4")
                }
              }

              /// 是否是默认信用卡
              public var isDefaultCard: Bool {
                get {
                  return resultMap["isDefaultCard"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "isDefaultCard")
                }
              }

              /// 发卡机构, 对应 UI 上的`Bank Name`
              public var brand: String {
                get {
                  return resultMap["brand"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brand")
                }
              }

              /// 发卡机构图片
              public var brandIcon: String {
                get {
                  return resultMap["brandIcon"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brandIcon")
                }
              }

              /// 卡片是否无效，true 表示无效，false 表示有效
              public var invalidCard: Bool {
                get {
                  return resultMap["invalidCard"]! as! Bool
                }
                set {
                  resultMap.updateValue(newValue, forKey: "invalidCard")
                }
              }

              /// 卡片校验无效时，具体无效的字段. 有效时为空数组
              public var invalidFields: [enum__cardInvalidField?] {
                get {
                  return resultMap["invalidFields"]! as! [enum__cardInvalidField?]
                }
                set {
                  resultMap.updateValue(newValue, forKey: "invalidFields")
                }
              }
            }
          }

          public struct ShippingAddress: GraphQLSelectionSet {
            public static let possibleTypes = ["Address"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("user", type: .object(User.selections)),
              GraphQLField("firstName", type: .scalar(String.self)),
              GraphQLField("lastName", type: .scalar(String.self)),
              GraphQLField("phoneNumber", type: .scalar(String.self)),
              GraphQLField("addressLine1", type: .scalar(String.self)),
              GraphQLField("addressLine2", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("state", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("zipCode", type: .scalar(String.self)),
              GraphQLField("addressType", type: .scalar(enum__addressType.self)),
              GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
              GraphQLField("card", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, user: User? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil, card: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress, "card": card])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 用户名
            public var user: User? {
              get {
                return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "user")
              }
            }

            /// firstName
            public var firstName: String? {
              get {
                return resultMap["firstName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "firstName")
              }
            }

            /// lastName
            public var lastName: String? {
              get {
                return resultMap["lastName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "lastName")
              }
            }

            /// phoneNumber
            public var phoneNumber: String? {
              get {
                return resultMap["phoneNumber"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "phoneNumber")
              }
            }

            /// addressLine1
            public var addressLine1: String? {
              get {
                return resultMap["addressLine1"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "addressLine1")
              }
            }

            /// addressLine2
            public var addressLine2: String? {
              get {
                return resultMap["addressLine2"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "addressLine2")
              }
            }

            /// city
            public var city: String? {
              get {
                return resultMap["city"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "city")
              }
            }

            /// state
            public var state: String? {
              get {
                return resultMap["state"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "state")
              }
            }

            /// country
            public var country: String? {
              get {
                return resultMap["country"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "country")
              }
            }

            /// zipCode
            public var zipCode: String? {
              get {
                return resultMap["zipCode"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "zipCode")
              }
            }

            /// ShippingAddress or BillingAddress
            public var addressType: enum__addressType? {
              get {
                return resultMap["addressType"] as? enum__addressType
              }
              set {
                resultMap.updateValue(newValue, forKey: "addressType")
              }
            }

            /// 是否为默认
            public var isDefaultAddress: Bool? {
              get {
                return resultMap["isDefaultAddress"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "isDefaultAddress")
              }
            }

            /// 当 addressType 为 BILLING 时, 有此字段，表示该账单地址和此 card 关联
            public var card: String? {
              get {
                return resultMap["card"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "card")
              }
            }

            public struct User: GraphQLSelectionSet {
              public static let possibleTypes = ["type__user"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("_id", type: .scalar(GraphQLID.self)),
                GraphQLField("avatar", type: .scalar(String.self)),
                GraphQLField("username", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// id
              public var _id: GraphQLID? {
                get {
                  return resultMap["_id"] as? GraphQLID
                }
                set {
                  resultMap.updateValue(newValue, forKey: "_id")
                }
              }

              /// 头像
              public var avatar: String? {
                get {
                  return resultMap["avatar"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "avatar")
                }
              }

              /// 用户名
              public var username: String? {
                get {
                  return resultMap["username"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "username")
                }
              }
            }
          }
        }
      }

      public struct RecentSellerRequest: GraphQLSelectionSet {
        public static let possibleTypes = ["SellerRequest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewStatus", type: .nonNull(.scalar(SellerRequestReviewStatus.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(reviewStatus: SellerRequestReviewStatus) {
          self.init(unsafeResultMap: ["__typename": "SellerRequest", "reviewStatus": reviewStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 申请审核的状态
        public var reviewStatus: SellerRequestReviewStatus {
          get {
            return resultMap["reviewStatus"]! as! SellerRequestReviewStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "reviewStatus")
          }
        }
      }
    }
  }
}

public final class FollowUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation followUser($userId: ID!, $status: Boolean!) {
      followUser(user: $userId, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "followUser"

  public var userId: GraphQLID
  public var status: Bool

  public init(userId: GraphQLID, status: Bool) {
    self.userId = userId
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["userId": userId, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("followUser", arguments: ["user": GraphQLVariable("userId"), "status": GraphQLVariable("status")], type: .object(FollowUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(followUser: FollowUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "followUser": followUser.flatMap { (value: FollowUser) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 关注用户
    public var followUser: FollowUser? {
      get {
        return (resultMap["followUser"] as? ResultMap).flatMap { FollowUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "followUser")
      }
    }

    public struct FollowUser: GraphQLSelectionSet {
      public static let possibleTypes = ["followUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "followUser", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class GetEphemeralKeyQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getEphemeralKey($apiVersion: String!) {
      getEphemeralKey(apiVersion: $apiVersion) {
        __typename
        associated_objects {
          __typename
          id
          type
        }
        id
        object
        created
        expires
        livemode
        secret
      }
    }
    """

  public let operationName = "getEphemeralKey"

  public var apiVersion: String

  public init(apiVersion: String) {
    self.apiVersion = apiVersion
  }

  public var variables: GraphQLMap? {
    return ["apiVersion": apiVersion]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getEphemeralKey", arguments: ["apiVersion": GraphQLVariable("apiVersion")], type: .object(GetEphemeralKey.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getEphemeralKey: GetEphemeralKey? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getEphemeralKey": getEphemeralKey.flatMap { (value: GetEphemeralKey) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取支付 EphemeralKey
    public var getEphemeralKey: GetEphemeralKey? {
      get {
        return (resultMap["getEphemeralKey"] as? ResultMap).flatMap { GetEphemeralKey(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getEphemeralKey")
      }
    }

    public struct GetEphemeralKey: GraphQLSelectionSet {
      public static let possibleTypes = ["getEphemeralKey"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("associated_objects", type: .list(.object(AssociatedObject.selections))),
        GraphQLField("id", type: .scalar(String.self)),
        GraphQLField("object", type: .scalar(String.self)),
        GraphQLField("created", type: .scalar(Int.self)),
        GraphQLField("expires", type: .scalar(Int.self)),
        GraphQLField("livemode", type: .scalar(Bool.self)),
        GraphQLField("secret", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(associatedObjects: [AssociatedObject?]? = nil, id: String? = nil, object: String? = nil, created: Int? = nil, expires: Int? = nil, livemode: Bool? = nil, secret: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "getEphemeralKey", "associated_objects": associatedObjects.flatMap { (value: [AssociatedObject?]) -> [ResultMap?] in value.map { (value: AssociatedObject?) -> ResultMap? in value.flatMap { (value: AssociatedObject) -> ResultMap in value.resultMap } } }, "id": id, "object": object, "created": created, "expires": expires, "livemode": livemode, "secret": secret])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var associatedObjects: [AssociatedObject?]? {
        get {
          return (resultMap["associated_objects"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AssociatedObject?] in value.map { (value: ResultMap?) -> AssociatedObject? in value.flatMap { (value: ResultMap) -> AssociatedObject in AssociatedObject(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [AssociatedObject?]) -> [ResultMap?] in value.map { (value: AssociatedObject?) -> ResultMap? in value.flatMap { (value: AssociatedObject) -> ResultMap in value.resultMap } } }, forKey: "associated_objects")
        }
      }

      /// Unique identifier for the object.
      public var id: String? {
        get {
          return resultMap["id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// String representing the object's type. Objects of the same type share the same value.
      public var object: String? {
        get {
          return resultMap["object"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "object")
        }
      }

      /// Time at which the object was created. Measured in seconds since the Unix epoch.
      public var created: Int? {
        get {
          return resultMap["created"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "created")
        }
      }

      /// Time at which the key will expire. Measured in seconds since the Unix epoch.
      public var expires: Int? {
        get {
          return resultMap["expires"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "expires")
        }
      }

      /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
      public var livemode: Bool? {
        get {
          return resultMap["livemode"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "livemode")
        }
      }

      /// The key's secret. You can use this value to make authorized requests to the Stripe API.
      public var secret: String? {
        get {
          return resultMap["secret"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }

      public struct AssociatedObject: GraphQLSelectionSet {
        public static let possibleTypes = ["EphemeralKeyAssociatedObject"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("type", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, type: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "EphemeralKeyAssociatedObject", "id": id, "type": type])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }
      }
    }
  }
}

public final class GetOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getOrder($_id: ID!, $target: enum__listOrderAction!) {
      getOrder(_id: $_id, target: $target) {
        __typename
        ... on SellingOrderModel {
          _id
          orderCode
          orderSource
          status
          buyer {
            __typename
            _id
            username
            avatar
          }
          products {
            __typename
            product
            name
            description
            images {
              __typename
              image
              key
            }
            regularPrice
            livePrice
            isFreeShipping
            shippingInfo {
              __typename
              companyName
              method
              price
            }
            quantity
            chosenTag
          }
          userCoupons {
            __typename
            _id
            live {
              __typename
              _id
              title
            }
            coupon {
              __typename
              _id
              quantity
            }
            discountType
            value
            used
            usedAt
            createdAt
            updatedAt
            deleted
          }
          salePrice
          transactionFeeRate
          transactionFeeTotalPrice
          purchasePrice
          paidPrice
          isFreeShipping
          taxTotalPrice
          shippingTotalPrice
          liveDiscount
          discountTotalPrice
          shippingAddressSnapshot {
            __typename
            _id
            firstName
            lastName
            phoneNumber
            addressLine1
            addressLine2
            city
            state
            country
            zipCode
            addressType
            isDefaultAddress
          }
          payment {
            __typename
            status
            paymentMethodType
            paymentMethodDetail {
              __typename
              card {
                __typename
                last4
                brand
                brandIcon
                stripePaymentMethodId
              }
            }
            createdAt
            updatedAt
          }
          paidAt
          deliverStartAt
          deliverEndAt
          fulfilledAt
          createdAt
          updatedAt
          trackingNumber
          shippingCarrier
          tracker {
            __typename
            _id
          }
        }
        ... on BuyingOrderModel {
          _id
          orderCode
          orderSource
          status
          seller {
            __typename
            _id
            username
          }
          products {
            __typename
            product
            name
            description
            images {
              __typename
              image
              key
            }
            regularPrice
            livePrice
            variants {
              __typename
              _id
              name
              sku
              quantity
            }
            isFreeShipping
            shippingInfo {
              __typename
              companyName
              method
              price
            }
            quantity
            chosenTag
          }
          userCoupons {
            __typename
            _id
            live {
              __typename
              _id
              title
            }
            coupon {
              __typename
              _id
              quantity
            }
            discountType
            value
            used
            usedAt
            createdAt
            updatedAt
            deleted
          }
          purchasePrice
          paidPrice
          isFreeShipping
          taxTotalPrice
          shippingTotalPrice
          liveDiscount
          discountTotalPrice
          shippingAddressSnapshot {
            __typename
            _id
            firstName
            lastName
            phoneNumber
            addressLine1
            addressLine2
            city
            state
            country
            zipCode
            addressType
            isDefaultAddress
          }
          payment {
            __typename
            status
            paymentMethodType
            paymentMethodDetail {
              __typename
              card {
                __typename
                last4
                brand
                brandIcon
                stripePaymentMethodId
              }
            }
            paymentIntentsId
            paymentIntentsClientSecret
            lastPaymentErrorCode
            lastPaymentErrorMessage
            createdAt
            updatedAt
          }
          paidAt
          deliverStartAt
          deliverEndAt
          fulfilledAt
          createdAt
          updatedAt
          trackingNumber
          shippingCarrier
          tracker {
            __typename
            _id
          }
        }
      }
    }
    """

  public let operationName = "getOrder"

  public var _id: GraphQLID
  public var target: enum__listOrderAction

  public init(_id: GraphQLID, target: enum__listOrderAction) {
    self._id = _id
    self.target = target
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "target": target]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getOrder", arguments: ["_id": GraphQLVariable("_id"), "target": GraphQLVariable("target")], type: .object(GetOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getOrder: GetOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getOrder": getOrder.flatMap { (value: GetOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【客户端专用接口】买家根据订单 id 查询购买订单详情,或者卖家根据订单 id 查找顾客下单的订单详情。通过必传的 target 字段区分
    public var getOrder: GetOrder? {
      get {
        return (resultMap["getOrder"] as? ResultMap).flatMap { GetOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getOrder")
      }
    }

    public struct GetOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["SellingOrderModel", "BuyingOrderModel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLTypeCase(
          variants: ["SellingOrderModel": AsSellingOrderModel.selections, "BuyingOrderModel": AsBuyingOrderModel.selections],
          default: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          ]
        )
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeSellingOrderModel(_id: GraphQLID? = nil, orderCode: String? = nil, orderSource: OrderSource? = nil, status: OrderStatus? = nil, buyer: AsSellingOrderModel.Buyer? = nil, products: [AsSellingOrderModel.Product?]? = nil, userCoupons: [AsSellingOrderModel.UserCoupon?]? = nil, salePrice: Int? = nil, transactionFeeRate: Double? = nil, transactionFeeTotalPrice: Int? = nil, purchasePrice: Int? = nil, paidPrice: Int? = nil, isFreeShipping: Bool? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, liveDiscount: Int? = nil, discountTotalPrice: Int? = nil, shippingAddressSnapshot: AsSellingOrderModel.ShippingAddressSnapshot? = nil, payment: AsSellingOrderModel.Payment? = nil, paidAt: Double? = nil, deliverStartAt: Double? = nil, deliverEndAt: Double? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, trackingNumber: String? = nil, shippingCarrier: String? = nil, tracker: AsSellingOrderModel.Tracker? = nil) -> GetOrder {
        return GetOrder(unsafeResultMap: ["__typename": "SellingOrderModel", "_id": _id, "orderCode": orderCode, "orderSource": orderSource, "status": status, "buyer": buyer.flatMap { (value: AsSellingOrderModel.Buyer) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [AsSellingOrderModel.Product?]) -> [ResultMap?] in value.map { (value: AsSellingOrderModel.Product?) -> ResultMap? in value.flatMap { (value: AsSellingOrderModel.Product) -> ResultMap in value.resultMap } } }, "userCoupons": userCoupons.flatMap { (value: [AsSellingOrderModel.UserCoupon?]) -> [ResultMap?] in value.map { (value: AsSellingOrderModel.UserCoupon?) -> ResultMap? in value.flatMap { (value: AsSellingOrderModel.UserCoupon) -> ResultMap in value.resultMap } } }, "salePrice": salePrice, "transactionFeeRate": transactionFeeRate, "transactionFeeTotalPrice": transactionFeeTotalPrice, "purchasePrice": purchasePrice, "paidPrice": paidPrice, "isFreeShipping": isFreeShipping, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "liveDiscount": liveDiscount, "discountTotalPrice": discountTotalPrice, "shippingAddressSnapshot": shippingAddressSnapshot.flatMap { (value: AsSellingOrderModel.ShippingAddressSnapshot) -> ResultMap in value.resultMap }, "payment": payment.flatMap { (value: AsSellingOrderModel.Payment) -> ResultMap in value.resultMap }, "paidAt": paidAt, "deliverStartAt": deliverStartAt, "deliverEndAt": deliverEndAt, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "updatedAt": updatedAt, "trackingNumber": trackingNumber, "shippingCarrier": shippingCarrier, "tracker": tracker.flatMap { (value: AsSellingOrderModel.Tracker) -> ResultMap in value.resultMap }])
      }

      public static func makeBuyingOrderModel(_id: GraphQLID? = nil, orderCode: String? = nil, orderSource: OrderSource? = nil, status: OrderStatus? = nil, seller: AsBuyingOrderModel.Seller? = nil, products: [AsBuyingOrderModel.Product?]? = nil, userCoupons: [AsBuyingOrderModel.UserCoupon?]? = nil, purchasePrice: Int? = nil, paidPrice: Int? = nil, isFreeShipping: Bool? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, liveDiscount: Int? = nil, discountTotalPrice: Int? = nil, shippingAddressSnapshot: AsBuyingOrderModel.ShippingAddressSnapshot? = nil, payment: AsBuyingOrderModel.Payment? = nil, paidAt: Double? = nil, deliverStartAt: Double? = nil, deliverEndAt: Double? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, trackingNumber: String? = nil, shippingCarrier: String? = nil, tracker: AsBuyingOrderModel.Tracker? = nil) -> GetOrder {
        return GetOrder(unsafeResultMap: ["__typename": "BuyingOrderModel", "_id": _id, "orderCode": orderCode, "orderSource": orderSource, "status": status, "seller": seller.flatMap { (value: AsBuyingOrderModel.Seller) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [AsBuyingOrderModel.Product?]) -> [ResultMap?] in value.map { (value: AsBuyingOrderModel.Product?) -> ResultMap? in value.flatMap { (value: AsBuyingOrderModel.Product) -> ResultMap in value.resultMap } } }, "userCoupons": userCoupons.flatMap { (value: [AsBuyingOrderModel.UserCoupon?]) -> [ResultMap?] in value.map { (value: AsBuyingOrderModel.UserCoupon?) -> ResultMap? in value.flatMap { (value: AsBuyingOrderModel.UserCoupon) -> ResultMap in value.resultMap } } }, "purchasePrice": purchasePrice, "paidPrice": paidPrice, "isFreeShipping": isFreeShipping, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "liveDiscount": liveDiscount, "discountTotalPrice": discountTotalPrice, "shippingAddressSnapshot": shippingAddressSnapshot.flatMap { (value: AsBuyingOrderModel.ShippingAddressSnapshot) -> ResultMap in value.resultMap }, "payment": payment.flatMap { (value: AsBuyingOrderModel.Payment) -> ResultMap in value.resultMap }, "paidAt": paidAt, "deliverStartAt": deliverStartAt, "deliverEndAt": deliverEndAt, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "updatedAt": updatedAt, "trackingNumber": trackingNumber, "shippingCarrier": shippingCarrier, "tracker": tracker.flatMap { (value: AsBuyingOrderModel.Tracker) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asSellingOrderModel: AsSellingOrderModel? {
        get {
          if !AsSellingOrderModel.possibleTypes.contains(__typename) { return nil }
          return AsSellingOrderModel(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsSellingOrderModel: GraphQLSelectionSet {
        public static let possibleTypes = ["SellingOrderModel"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("orderCode", type: .scalar(String.self)),
          GraphQLField("orderSource", type: .scalar(OrderSource.self)),
          GraphQLField("status", type: .scalar(OrderStatus.self)),
          GraphQLField("buyer", type: .object(Buyer.selections)),
          GraphQLField("products", type: .list(.object(Product.selections))),
          GraphQLField("userCoupons", type: .list(.object(UserCoupon.selections))),
          GraphQLField("salePrice", type: .scalar(Int.self)),
          GraphQLField("transactionFeeRate", type: .scalar(Double.self)),
          GraphQLField("transactionFeeTotalPrice", type: .scalar(Int.self)),
          GraphQLField("purchasePrice", type: .scalar(Int.self)),
          GraphQLField("paidPrice", type: .scalar(Int.self)),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("taxTotalPrice", type: .scalar(Int.self)),
          GraphQLField("shippingTotalPrice", type: .scalar(Int.self)),
          GraphQLField("liveDiscount", type: .scalar(Int.self)),
          GraphQLField("discountTotalPrice", type: .scalar(Int.self)),
          GraphQLField("shippingAddressSnapshot", type: .object(ShippingAddressSnapshot.selections)),
          GraphQLField("payment", type: .object(Payment.selections)),
          GraphQLField("paidAt", type: .scalar(Double.self)),
          GraphQLField("deliverStartAt", type: .scalar(Double.self)),
          GraphQLField("deliverEndAt", type: .scalar(Double.self)),
          GraphQLField("fulfilledAt", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("trackingNumber", type: .scalar(String.self)),
          GraphQLField("shippingCarrier", type: .scalar(String.self)),
          GraphQLField("tracker", type: .object(Tracker.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, orderCode: String? = nil, orderSource: OrderSource? = nil, status: OrderStatus? = nil, buyer: Buyer? = nil, products: [Product?]? = nil, userCoupons: [UserCoupon?]? = nil, salePrice: Int? = nil, transactionFeeRate: Double? = nil, transactionFeeTotalPrice: Int? = nil, purchasePrice: Int? = nil, paidPrice: Int? = nil, isFreeShipping: Bool? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, liveDiscount: Int? = nil, discountTotalPrice: Int? = nil, shippingAddressSnapshot: ShippingAddressSnapshot? = nil, payment: Payment? = nil, paidAt: Double? = nil, deliverStartAt: Double? = nil, deliverEndAt: Double? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, trackingNumber: String? = nil, shippingCarrier: String? = nil, tracker: Tracker? = nil) {
          self.init(unsafeResultMap: ["__typename": "SellingOrderModel", "_id": _id, "orderCode": orderCode, "orderSource": orderSource, "status": status, "buyer": buyer.flatMap { (value: Buyer) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "userCoupons": userCoupons.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, "salePrice": salePrice, "transactionFeeRate": transactionFeeRate, "transactionFeeTotalPrice": transactionFeeTotalPrice, "purchasePrice": purchasePrice, "paidPrice": paidPrice, "isFreeShipping": isFreeShipping, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "liveDiscount": liveDiscount, "discountTotalPrice": discountTotalPrice, "shippingAddressSnapshot": shippingAddressSnapshot.flatMap { (value: ShippingAddressSnapshot) -> ResultMap in value.resultMap }, "payment": payment.flatMap { (value: Payment) -> ResultMap in value.resultMap }, "paidAt": paidAt, "deliverStartAt": deliverStartAt, "deliverEndAt": deliverEndAt, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "updatedAt": updatedAt, "trackingNumber": trackingNumber, "shippingCarrier": shippingCarrier, "tracker": tracker.flatMap { (value: Tracker) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 订单编号
        public var orderCode: String? {
          get {
            return resultMap["orderCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderCode")
          }
        }

        /// 订单来源
        public var orderSource: OrderSource? {
          get {
            return resultMap["orderSource"] as? OrderSource
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderSource")
          }
        }

        /// 订单状态
        public var status: OrderStatus? {
          get {
            return resultMap["status"] as? OrderStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 买家用户信息
        public var buyer: Buyer? {
          get {
            return (resultMap["buyer"] as? ResultMap).flatMap { Buyer(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "buyer")
          }
        }

        /// 商品信息
        public var products: [Product?]? {
          get {
            return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
          }
        }

        /// 用户领取的优惠劵
        public var userCoupons: [UserCoupon?]? {
          get {
            return (resultMap["userCoupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [UserCoupon?] in value.map { (value: ResultMap?) -> UserCoupon? in value.flatMap { (value: ResultMap) -> UserCoupon in UserCoupon(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, forKey: "userCoupons")
          }
        }

        /// 直播价格 * 购买数量。Seller 订单计算/详情页面的 Sale Price
        public var salePrice: Int? {
          get {
            return resultMap["salePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "salePrice")
          }
        }

        /// Seller 订单计算/详情页面的 Trasaction Fee 百分比
        public var transactionFeeRate: Double? {
          get {
            return resultMap["transactionFeeRate"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "transactionFeeRate")
          }
        }

        /// Seller 订单计算/详情页面的 Trasaction Fee 数值，单位：分
        public var transactionFeeTotalPrice: Int? {
          get {
            return resultMap["transactionFeeTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "transactionFeeTotalPrice")
          }
        }

        /// 常规价格 * 购买数量。Buyer 订单计算/详情页面的 Purchase Price
        public var purchasePrice: Int? {
          get {
            return resultMap["purchasePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "purchasePrice")
          }
        }

        /// 支付金额。Buyer / Seller 订单计算/详情页面的 Total
        public var paidPrice: Int? {
          get {
            return resultMap["paidPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidPrice")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 税金额。订单计算页面的 Tax
        public var taxTotalPrice: Int? {
          get {
            return resultMap["taxTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "taxTotalPrice")
          }
        }

        /// 快递费用。订单计算页面的 Shipping
        public var shippingTotalPrice: Int? {
          get {
            return resultMap["shippingTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "shippingTotalPrice")
          }
        }

        /// （常规价格 - 直播价格）* 购买数量。订单计算页面的 Discount
        public var liveDiscount: Int? {
          get {
            return resultMap["liveDiscount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveDiscount")
          }
        }

        /// 优惠券折扣金额。订单计算页面的 Coupon Discount. 注意和 Discount 区分开
        public var discountTotalPrice: Int? {
          get {
            return resultMap["discountTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountTotalPrice")
          }
        }

        /// 买家收货地址的详细信息
        public var shippingAddressSnapshot: ShippingAddressSnapshot? {
          get {
            return (resultMap["shippingAddressSnapshot"] as? ResultMap).flatMap { ShippingAddressSnapshot(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingAddressSnapshot")
          }
        }

        /// 用户如果尝试支付过此订单，会有此字段（无论是否支付成功）
        public var payment: Payment? {
          get {
            return (resultMap["payment"] as? ResultMap).flatMap { Payment(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "payment")
          }
        }

        /// 支付时间
        public var paidAt: Double? {
          get {
            return resultMap["paidAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidAt")
          }
        }

        /// 快递开始时间
        public var deliverStartAt: Double? {
          get {
            return resultMap["deliverStartAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "deliverStartAt")
          }
        }

        /// 快递结束时间
        public var deliverEndAt: Double? {
          get {
            return resultMap["deliverEndAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "deliverEndAt")
          }
        }

        /// 订单完成时间
        public var fulfilledAt: Double? {
          get {
            return resultMap["fulfilledAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "fulfilledAt")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 快递单号
        public var trackingNumber: String? {
          get {
            return resultMap["trackingNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "trackingNumber")
          }
        }

        /// 快递公司
        public var shippingCarrier: String? {
          get {
            return resultMap["shippingCarrier"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shippingCarrier")
          }
        }

        /// 订单快递追踪id
        public var tracker: Tracker? {
          get {
            return (resultMap["tracker"] as? ResultMap).flatMap { Tracker(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "tracker")
          }
        }

        public struct Buyer: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, username: String? = nil, avatar: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "username": username, "avatar": avatar])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["OrderProduct"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("product", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("images", type: .nonNull(.list(.nonNull(.object(Image.selections))))),
            GraphQLField("regularPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("livePrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("isFreeShipping", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
            GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chosenTag", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(product: GraphQLID, name: String, description: String? = nil, images: [Image], regularPrice: Int, livePrice: Int, isFreeShipping: Bool, shippingInfo: ShippingInfo? = nil, quantity: Int, chosenTag: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "OrderProduct", "product": product, "name": name, "description": description, "images": images.map { (value: Image) -> ResultMap in value.resultMap }, "regularPrice": regularPrice, "livePrice": livePrice, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "quantity": quantity, "chosenTag": chosenTag])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 商品 ID
          public var product: GraphQLID {
            get {
              return resultMap["product"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "product")
            }
          }

          /// 商品名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 商品描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 商品图片
          public var images: [Image] {
            get {
              return (resultMap["images"] as! [ResultMap]).map { (value: ResultMap) -> Image in Image(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Image) -> ResultMap in value.resultMap }, forKey: "images")
            }
          }

          /// 商品原价
          public var regularPrice: Int {
            get {
              return resultMap["regularPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 商品直播价
          public var livePrice: Int {
            get {
              return resultMap["livePrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 商品是否包邮
          public var isFreeShipping: Bool {
            get {
              return resultMap["isFreeShipping"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isFreeShipping")
            }
          }

          /// 商品邮寄方式信息
          public var shippingInfo: ShippingInfo? {
            get {
              return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
            }
          }

          /// 商品购买数量
          public var quantity: Int {
            get {
              return resultMap["quantity"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          /// 选定的商品标签
          @available(*, deprecated, message: "use chosenVariantName instead")
          public var chosenTag: String? {
            get {
              return resultMap["chosenTag"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "chosenTag")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }

          public struct ShippingInfo: GraphQLSelectionSet {
            public static let possibleTypes = ["OrderProductShippingInfo"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("companyName", type: .scalar(String.self)),
              GraphQLField("method", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(companyName: String? = nil, method: String? = nil, price: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "OrderProductShippingInfo", "companyName": companyName, "method": method, "price": price])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var companyName: String? {
              get {
                return resultMap["companyName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "companyName")
              }
            }

            public var method: String? {
              get {
                return resultMap["method"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "method")
              }
            }

            public var price: Int? {
              get {
                return resultMap["price"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "price")
              }
            }
          }
        }

        public struct UserCoupon: GraphQLSelectionSet {
          public static let possibleTypes = ["userCoupon"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("live", type: .object(Live.selections)),
            GraphQLField("coupon", type: .object(Coupon.selections)),
            GraphQLField("discountType", type: .scalar(enum__discountType.self)),
            GraphQLField("value", type: .scalar(Int.self)),
            GraphQLField("used", type: .scalar(Bool.self)),
            GraphQLField("usedAt", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("deleted", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, live: Live? = nil, coupon: Coupon? = nil, discountType: enum__discountType? = nil, value: Int? = nil, used: Bool? = nil, usedAt: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, deleted: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "userCoupon", "_id": _id, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "coupon": coupon.flatMap { (value: Coupon) -> ResultMap in value.resultMap }, "discountType": discountType, "value": value, "used": used, "usedAt": usedAt, "createdAt": createdAt, "updatedAt": updatedAt, "deleted": deleted])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          public var coupon: Coupon? {
            get {
              return (resultMap["coupon"] as? ResultMap).flatMap { Coupon(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "coupon")
            }
          }

          /// 优惠券类型
          public var discountType: enum__discountType? {
            get {
              return resultMap["discountType"] as? enum__discountType
            }
            set {
              resultMap.updateValue(newValue, forKey: "discountType")
            }
          }

          /// 折扣数值，百分比折扣则为百分比数值，按金额折扣则为金额数值
          public var value: Int? {
            get {
              return resultMap["value"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          /// 是否已使用，true 表示已使用
          public var used: Bool? {
            get {
              return resultMap["used"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "used")
            }
          }

          /// 使用时间
          public var usedAt: String? {
            get {
              return resultMap["usedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "usedAt")
            }
          }

          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var deleted: Bool? {
            get {
              return resultMap["deleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "deleted")
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["userCoupon_live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "userCoupon_live", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct Coupon: GraphQLSelectionSet {
            public static let possibleTypes = ["userCoupon_coupon"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "userCoupon_coupon", "_id": _id, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }
        }

        public struct ShippingAddressSnapshot: GraphQLSelectionSet {
          public static let possibleTypes = ["Address"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("addressLine1", type: .scalar(String.self)),
            GraphQLField("addressLine2", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("zipCode", type: .scalar(String.self)),
            GraphQLField("addressType", type: .scalar(enum__addressType.self)),
            GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// firstName
          public var firstName: String? {
            get {
              return resultMap["firstName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "firstName")
            }
          }

          /// lastName
          public var lastName: String? {
            get {
              return resultMap["lastName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastName")
            }
          }

          /// phoneNumber
          public var phoneNumber: String? {
            get {
              return resultMap["phoneNumber"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          /// addressLine1
          public var addressLine1: String? {
            get {
              return resultMap["addressLine1"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine1")
            }
          }

          /// addressLine2
          public var addressLine2: String? {
            get {
              return resultMap["addressLine2"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine2")
            }
          }

          /// city
          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          /// state
          public var state: String? {
            get {
              return resultMap["state"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "state")
            }
          }

          /// country
          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          /// zipCode
          public var zipCode: String? {
            get {
              return resultMap["zipCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zipCode")
            }
          }

          /// ShippingAddress or BillingAddress
          public var addressType: enum__addressType? {
            get {
              return resultMap["addressType"] as? enum__addressType
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressType")
            }
          }

          /// 是否为默认
          public var isDefaultAddress: Bool? {
            get {
              return resultMap["isDefaultAddress"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDefaultAddress")
            }
          }
        }

        public struct Payment: GraphQLSelectionSet {
          public static let possibleTypes = ["SellerOrderPayment"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(PaymentStatus.self)),
            GraphQLField("paymentMethodType", type: .scalar(PaymentMethod.self)),
            GraphQLField("paymentMethodDetail", type: .object(PaymentMethodDetail.selections)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(status: PaymentStatus? = nil, paymentMethodType: PaymentMethod? = nil, paymentMethodDetail: PaymentMethodDetail? = nil, createdAt: Double? = nil, updatedAt: Double? = nil) {
            self.init(unsafeResultMap: ["__typename": "SellerOrderPayment", "status": status, "paymentMethodType": paymentMethodType, "paymentMethodDetail": paymentMethodDetail.flatMap { (value: PaymentMethodDetail) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 支付状态
          public var status: PaymentStatus? {
            get {
              return resultMap["status"] as? PaymentStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 支付渠道
          public var paymentMethodType: PaymentMethod? {
            get {
              return resultMap["paymentMethodType"] as? PaymentMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "paymentMethodType")
            }
          }

          /// 支付详情。CreditCard支付时这里有卡片信息。ApplePay/GooglePay 由于实际操作中拿不到邮箱等信息，该字段为空
          public var paymentMethodDetail: PaymentMethodDetail? {
            get {
              return (resultMap["paymentMethodDetail"] as? ResultMap).flatMap { PaymentMethodDetail(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "paymentMethodDetail")
            }
          }

          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct PaymentMethodDetail: GraphQLSelectionSet {
            public static let possibleTypes = ["OrderPaymentMethodDetail"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("card", type: .object(Card.selections)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(card: Card? = nil) {
              self.init(unsafeResultMap: ["__typename": "OrderPaymentMethodDetail", "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var card: Card? {
              get {
                return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "card")
              }
            }

            public struct Card: GraphQLSelectionSet {
              public static let possibleTypes = ["OrderCardPaymentMethodDetail"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("last4", type: .scalar(String.self)),
                GraphQLField("brand", type: .scalar(String.self)),
                GraphQLField("brandIcon", type: .scalar(String.self)),
                GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(last4: String? = nil, brand: String? = nil, brandIcon: String? = nil, stripePaymentMethodId: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "OrderCardPaymentMethodDetail", "last4": last4, "brand": brand, "brandIcon": brandIcon, "stripePaymentMethodId": stripePaymentMethodId])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 卡号后 4 位
              public var last4: String? {
                get {
                  return resultMap["last4"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "last4")
                }
              }

              /// 发卡机构, 对应 UI 上的`Bank Name`
              public var brand: String? {
                get {
                  return resultMap["brand"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brand")
                }
              }

              /// 发卡机构图片
              public var brandIcon: String? {
                get {
                  return resultMap["brandIcon"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brandIcon")
                }
              }

              /// stripe payment method id
              public var stripePaymentMethodId: String? {
                get {
                  return resultMap["stripePaymentMethodId"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
                }
              }
            }
          }
        }

        public struct Tracker: GraphQLSelectionSet {
          public static let possibleTypes = ["Tracker"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil) {
            self.init(unsafeResultMap: ["__typename": "Tracker", "_id": _id])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }
        }
      }

      public var asBuyingOrderModel: AsBuyingOrderModel? {
        get {
          if !AsBuyingOrderModel.possibleTypes.contains(__typename) { return nil }
          return AsBuyingOrderModel(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsBuyingOrderModel: GraphQLSelectionSet {
        public static let possibleTypes = ["BuyingOrderModel"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("orderCode", type: .scalar(String.self)),
          GraphQLField("orderSource", type: .scalar(OrderSource.self)),
          GraphQLField("status", type: .scalar(OrderStatus.self)),
          GraphQLField("seller", type: .object(Seller.selections)),
          GraphQLField("products", type: .list(.object(Product.selections))),
          GraphQLField("userCoupons", type: .list(.object(UserCoupon.selections))),
          GraphQLField("purchasePrice", type: .scalar(Int.self)),
          GraphQLField("paidPrice", type: .scalar(Int.self)),
          GraphQLField("isFreeShipping", type: .scalar(Bool.self)),
          GraphQLField("taxTotalPrice", type: .scalar(Int.self)),
          GraphQLField("shippingTotalPrice", type: .scalar(Int.self)),
          GraphQLField("liveDiscount", type: .scalar(Int.self)),
          GraphQLField("discountTotalPrice", type: .scalar(Int.self)),
          GraphQLField("shippingAddressSnapshot", type: .object(ShippingAddressSnapshot.selections)),
          GraphQLField("payment", type: .object(Payment.selections)),
          GraphQLField("paidAt", type: .scalar(Double.self)),
          GraphQLField("deliverStartAt", type: .scalar(Double.self)),
          GraphQLField("deliverEndAt", type: .scalar(Double.self)),
          GraphQLField("fulfilledAt", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("trackingNumber", type: .scalar(String.self)),
          GraphQLField("shippingCarrier", type: .scalar(String.self)),
          GraphQLField("tracker", type: .object(Tracker.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, orderCode: String? = nil, orderSource: OrderSource? = nil, status: OrderStatus? = nil, seller: Seller? = nil, products: [Product?]? = nil, userCoupons: [UserCoupon?]? = nil, purchasePrice: Int? = nil, paidPrice: Int? = nil, isFreeShipping: Bool? = nil, taxTotalPrice: Int? = nil, shippingTotalPrice: Int? = nil, liveDiscount: Int? = nil, discountTotalPrice: Int? = nil, shippingAddressSnapshot: ShippingAddressSnapshot? = nil, payment: Payment? = nil, paidAt: Double? = nil, deliverStartAt: Double? = nil, deliverEndAt: Double? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, trackingNumber: String? = nil, shippingCarrier: String? = nil, tracker: Tracker? = nil) {
          self.init(unsafeResultMap: ["__typename": "BuyingOrderModel", "_id": _id, "orderCode": orderCode, "orderSource": orderSource, "status": status, "seller": seller.flatMap { (value: Seller) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "userCoupons": userCoupons.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, "purchasePrice": purchasePrice, "paidPrice": paidPrice, "isFreeShipping": isFreeShipping, "taxTotalPrice": taxTotalPrice, "shippingTotalPrice": shippingTotalPrice, "liveDiscount": liveDiscount, "discountTotalPrice": discountTotalPrice, "shippingAddressSnapshot": shippingAddressSnapshot.flatMap { (value: ShippingAddressSnapshot) -> ResultMap in value.resultMap }, "payment": payment.flatMap { (value: Payment) -> ResultMap in value.resultMap }, "paidAt": paidAt, "deliverStartAt": deliverStartAt, "deliverEndAt": deliverEndAt, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "updatedAt": updatedAt, "trackingNumber": trackingNumber, "shippingCarrier": shippingCarrier, "tracker": tracker.flatMap { (value: Tracker) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 订单编号
        public var orderCode: String? {
          get {
            return resultMap["orderCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderCode")
          }
        }

        /// 订单来源
        public var orderSource: OrderSource? {
          get {
            return resultMap["orderSource"] as? OrderSource
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderSource")
          }
        }

        /// 订单状态
        public var status: OrderStatus? {
          get {
            return resultMap["status"] as? OrderStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 卖家用户信息
        public var seller: Seller? {
          get {
            return (resultMap["seller"] as? ResultMap).flatMap { Seller(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "seller")
          }
        }

        /// 商品信息
        public var products: [Product?]? {
          get {
            return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
          }
        }

        /// 用户领取的优惠劵
        public var userCoupons: [UserCoupon?]? {
          get {
            return (resultMap["userCoupons"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [UserCoupon?] in value.map { (value: ResultMap?) -> UserCoupon? in value.flatMap { (value: ResultMap) -> UserCoupon in UserCoupon(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [UserCoupon?]) -> [ResultMap?] in value.map { (value: UserCoupon?) -> ResultMap? in value.flatMap { (value: UserCoupon) -> ResultMap in value.resultMap } } }, forKey: "userCoupons")
          }
        }

        /// 常规价格 * 购买数量。订单计算页面的 Purchase Price
        public var purchasePrice: Int? {
          get {
            return resultMap["purchasePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "purchasePrice")
          }
        }

        /// 支付金额。订单计算页面的 Total
        public var paidPrice: Int? {
          get {
            return resultMap["paidPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidPrice")
          }
        }

        /// 是否包邮
        public var isFreeShipping: Bool? {
          get {
            return resultMap["isFreeShipping"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isFreeShipping")
          }
        }

        /// 税金额。订单计算页面的 Tax
        public var taxTotalPrice: Int? {
          get {
            return resultMap["taxTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "taxTotalPrice")
          }
        }

        /// 快递费用。订单计算页面的 Shipping
        public var shippingTotalPrice: Int? {
          get {
            return resultMap["shippingTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "shippingTotalPrice")
          }
        }

        /// （常规价格 - 直播价格）* 购买数量。订单计算页面的 Discount
        public var liveDiscount: Int? {
          get {
            return resultMap["liveDiscount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveDiscount")
          }
        }

        /// 优惠券折扣金额。订单计算页面的 Coupon Discount. 注意和 Discount 区分开
        public var discountTotalPrice: Int? {
          get {
            return resultMap["discountTotalPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "discountTotalPrice")
          }
        }

        /// 买家收货地址的详细信息
        public var shippingAddressSnapshot: ShippingAddressSnapshot? {
          get {
            return (resultMap["shippingAddressSnapshot"] as? ResultMap).flatMap { ShippingAddressSnapshot(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "shippingAddressSnapshot")
          }
        }

        /// 用户如果尝试支付过此订单，会有此字段（无论是否支付成功）
        public var payment: Payment? {
          get {
            return (resultMap["payment"] as? ResultMap).flatMap { Payment(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "payment")
          }
        }

        /// 支付时间
        public var paidAt: Double? {
          get {
            return resultMap["paidAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidAt")
          }
        }

        /// 快递开始时间
        public var deliverStartAt: Double? {
          get {
            return resultMap["deliverStartAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "deliverStartAt")
          }
        }

        /// 快递结束时间
        public var deliverEndAt: Double? {
          get {
            return resultMap["deliverEndAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "deliverEndAt")
          }
        }

        /// 订单完成时间
        public var fulfilledAt: Double? {
          get {
            return resultMap["fulfilledAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "fulfilledAt")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 快递单号
        public var trackingNumber: String? {
          get {
            return resultMap["trackingNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "trackingNumber")
          }
        }

        /// 快递公司
        public var shippingCarrier: String? {
          get {
            return resultMap["shippingCarrier"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shippingCarrier")
          }
        }

        /// 订单快递追踪id
        public var tracker: Tracker? {
          get {
            return (resultMap["tracker"] as? ResultMap).flatMap { Tracker(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "tracker")
          }
        }

        public struct Seller: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("username", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, username: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "username": username])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["OrderProduct"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("product", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("images", type: .nonNull(.list(.nonNull(.object(Image.selections))))),
            GraphQLField("regularPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("livePrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("variants", type: .list(.object(Variant.selections))),
            GraphQLField("isFreeShipping", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("shippingInfo", type: .object(ShippingInfo.selections)),
            GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chosenTag", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(product: GraphQLID, name: String, description: String? = nil, images: [Image], regularPrice: Int, livePrice: Int, variants: [Variant?]? = nil, isFreeShipping: Bool, shippingInfo: ShippingInfo? = nil, quantity: Int, chosenTag: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "OrderProduct", "product": product, "name": name, "description": description, "images": images.map { (value: Image) -> ResultMap in value.resultMap }, "regularPrice": regularPrice, "livePrice": livePrice, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, "isFreeShipping": isFreeShipping, "shippingInfo": shippingInfo.flatMap { (value: ShippingInfo) -> ResultMap in value.resultMap }, "quantity": quantity, "chosenTag": chosenTag])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 商品 ID
          public var product: GraphQLID {
            get {
              return resultMap["product"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "product")
            }
          }

          /// 商品名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 商品描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 商品图片
          public var images: [Image] {
            get {
              return (resultMap["images"] as! [ResultMap]).map { (value: ResultMap) -> Image in Image(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Image) -> ResultMap in value.resultMap }, forKey: "images")
            }
          }

          /// 商品原价
          public var regularPrice: Int {
            get {
              return resultMap["regularPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 商品直播价
          public var livePrice: Int {
            get {
              return resultMap["livePrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 商品款式
          public var variants: [Variant?]? {
            get {
              return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
            }
          }

          /// 商品是否包邮
          public var isFreeShipping: Bool {
            get {
              return resultMap["isFreeShipping"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isFreeShipping")
            }
          }

          /// 商品邮寄方式信息
          public var shippingInfo: ShippingInfo? {
            get {
              return (resultMap["shippingInfo"] as? ResultMap).flatMap { ShippingInfo(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "shippingInfo")
            }
          }

          /// 商品购买数量
          public var quantity: Int {
            get {
              return resultMap["quantity"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          /// 选定的商品标签
          @available(*, deprecated, message: "use chosenVariantName instead")
          public var chosenTag: String? {
            get {
              return resultMap["chosenTag"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "chosenTag")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }

          public struct Variant: GraphQLSelectionSet {
            public static let possibleTypes = ["Variant"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("sku", type: .scalar(String.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// variant id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 属性名
            public var name: String? {
              get {
                return resultMap["name"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// sku number
            public var sku: String? {
              get {
                return resultMap["sku"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "sku")
              }
            }

            /// 库存
            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }

          public struct ShippingInfo: GraphQLSelectionSet {
            public static let possibleTypes = ["OrderProductShippingInfo"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("companyName", type: .scalar(String.self)),
              GraphQLField("method", type: .scalar(String.self)),
              GraphQLField("price", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(companyName: String? = nil, method: String? = nil, price: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "OrderProductShippingInfo", "companyName": companyName, "method": method, "price": price])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var companyName: String? {
              get {
                return resultMap["companyName"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "companyName")
              }
            }

            public var method: String? {
              get {
                return resultMap["method"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "method")
              }
            }

            public var price: Int? {
              get {
                return resultMap["price"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "price")
              }
            }
          }
        }

        public struct UserCoupon: GraphQLSelectionSet {
          public static let possibleTypes = ["userCoupon"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("live", type: .object(Live.selections)),
            GraphQLField("coupon", type: .object(Coupon.selections)),
            GraphQLField("discountType", type: .scalar(enum__discountType.self)),
            GraphQLField("value", type: .scalar(Int.self)),
            GraphQLField("used", type: .scalar(Bool.self)),
            GraphQLField("usedAt", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("deleted", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, live: Live? = nil, coupon: Coupon? = nil, discountType: enum__discountType? = nil, value: Int? = nil, used: Bool? = nil, usedAt: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, deleted: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "userCoupon", "_id": _id, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "coupon": coupon.flatMap { (value: Coupon) -> ResultMap in value.resultMap }, "discountType": discountType, "value": value, "used": used, "usedAt": usedAt, "createdAt": createdAt, "updatedAt": updatedAt, "deleted": deleted])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          public var coupon: Coupon? {
            get {
              return (resultMap["coupon"] as? ResultMap).flatMap { Coupon(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "coupon")
            }
          }

          /// 优惠券类型
          public var discountType: enum__discountType? {
            get {
              return resultMap["discountType"] as? enum__discountType
            }
            set {
              resultMap.updateValue(newValue, forKey: "discountType")
            }
          }

          /// 折扣数值，百分比折扣则为百分比数值，按金额折扣则为金额数值
          public var value: Int? {
            get {
              return resultMap["value"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          /// 是否已使用，true 表示已使用
          public var used: Bool? {
            get {
              return resultMap["used"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "used")
            }
          }

          /// 使用时间
          public var usedAt: String? {
            get {
              return resultMap["usedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "usedAt")
            }
          }

          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var deleted: Bool? {
            get {
              return resultMap["deleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "deleted")
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["userCoupon_live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "userCoupon_live", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct Coupon: GraphQLSelectionSet {
            public static let possibleTypes = ["userCoupon_coupon"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("quantity", type: .scalar(Int.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, quantity: Int? = nil) {
              self.init(unsafeResultMap: ["__typename": "userCoupon_coupon", "_id": _id, "quantity": quantity])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            public var quantity: Int? {
              get {
                return resultMap["quantity"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "quantity")
              }
            }
          }
        }

        public struct ShippingAddressSnapshot: GraphQLSelectionSet {
          public static let possibleTypes = ["Address"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("addressLine1", type: .scalar(String.self)),
            GraphQLField("addressLine2", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("zipCode", type: .scalar(String.self)),
            GraphQLField("addressType", type: .scalar(enum__addressType.self)),
            GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// firstName
          public var firstName: String? {
            get {
              return resultMap["firstName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "firstName")
            }
          }

          /// lastName
          public var lastName: String? {
            get {
              return resultMap["lastName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastName")
            }
          }

          /// phoneNumber
          public var phoneNumber: String? {
            get {
              return resultMap["phoneNumber"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          /// addressLine1
          public var addressLine1: String? {
            get {
              return resultMap["addressLine1"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine1")
            }
          }

          /// addressLine2
          public var addressLine2: String? {
            get {
              return resultMap["addressLine2"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine2")
            }
          }

          /// city
          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          /// state
          public var state: String? {
            get {
              return resultMap["state"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "state")
            }
          }

          /// country
          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          /// zipCode
          public var zipCode: String? {
            get {
              return resultMap["zipCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zipCode")
            }
          }

          /// ShippingAddress or BillingAddress
          public var addressType: enum__addressType? {
            get {
              return resultMap["addressType"] as? enum__addressType
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressType")
            }
          }

          /// 是否为默认
          public var isDefaultAddress: Bool? {
            get {
              return resultMap["isDefaultAddress"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDefaultAddress")
            }
          }
        }

        public struct Payment: GraphQLSelectionSet {
          public static let possibleTypes = ["BuyerOrderPayment"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(PaymentStatus.self)),
            GraphQLField("paymentMethodType", type: .scalar(PaymentMethod.self)),
            GraphQLField("paymentMethodDetail", type: .object(PaymentMethodDetail.selections)),
            GraphQLField("paymentIntentsId", type: .scalar(String.self)),
            GraphQLField("paymentIntentsClientSecret", type: .scalar(String.self)),
            GraphQLField("lastPaymentErrorCode", type: .scalar(String.self)),
            GraphQLField("lastPaymentErrorMessage", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(Double.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(status: PaymentStatus? = nil, paymentMethodType: PaymentMethod? = nil, paymentMethodDetail: PaymentMethodDetail? = nil, paymentIntentsId: String? = nil, paymentIntentsClientSecret: String? = nil, lastPaymentErrorCode: String? = nil, lastPaymentErrorMessage: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil) {
            self.init(unsafeResultMap: ["__typename": "BuyerOrderPayment", "status": status, "paymentMethodType": paymentMethodType, "paymentMethodDetail": paymentMethodDetail.flatMap { (value: PaymentMethodDetail) -> ResultMap in value.resultMap }, "paymentIntentsId": paymentIntentsId, "paymentIntentsClientSecret": paymentIntentsClientSecret, "lastPaymentErrorCode": lastPaymentErrorCode, "lastPaymentErrorMessage": lastPaymentErrorMessage, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 支付状态
          public var status: PaymentStatus? {
            get {
              return resultMap["status"] as? PaymentStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 支付渠道
          public var paymentMethodType: PaymentMethod? {
            get {
              return resultMap["paymentMethodType"] as? PaymentMethod
            }
            set {
              resultMap.updateValue(newValue, forKey: "paymentMethodType")
            }
          }

          /// 支付详情。CreditCard支付时这里有卡片信息。ApplePay/GooglePay 由于实际操作中拿不到邮箱等信息，该字段为空
          public var paymentMethodDetail: PaymentMethodDetail? {
            get {
              return (resultMap["paymentMethodDetail"] as? ResultMap).flatMap { PaymentMethodDetail(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "paymentMethodDetail")
            }
          }

          /// stripe payment intents id
          public var paymentIntentsId: String? {
            get {
              return resultMap["paymentIntentsId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "paymentIntentsId")
            }
          }

          /// stripe payment intents client secret
          public var paymentIntentsClientSecret: String? {
            get {
              return resultMap["paymentIntentsClientSecret"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "paymentIntentsClientSecret")
            }
          }

          /// 尝试支付并失败后有此字段。上次支付失败的错误码
          public var lastPaymentErrorCode: String? {
            get {
              return resultMap["lastPaymentErrorCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastPaymentErrorCode")
            }
          }

          /// 尝试支付并失败后有此字段。上次支付失败的错误描述
          public var lastPaymentErrorMessage: String? {
            get {
              return resultMap["lastPaymentErrorMessage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastPaymentErrorMessage")
            }
          }

          public var createdAt: Double? {
            get {
              return resultMap["createdAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public struct PaymentMethodDetail: GraphQLSelectionSet {
            public static let possibleTypes = ["OrderPaymentMethodDetail"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("card", type: .object(Card.selections)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(card: Card? = nil) {
              self.init(unsafeResultMap: ["__typename": "OrderPaymentMethodDetail", "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var card: Card? {
              get {
                return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
              }
              set {
                resultMap.updateValue(newValue?.resultMap, forKey: "card")
              }
            }

            public struct Card: GraphQLSelectionSet {
              public static let possibleTypes = ["OrderCardPaymentMethodDetail"]

              public static let selections: [GraphQLSelection] = [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("last4", type: .scalar(String.self)),
                GraphQLField("brand", type: .scalar(String.self)),
                GraphQLField("brandIcon", type: .scalar(String.self)),
                GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
              ]

              public private(set) var resultMap: ResultMap

              public init(unsafeResultMap: ResultMap) {
                self.resultMap = unsafeResultMap
              }

              public init(last4: String? = nil, brand: String? = nil, brandIcon: String? = nil, stripePaymentMethodId: String? = nil) {
                self.init(unsafeResultMap: ["__typename": "OrderCardPaymentMethodDetail", "last4": last4, "brand": brand, "brandIcon": brandIcon, "stripePaymentMethodId": stripePaymentMethodId])
              }

              public var __typename: String {
                get {
                  return resultMap["__typename"]! as! String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "__typename")
                }
              }

              /// 卡号后 4 位
              public var last4: String? {
                get {
                  return resultMap["last4"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "last4")
                }
              }

              /// 发卡机构, 对应 UI 上的`Bank Name`
              public var brand: String? {
                get {
                  return resultMap["brand"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brand")
                }
              }

              /// 发卡机构图片
              public var brandIcon: String? {
                get {
                  return resultMap["brandIcon"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "brandIcon")
                }
              }

              /// stripe payment method id
              public var stripePaymentMethodId: String? {
                get {
                  return resultMap["stripePaymentMethodId"] as? String
                }
                set {
                  resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
                }
              }
            }
          }
        }

        public struct Tracker: GraphQLSelectionSet {
          public static let possibleTypes = ["Tracker"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil) {
            self.init(unsafeResultMap: ["__typename": "Tracker", "_id": _id])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }
        }
      }
    }
  }
}

public final class AppCountUnreadInboxNotificationQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appCountUnreadInboxNotification {
      appCountUnreadInboxNotification
    }
    """

  public let operationName = "appCountUnreadInboxNotification"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appCountUnreadInboxNotification", type: .nonNull(.scalar(Int.self))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appCountUnreadInboxNotification: Int) {
      self.init(unsafeResultMap: ["__typename": "Query", "appCountUnreadInboxNotification": appCountUnreadInboxNotification])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 拉取未读 inbox 通知数量，只能获取最近三个月的通知
    public var appCountUnreadInboxNotification: Int {
      get {
        return resultMap["appCountUnreadInboxNotification"]! as! Int
      }
      set {
        resultMap.updateValue(newValue, forKey: "appCountUnreadInboxNotification")
      }
    }
  }
}

public final class GetUserOfflineMsgCountQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getUserOfflineMsgCount {
      getUserOfflineMsgCount {
        __typename
        count
      }
    }
    """

  public let operationName = "getUserOfflineMsgCount"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUserOfflineMsgCount", type: .object(GetUserOfflineMsgCount.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getUserOfflineMsgCount: GetUserOfflineMsgCount? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getUserOfflineMsgCount": getUserOfflineMsgCount.flatMap { (value: GetUserOfflineMsgCount) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取用户离线消息数
    public var getUserOfflineMsgCount: GetUserOfflineMsgCount? {
      get {
        return (resultMap["getUserOfflineMsgCount"] as? ResultMap).flatMap { GetUserOfflineMsgCount(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getUserOfflineMsgCount")
      }
    }

    public struct GetUserOfflineMsgCount: GraphQLSelectionSet {
      public static let possibleTypes = ["getUserOfflineMsgCount"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("count", type: .scalar(Int.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(count: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "getUserOfflineMsgCount", "count": count])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var count: Int? {
        get {
          return resultMap["count"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "count")
        }
      }
    }
  }
}

public final class AlgorithmFindUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query algorithmFindUsers($page: Int, $pageSize: Int, $moduleName: algorithmFindUsers_mudelNames) {
      algorithmFindUsers(page: $page, pageSize: $pageSize, moduleName: $moduleName) {
        __typename
        _id
        recentVideo {
          __typename
          coverImage
        }
        avatar
        followed
        username
      }
    }
    """

  public let operationName = "algorithmFindUsers"

  public var page: Int?
  public var pageSize: Int?
  public var moduleName: algorithmFindUsers_mudelNames?

  public init(page: Int? = nil, pageSize: Int? = nil, moduleName: algorithmFindUsers_mudelNames? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.moduleName = moduleName
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "moduleName": moduleName]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("algorithmFindUsers", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "moduleName": GraphQLVariable("moduleName")], type: .list(.object(AlgorithmFindUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(algorithmFindUsers: [AlgorithmFindUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "algorithmFindUsers": algorithmFindUsers.flatMap { (value: [AlgorithmFindUser?]) -> [ResultMap?] in value.map { (value: AlgorithmFindUser?) -> ResultMap? in value.flatMap { (value: AlgorithmFindUser) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    public var algorithmFindUsers: [AlgorithmFindUser?]? {
      get {
        return (resultMap["algorithmFindUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindUser?] in value.map { (value: ResultMap?) -> AlgorithmFindUser? in value.flatMap { (value: ResultMap) -> AlgorithmFindUser in AlgorithmFindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindUser?]) -> [ResultMap?] in value.map { (value: AlgorithmFindUser?) -> ResultMap? in value.flatMap { (value: AlgorithmFindUser) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindUsers")
      }
    }

    public struct AlgorithmFindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("recentVideo", type: .object(RecentVideo.selections)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("followed", type: .scalar(Bool.self)),
        GraphQLField("username", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, recentVideo: RecentVideo? = nil, avatar: String? = nil, followed: Bool? = nil, username: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "recentVideo": recentVideo.flatMap { (value: RecentVideo) -> ResultMap in value.resultMap }, "avatar": avatar, "followed": followed, "username": username])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 最近的一支视频
      public var recentVideo: RecentVideo? {
        get {
          return (resultMap["recentVideo"] as? ResultMap).flatMap { RecentVideo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "recentVideo")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      public struct RecentVideo: GraphQLSelectionSet {
        public static let possibleTypes = ["recentVideo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("coverImage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(coverImage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "recentVideo", "coverImage": coverImage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }
      }
    }
  }
}

public final class FindChatroomUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findChatroomUsers($chatroomId: String!, $page: Int, $pageSize: Int) {
      findChatroomUsers(chatroomId: $chatroomId, page: $page, pageSize: $pageSize) {
        __typename
        _id
        username
        avatar
      }
    }
    """

  public let operationName = "findChatroomUsers"

  public var chatroomId: String
  public var page: Int?
  public var pageSize: Int?

  public init(chatroomId: String, page: Int? = nil, pageSize: Int? = nil) {
    self.chatroomId = chatroomId
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["chatroomId": chatroomId, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findChatroomUsers", arguments: ["chatroomId": GraphQLVariable("chatroomId"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .list(.object(FindChatroomUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findChatroomUsers: [FindChatroomUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findChatroomUsers": findChatroomUsers.flatMap { (value: [FindChatroomUser?]) -> [ResultMap?] in value.map { (value: FindChatroomUser?) -> ResultMap? in value.flatMap { (value: FindChatroomUser) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取聊天室成员
    public var findChatroomUsers: [FindChatroomUser?]? {
      get {
        return (resultMap["findChatroomUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindChatroomUser?] in value.map { (value: ResultMap?) -> FindChatroomUser? in value.flatMap { (value: ResultMap) -> FindChatroomUser in FindChatroomUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindChatroomUser?]) -> [ResultMap?] in value.map { (value: FindChatroomUser?) -> ResultMap? in value.flatMap { (value: FindChatroomUser) -> ResultMap in value.resultMap } } }, forKey: "findChatroomUsers")
      }
    }

    public struct FindChatroomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["chatroomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, username: String? = nil, avatar: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "chatroomUser", "_id": _id, "username": username, "avatar": avatar])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }
    }
  }
}

public final class HomeLivePageDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query homeLivePageData($page: Int, $pageSize: Int) {
      findBanners: algorithmFindBanners(page: 1, pageSize: 20) {
        __typename
        _id
        cover
        value
        position
        type
        note
        startAt
        endAt
        createdAt
        updateAt
      }
      hotLiveList: algorithmFindLives(page: 1, pageSize: 5, moduleName: livePage_featureLive) {
        __typename
        title
        _id
        status
        coverImage
        ivsLiveAddress
        viewCount
        likeCount
        chatroomId
        newFansCount
        startAt
        endAt
        shareLink
        collaboratingUser
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
        }
      }
      upcomingLiveList: findVideos(page: 1, pageSize: 20, videoTypes: [TEASER], sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        coverImage
        teaserTitle
        video
        viewCount
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        updatedAt
        describe
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          avatar
          username
          followed
        }
        shareLink
        hasSubscribedLive
        videoType
        live {
          __typename
          _id
          coverImage
          status
          title
          scheduleStartAt
          streamingStatus
        }
      }
      liveList: algorithmFindLives(page: 1, pageSize: 20, moduleName: livePage_live) {
        __typename
        _id
        title
        status
        coverImage
        ivsLiveAddress
        viewCount
        likeCount
        chatroomId
        newFansCount
        startAt
        endAt
        user {
          __typename
          username
          avatar
          _id
          followed
        }
      }
      postList: findVideos(page: $page, pageSize: $pageSize, videoTypes: [PAST_SHOW], sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        videoType
        coverImage
        teaserTitle
        video
        viewCount
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        updatedAt
        describe
        liveStartAt
        createdAt
        updatedAt
        deleted
        live {
          __typename
          _id
          status
          title
        }
        products {
          __typename
          product
          name
          description
          images {
            __typename
            image
            key
          }
          regularPrice
          livePrice
          productType
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
        }
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          avatar
          username
          followed
          role
        }
        shareLink
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
    }
    """

  public let operationName = "homeLivePageData"

  public var page: Int?
  public var pageSize: Int?

  public init(page: Int? = nil, pageSize: Int? = nil) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("algorithmFindBanners", alias: "findBanners", arguments: ["page": 1, "pageSize": 20], type: .list(.object(FindBanner.selections))),
      GraphQLField("algorithmFindLives", alias: "hotLiveList", arguments: ["page": 1, "pageSize": 5, "moduleName": "livePage_featureLive"], type: .list(.object(HotLiveList.selections))),
      GraphQLField("findVideos", alias: "upcomingLiveList", arguments: ["page": 1, "pageSize": 20, "videoTypes": ["TEASER"], "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(UpcomingLiveList.selections))),
      GraphQLField("algorithmFindLives", alias: "liveList", arguments: ["page": 1, "pageSize": 20, "moduleName": "livePage_live"], type: .list(.object(LiveList.selections))),
      GraphQLField("findVideos", alias: "postList", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "videoTypes": ["PAST_SHOW"], "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(PostList.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findBanners: [FindBanner?]? = nil, hotLiveList: [HotLiveList?]? = nil, upcomingLiveList: [UpcomingLiveList?]? = nil, liveList: [LiveList?]? = nil, postList: [PostList?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findBanners": findBanners.flatMap { (value: [FindBanner?]) -> [ResultMap?] in value.map { (value: FindBanner?) -> ResultMap? in value.flatMap { (value: FindBanner) -> ResultMap in value.resultMap } } }, "hotLiveList": hotLiveList.flatMap { (value: [HotLiveList?]) -> [ResultMap?] in value.map { (value: HotLiveList?) -> ResultMap? in value.flatMap { (value: HotLiveList) -> ResultMap in value.resultMap } } }, "upcomingLiveList": upcomingLiveList.flatMap { (value: [UpcomingLiveList?]) -> [ResultMap?] in value.map { (value: UpcomingLiveList?) -> ResultMap? in value.flatMap { (value: UpcomingLiveList) -> ResultMap in value.resultMap } } }, "liveList": liveList.flatMap { (value: [LiveList?]) -> [ResultMap?] in value.map { (value: LiveList?) -> ResultMap? in value.flatMap { (value: LiveList) -> ResultMap in value.resultMap } } }, "postList": postList.flatMap { (value: [PostList?]) -> [ResultMap?] in value.map { (value: PostList?) -> ResultMap? in value.flatMap { (value: PostList) -> ResultMap in value.resultMap } } }])
    }

    /// 算法查询banner，显示规则由后端控制，前端仅需显示. 此接口无需翻页，仅保留分页参数以保持兼容
    public var findBanners: [FindBanner?]? {
      get {
        return (resultMap["findBanners"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindBanner?] in value.map { (value: ResultMap?) -> FindBanner? in value.flatMap { (value: ResultMap) -> FindBanner in FindBanner(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindBanner?]) -> [ResultMap?] in value.map { (value: FindBanner?) -> ResultMap? in value.flatMap { (value: FindBanner) -> ResultMap in value.resultMap } } }, forKey: "findBanners")
      }
    }

    /// 客户端根据页面模块查询直播列表
    public var hotLiveList: [HotLiveList?]? {
      get {
        return (resultMap["hotLiveList"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [HotLiveList?] in value.map { (value: ResultMap?) -> HotLiveList? in value.flatMap { (value: ResultMap) -> HotLiveList in HotLiveList(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [HotLiveList?]) -> [ResultMap?] in value.map { (value: HotLiveList?) -> ResultMap? in value.flatMap { (value: HotLiveList) -> ResultMap in value.resultMap } } }, forKey: "hotLiveList")
      }
    }

    /// 客户端查询用户视频列表
    public var upcomingLiveList: [UpcomingLiveList?]? {
      get {
        return (resultMap["upcomingLiveList"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [UpcomingLiveList?] in value.map { (value: ResultMap?) -> UpcomingLiveList? in value.flatMap { (value: ResultMap) -> UpcomingLiveList in UpcomingLiveList(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [UpcomingLiveList?]) -> [ResultMap?] in value.map { (value: UpcomingLiveList?) -> ResultMap? in value.flatMap { (value: UpcomingLiveList) -> ResultMap in value.resultMap } } }, forKey: "upcomingLiveList")
      }
    }

    /// 客户端根据页面模块查询直播列表
    public var liveList: [LiveList?]? {
      get {
        return (resultMap["liveList"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [LiveList?] in value.map { (value: ResultMap?) -> LiveList? in value.flatMap { (value: ResultMap) -> LiveList in LiveList(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [LiveList?]) -> [ResultMap?] in value.map { (value: LiveList?) -> ResultMap? in value.flatMap { (value: LiveList) -> ResultMap in value.resultMap } } }, forKey: "liveList")
      }
    }

    /// 客户端查询用户视频列表
    public var postList: [PostList?]? {
      get {
        return (resultMap["postList"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [PostList?] in value.map { (value: ResultMap?) -> PostList? in value.flatMap { (value: ResultMap) -> PostList in PostList(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [PostList?]) -> [ResultMap?] in value.map { (value: PostList?) -> ResultMap? in value.flatMap { (value: PostList) -> ResultMap in value.resultMap } } }, forKey: "postList")
      }
    }

    public struct FindBanner: GraphQLSelectionSet {
      public static let possibleTypes = ["Banner"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("cover", type: .nonNull(.scalar(String.self))),
        GraphQLField("value", type: .scalar(String.self)),
        GraphQLField("position", type: .scalar(Int.self)),
        GraphQLField("type", type: .nonNull(.scalar(bannerTypeField.self))),
        GraphQLField("note", type: .scalar(String.self)),
        GraphQLField("startAt", type: .scalar(String.self)),
        GraphQLField("endAt", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .scalar(String.self)),
        GraphQLField("updateAt", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, cover: String, value: String? = nil, position: Int? = nil, type: bannerTypeField, note: String? = nil, startAt: String? = nil, endAt: String? = nil, createdAt: String? = nil, updateAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Banner", "_id": _id, "cover": cover, "value": value, "position": position, "type": type, "note": note, "startAt": startAt, "endAt": endAt, "createdAt": createdAt, "updateAt": updateAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var cover: String {
        get {
          return resultMap["cover"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "cover")
        }
      }

      /// 点击 banner 跳转页面时，跳转对象的值。比如跳转 VIDEO/TEASER，此值就是 video 的 id。当 type 为 BLANK 时，此值为 null
      public var value: String? {
        get {
          return resultMap["value"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      /// 【Admin Dashboard 专用】排序权重, 1-10. 编号 1 表示排第一位，2 表示第二位，以此类推. 客户端 2.0.2 以前的版本已使用了此字段，为保持兼容性暂时不限制权限，但应尽快去掉该字段
      public var position: Int? {
        get {
          return resultMap["position"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "position")
        }
      }

      /// Banner 类型
      public var type: bannerTypeField {
        get {
          return resultMap["type"]! as! bannerTypeField
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 备注
      public var note: String? {
        get {
          return resultMap["note"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "note")
        }
      }

      /// 开始在 app 上展示的日期
      public var startAt: String? {
        get {
          return resultMap["startAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 停止在 app 上展示的日期
      public var endAt: String? {
        get {
          return resultMap["endAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      @available(*, deprecated, message: "早期接口这里定义成 String，和现有规范不合，请使用 createdTime 代替")
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      @available(*, deprecated, message: "早期接口这里定义成 String，和现有规范不合，请使用 updatedTime 代替")
      public var updateAt: String? {
        get {
          return resultMap["updateAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updateAt")
        }
      }
    }

    public struct HotLiveList: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(title: String? = nil, _id: GraphQLID? = nil, status: Bool? = nil, coverImage: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, chatroomId: String? = nil, newFansCount: Int? = nil, startAt: Double? = nil, endAt: Double? = nil, shareLink: String? = nil, collaboratingUser: GraphQLID? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "title": title, "_id": _id, "status": status, "coverImage": coverImage, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "likeCount": likeCount, "chatroomId": chatroomId, "newFansCount": newFansCount, "startAt": startAt, "endAt": endAt, "shareLink": shareLink, "collaboratingUser": collaboratingUser, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }
    }

    public struct UpcomingLiveList: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, describe: String? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, hasSubscribedLive: Bool? = nil, videoType: VideoType? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "describe": describe, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "hasSubscribedLive": hasSubscribedLive, "videoType": videoType, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, status: Bool? = nil, title: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "status": status, "title": title, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }

    public struct LiveList: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, title: String? = nil, status: Bool? = nil, coverImage: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, chatroomId: String? = nil, newFansCount: Int? = nil, startAt: Double? = nil, endAt: Double? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "title": title, "status": status, "coverImage": coverImage, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "likeCount": likeCount, "chatroomId": chatroomId, "newFansCount": newFansCount, "startAt": startAt, "endAt": endAt, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, avatar: String? = nil, _id: GraphQLID? = nil, followed: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "avatar": avatar, "_id": _id, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }
    }

    public struct PostList: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, describe: String? = nil, createdAt: Double? = nil, deleted: Bool? = nil, live: Live? = nil, products: [Product?]? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, hasSubscribedLive: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "describe": describe, "createdAt": createdAt, "deleted": deleted, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "hasSubscribedLive": hasSubscribedLive])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 创建日期
      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// ***【接口权限: 普通登录用户】***
      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, status: Bool? = nil, title: String? = nil, coverImage: String? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "status": status, "title": title, "coverImage": coverImage, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["PastShowProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 商品 ID
        public var product: String? {
          get {
            return resultMap["product"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "product")
          }
        }

        /// 商品名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 商品描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 商品图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 商品直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }
    }
  }
}

public final class LinkUserInstagramInfoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation linkUserInstagramInfo($code: String!) {
      linkUserInstagramInfo(code: $code) {
        __typename
        id
        username
        homePage
      }
    }
    """

  public let operationName = "linkUserInstagramInfo"

  public var code: String

  public init(code: String) {
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("linkUserInstagramInfo", arguments: ["code": GraphQLVariable("code")], type: .object(LinkUserInstagramInfo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(linkUserInstagramInfo: LinkUserInstagramInfo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "linkUserInstagramInfo": linkUserInstagramInfo.flatMap { (value: LinkUserInstagramInfo) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 绑定用户Instagram信息
    public var linkUserInstagramInfo: LinkUserInstagramInfo? {
      get {
        return (resultMap["linkUserInstagramInfo"] as? ResultMap).flatMap { LinkUserInstagramInfo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "linkUserInstagramInfo")
      }
    }

    public struct LinkUserInstagramInfo: GraphQLSelectionSet {
      public static let possibleTypes = ["socialInfo"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("homePage", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "socialInfo", "id": id, "username": username, "homePage": homePage])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String? {
        get {
          return resultMap["id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      public var homePage: String? {
        get {
          return resultMap["homePage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "homePage")
        }
      }
    }
  }
}

public final class ListOrderQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query ListOrder($page: Int, $pageSize: Int, $sort: [findOrders_sort], $target: enum__listOrderAction!, $status: [OrderStatus]) {
      listOrder(page: $page, pageSize: $pageSize, sort: $sort, target: $target, status: $status) {
        __typename
        ... on SellingOrderModel {
          _id
          status
          buyer {
            __typename
            _id
            username
            avatar
          }
          products {
            __typename
            product
            name
            regularPrice
            livePrice
            images {
              __typename
              image
              key
            }
            quantity
          }
          paidPrice
          fulfilledAt
          createdAt
          orderSource
          live {
            __typename
            title
          }
          store {
            __typename
            storeName
          }
          purchasePrice
        }
        ... on BuyingOrderModel {
          _id
          status
          seller {
            __typename
            _id
            username
          }
          products {
            __typename
            product
            name
            images {
              __typename
              image
              key
            }
            quantity
          }
          paidPrice
          fulfilledAt
          createdAt
          orderSource
          live {
            __typename
            title
          }
          store {
            __typename
            storeName
          }
          purchasePrice
        }
      }
    }
    """

  public let operationName = "ListOrder"

  public var page: Int?
  public var pageSize: Int?
  public var sort: [findOrders_sort?]?
  public var target: enum__listOrderAction
  public var status: [OrderStatus?]?

  public init(page: Int? = nil, pageSize: Int? = nil, sort: [findOrders_sort?]? = nil, target: enum__listOrderAction, status: [OrderStatus?]? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.sort = sort
    self.target = target
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "sort": sort, "target": target, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listOrder", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "sort": GraphQLVariable("sort"), "target": GraphQLVariable("target"), "status": GraphQLVariable("status")], type: .list(.object(ListOrder.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(listOrder: [ListOrder?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "listOrder": listOrder.flatMap { (value: [ListOrder?]) -> [ResultMap?] in value.map { (value: ListOrder?) -> ResultMap? in value.flatMap { (value: ListOrder) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【客户端专用接口】买家查找自己购买过的订单列表, 或者卖家查找顾客下单的订单列表。
    public var listOrder: [ListOrder?]? {
      get {
        return (resultMap["listOrder"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [ListOrder?] in value.map { (value: ResultMap?) -> ListOrder? in value.flatMap { (value: ResultMap) -> ListOrder in ListOrder(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [ListOrder?]) -> [ResultMap?] in value.map { (value: ListOrder?) -> ResultMap? in value.flatMap { (value: ListOrder) -> ResultMap in value.resultMap } } }, forKey: "listOrder")
      }
    }

    public struct ListOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["SellingOrderModel", "BuyingOrderModel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLTypeCase(
          variants: ["SellingOrderModel": AsSellingOrderModel.selections, "BuyingOrderModel": AsBuyingOrderModel.selections],
          default: [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          ]
        )
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public static func makeSellingOrderModel(_id: GraphQLID? = nil, status: OrderStatus? = nil, buyer: AsSellingOrderModel.Buyer? = nil, products: [AsSellingOrderModel.Product?]? = nil, paidPrice: Int? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, orderSource: OrderSource? = nil, live: AsSellingOrderModel.Live? = nil, store: AsSellingOrderModel.Store? = nil, purchasePrice: Int? = nil) -> ListOrder {
        return ListOrder(unsafeResultMap: ["__typename": "SellingOrderModel", "_id": _id, "status": status, "buyer": buyer.flatMap { (value: AsSellingOrderModel.Buyer) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [AsSellingOrderModel.Product?]) -> [ResultMap?] in value.map { (value: AsSellingOrderModel.Product?) -> ResultMap? in value.flatMap { (value: AsSellingOrderModel.Product) -> ResultMap in value.resultMap } } }, "paidPrice": paidPrice, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "orderSource": orderSource, "live": live.flatMap { (value: AsSellingOrderModel.Live) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: AsSellingOrderModel.Store) -> ResultMap in value.resultMap }, "purchasePrice": purchasePrice])
      }

      public static func makeBuyingOrderModel(_id: GraphQLID? = nil, status: OrderStatus? = nil, seller: AsBuyingOrderModel.Seller? = nil, products: [AsBuyingOrderModel.Product?]? = nil, paidPrice: Int? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, orderSource: OrderSource? = nil, live: AsBuyingOrderModel.Live? = nil, store: AsBuyingOrderModel.Store? = nil, purchasePrice: Int? = nil) -> ListOrder {
        return ListOrder(unsafeResultMap: ["__typename": "BuyingOrderModel", "_id": _id, "status": status, "seller": seller.flatMap { (value: AsBuyingOrderModel.Seller) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [AsBuyingOrderModel.Product?]) -> [ResultMap?] in value.map { (value: AsBuyingOrderModel.Product?) -> ResultMap? in value.flatMap { (value: AsBuyingOrderModel.Product) -> ResultMap in value.resultMap } } }, "paidPrice": paidPrice, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "orderSource": orderSource, "live": live.flatMap { (value: AsBuyingOrderModel.Live) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: AsBuyingOrderModel.Store) -> ResultMap in value.resultMap }, "purchasePrice": purchasePrice])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var asSellingOrderModel: AsSellingOrderModel? {
        get {
          if !AsSellingOrderModel.possibleTypes.contains(__typename) { return nil }
          return AsSellingOrderModel(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsSellingOrderModel: GraphQLSelectionSet {
        public static let possibleTypes = ["SellingOrderModel"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("status", type: .scalar(OrderStatus.self)),
          GraphQLField("buyer", type: .object(Buyer.selections)),
          GraphQLField("products", type: .list(.object(Product.selections))),
          GraphQLField("paidPrice", type: .scalar(Int.self)),
          GraphQLField("fulfilledAt", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("orderSource", type: .scalar(OrderSource.self)),
          GraphQLField("live", type: .object(Live.selections)),
          GraphQLField("store", type: .object(Store.selections)),
          GraphQLField("purchasePrice", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, status: OrderStatus? = nil, buyer: Buyer? = nil, products: [Product?]? = nil, paidPrice: Int? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, orderSource: OrderSource? = nil, live: Live? = nil, store: Store? = nil, purchasePrice: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "SellingOrderModel", "_id": _id, "status": status, "buyer": buyer.flatMap { (value: Buyer) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "paidPrice": paidPrice, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "orderSource": orderSource, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: Store) -> ResultMap in value.resultMap }, "purchasePrice": purchasePrice])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 订单状态
        public var status: OrderStatus? {
          get {
            return resultMap["status"] as? OrderStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 买家用户信息
        public var buyer: Buyer? {
          get {
            return (resultMap["buyer"] as? ResultMap).flatMap { Buyer(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "buyer")
          }
        }

        /// 商品信息
        public var products: [Product?]? {
          get {
            return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
          }
        }

        /// 支付金额。Buyer / Seller 订单计算/详情页面的 Total
        public var paidPrice: Int? {
          get {
            return resultMap["paidPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidPrice")
          }
        }

        /// 订单完成时间
        public var fulfilledAt: Double? {
          get {
            return resultMap["fulfilledAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "fulfilledAt")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 订单来源
        public var orderSource: OrderSource? {
          get {
            return resultMap["orderSource"] as? OrderSource
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderSource")
          }
        }

        /// 【直播购物】来自哪次直播
        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        /// 【小店购物】来自小店
        public var store: Store? {
          get {
            return (resultMap["store"] as? ResultMap).flatMap { Store(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "store")
          }
        }

        /// 常规价格 * 购买数量。Buyer 订单计算/详情页面的 Purchase Price
        public var purchasePrice: Int? {
          get {
            return resultMap["purchasePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "purchasePrice")
          }
        }

        public struct Buyer: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, username: String? = nil, avatar: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "username": username, "avatar": avatar])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["OrderProduct"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("product", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("regularPrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("livePrice", type: .nonNull(.scalar(Int.self))),
            GraphQLField("images", type: .nonNull(.list(.nonNull(.object(Image.selections))))),
            GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(product: GraphQLID, name: String, regularPrice: Int, livePrice: Int, images: [Image], quantity: Int) {
            self.init(unsafeResultMap: ["__typename": "OrderProduct", "product": product, "name": name, "regularPrice": regularPrice, "livePrice": livePrice, "images": images.map { (value: Image) -> ResultMap in value.resultMap }, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 商品 ID
          public var product: GraphQLID {
            get {
              return resultMap["product"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "product")
            }
          }

          /// 商品名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 商品原价
          public var regularPrice: Int {
            get {
              return resultMap["regularPrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "regularPrice")
            }
          }

          /// 商品直播价
          public var livePrice: Int {
            get {
              return resultMap["livePrice"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "livePrice")
            }
          }

          /// 商品图片
          public var images: [Image] {
            get {
              return (resultMap["images"] as! [ResultMap]).map { (value: ResultMap) -> Image in Image(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Image) -> ResultMap in value.resultMap }, forKey: "images")
            }
          }

          /// 商品购买数量
          public var quantity: Int {
            get {
              return resultMap["quantity"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("title", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }

        public struct Store: GraphQLSelectionSet {
          public static let possibleTypes = ["AppStore"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("storeName", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(storeName: String) {
            self.init(unsafeResultMap: ["__typename": "AppStore", "storeName": storeName])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 店名
          public var storeName: String {
            get {
              return resultMap["storeName"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "storeName")
            }
          }
        }
      }

      public var asBuyingOrderModel: AsBuyingOrderModel? {
        get {
          if !AsBuyingOrderModel.possibleTypes.contains(__typename) { return nil }
          return AsBuyingOrderModel(unsafeResultMap: resultMap)
        }
        set {
          guard let newValue = newValue else { return }
          resultMap = newValue.resultMap
        }
      }

      public struct AsBuyingOrderModel: GraphQLSelectionSet {
        public static let possibleTypes = ["BuyingOrderModel"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("status", type: .scalar(OrderStatus.self)),
          GraphQLField("seller", type: .object(Seller.selections)),
          GraphQLField("products", type: .list(.object(Product.selections))),
          GraphQLField("paidPrice", type: .scalar(Int.self)),
          GraphQLField("fulfilledAt", type: .scalar(Double.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("orderSource", type: .scalar(OrderSource.self)),
          GraphQLField("live", type: .object(Live.selections)),
          GraphQLField("store", type: .object(Store.selections)),
          GraphQLField("purchasePrice", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, status: OrderStatus? = nil, seller: Seller? = nil, products: [Product?]? = nil, paidPrice: Int? = nil, fulfilledAt: Double? = nil, createdAt: Double? = nil, orderSource: OrderSource? = nil, live: Live? = nil, store: Store? = nil, purchasePrice: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "BuyingOrderModel", "_id": _id, "status": status, "seller": seller.flatMap { (value: Seller) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "paidPrice": paidPrice, "fulfilledAt": fulfilledAt, "createdAt": createdAt, "orderSource": orderSource, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "store": store.flatMap { (value: Store) -> ResultMap in value.resultMap }, "purchasePrice": purchasePrice])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 订单状态
        public var status: OrderStatus? {
          get {
            return resultMap["status"] as? OrderStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 卖家用户信息
        public var seller: Seller? {
          get {
            return (resultMap["seller"] as? ResultMap).flatMap { Seller(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "seller")
          }
        }

        /// 商品信息
        public var products: [Product?]? {
          get {
            return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
          }
        }

        /// 支付金额。订单计算页面的 Total
        public var paidPrice: Int? {
          get {
            return resultMap["paidPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidPrice")
          }
        }

        /// 订单完成时间
        public var fulfilledAt: Double? {
          get {
            return resultMap["fulfilledAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "fulfilledAt")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 订单来源
        public var orderSource: OrderSource? {
          get {
            return resultMap["orderSource"] as? OrderSource
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderSource")
          }
        }

        /// 【直播购物】来自哪次直播
        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        /// 【小店购物】来自小店
        public var store: Store? {
          get {
            return (resultMap["store"] as? ResultMap).flatMap { Store(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "store")
          }
        }

        /// 常规价格 * 购买数量。订单计算页面的 Purchase Price
        public var purchasePrice: Int? {
          get {
            return resultMap["purchasePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "purchasePrice")
          }
        }

        public struct Seller: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("username", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, username: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "username": username])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }
        }

        public struct Product: GraphQLSelectionSet {
          public static let possibleTypes = ["OrderProduct"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("product", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("images", type: .nonNull(.list(.nonNull(.object(Image.selections))))),
            GraphQLField("quantity", type: .nonNull(.scalar(Int.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(product: GraphQLID, name: String, images: [Image], quantity: Int) {
            self.init(unsafeResultMap: ["__typename": "OrderProduct", "product": product, "name": name, "images": images.map { (value: Image) -> ResultMap in value.resultMap }, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 商品 ID
          public var product: GraphQLID {
            get {
              return resultMap["product"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "product")
            }
          }

          /// 商品名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 商品图片
          public var images: [Image] {
            get {
              return (resultMap["images"] as! [ResultMap]).map { (value: ResultMap) -> Image in Image(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: Image) -> ResultMap in value.resultMap }, forKey: "images")
            }
          }

          /// 商品购买数量
          public var quantity: Int {
            get {
              return resultMap["quantity"]! as! Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          public struct Image: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("title", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }

        public struct Store: GraphQLSelectionSet {
          public static let possibleTypes = ["AppViewStore"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("storeName", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(storeName: String) {
            self.init(unsafeResultMap: ["__typename": "AppViewStore", "storeName": storeName])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 店名
          public var storeName: String {
            get {
              return resultMap["storeName"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "storeName")
            }
          }
        }
      }
    }
  }
}

public final class AppListTicketOrdersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query appListTicketOrders($page: Int!, $pageSize: Int!) {
      appListTicketOrders(page: $page, pageSize: $pageSize) {
        __typename
        pageInfo {
          __typename
          hashNextPage
        }
        edges {
          __typename
          _id
          status
          event {
            __typename
            coverImages {
              __typename
              image
              key
            }
            name
            status
          }
          totalQuantity
        }
        totalCount
      }
    }
    """

  public let operationName = "appListTicketOrders"

  public var page: Int
  public var pageSize: Int

  public init(page: Int, pageSize: Int) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appListTicketOrders", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(AppListTicketOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appListTicketOrders: AppListTicketOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appListTicketOrders": appListTicketOrders.flatMap { (value: AppListTicketOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【客户端专用接口】查找 ticket order 列表
    public var appListTicketOrders: AppListTicketOrder? {
      get {
        return (resultMap["appListTicketOrders"] as? ResultMap).flatMap { AppListTicketOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListTicketOrders")
      }
    }

    public struct AppListTicketOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["listTicketOrderResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("pageInfo", type: .nonNull(.object(PageInfo.selections))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
        GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(pageInfo: PageInfo, edges: [Edge], totalCount: Int) {
        self.init(unsafeResultMap: ["__typename": "listTicketOrderResponse", "pageInfo": pageInfo.resultMap, "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }, "totalCount": totalCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var pageInfo: PageInfo {
        get {
          return PageInfo(unsafeResultMap: resultMap["pageInfo"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "pageInfo")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["TicketOrder"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("status", type: .nonNull(.scalar(TicketOrderStatus.self))),
          GraphQLField("event", type: .nonNull(.object(Event.selections))),
          GraphQLField("totalQuantity", type: .nonNull(.scalar(Int.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, status: TicketOrderStatus, event: Event, totalQuantity: Int) {
          self.init(unsafeResultMap: ["__typename": "TicketOrder", "_id": _id, "status": status, "event": event.resultMap, "totalQuantity": totalQuantity])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 订单状态
        public var status: TicketOrderStatus {
          get {
            return resultMap["status"]! as! TicketOrderStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// event 信息
        public var event: Event {
          get {
            return Event(unsafeResultMap: resultMap["event"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "event")
          }
        }

        /// 总购买票数量
        public var totalQuantity: Int {
          get {
            return resultMap["totalQuantity"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalQuantity")
          }
        }

        public struct Event: GraphQLSelectionSet {
          public static let possibleTypes = ["Event"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("coverImages", type: .nonNull(.list(.nonNull(.object(CoverImage.selections))))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .nonNull(.scalar(EventStatus.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(coverImages: [CoverImage], name: String, status: EventStatus) {
            self.init(unsafeResultMap: ["__typename": "Event", "coverImages": coverImages.map { (value: CoverImage) -> ResultMap in value.resultMap }, "name": name, "status": status])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 活动描述图片
          public var coverImages: [CoverImage] {
            get {
              return (resultMap["coverImages"] as! [ResultMap]).map { (value: ResultMap) -> CoverImage in CoverImage(unsafeResultMap: value) }
            }
            set {
              resultMap.updateValue(newValue.map { (value: CoverImage) -> ResultMap in value.resultMap }, forKey: "coverImages")
            }
          }

          /// 活动标题
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 活动状态
          public var status: EventStatus {
            get {
              return resultMap["status"]! as! EventStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          public struct CoverImage: GraphQLSelectionSet {
            public static let possibleTypes = ["ImageWithKey"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("image", type: .scalar(String.self)),
              GraphQLField("key", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(image: String? = nil, key: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var image: String? {
              get {
                return resultMap["image"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "image")
              }
            }

            public var key: String? {
              get {
                return resultMap["key"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }
          }
        }
      }
    }
  }
}

public final class LoginByOAuthMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation loginByOAuth($provider: enum__oauthProvider!, $username: String!, $id_token: String!, $birthday: String, $code: String) {
      loginByOAuth(username: $username, provider: $provider, idToken: $id_token, birthday: $birthday, code: $code) {
        __typename
        sessionToken
        user {
          __typename
          _id
          avatar
          gender
          deviceType
          deviceId
          username
          birthday
          phoneNumber
          email
          bio
          uid
          imPassword
          createdAt
          updatedAt
          instagram {
            __typename
            id
            username
            homePage
          }
          facebook {
            __typename
            id
            username
            homePage
          }
          userType
          pushNotifications {
            __typename
            interactions
            live
            video
            order
          }
        }
      }
    }
    """

  public let operationName = "loginByOAuth"

  public var provider: enum__oauthProvider
  public var username: String
  public var id_token: String
  public var birthday: String?
  public var code: String?

  public init(provider: enum__oauthProvider, username: String, id_token: String, birthday: String? = nil, code: String? = nil) {
    self.provider = provider
    self.username = username
    self.id_token = id_token
    self.birthday = birthday
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["provider": provider, "username": username, "id_token": id_token, "birthday": birthday, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("loginByOAuth", arguments: ["username": GraphQLVariable("username"), "provider": GraphQLVariable("provider"), "idToken": GraphQLVariable("id_token"), "birthday": GraphQLVariable("birthday"), "code": GraphQLVariable("code")], type: .object(LoginByOAuth.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginByOAuth: LoginByOAuth? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginByOAuth": loginByOAuth.flatMap { (value: LoginByOAuth) -> ResultMap in value.resultMap }])
    }

    /// 第三方登录
    public var loginByOAuth: LoginByOAuth? {
      get {
        return (resultMap["loginByOAuth"] as? ResultMap).flatMap { LoginByOAuth(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "loginByOAuth")
      }
    }

    public struct LoginByOAuth: GraphQLSelectionSet {
      public static let possibleTypes = ["loginByOAuth"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("sessionToken", type: .scalar(String.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(sessionToken: String? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "loginByOAuth", "sessionToken": sessionToken, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 访问令牌
      public var sessionToken: String? {
        get {
          return resultMap["sessionToken"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sessionToken")
        }
      }

      /// 注册用户信息
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["userSelf"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(enum__gender.self)),
          GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
          GraphQLField("deviceId", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("birthday", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("bio", type: .scalar(String.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("imPassword", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("instagram", type: .object(Instagram.selections)),
          GraphQLField("facebook", type: .object(Facebook.selections)),
          GraphQLField("userType", type: .scalar(enum__userType.self)),
          GraphQLField("pushNotifications", type: .object(PushNotification.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, gender: enum__gender? = nil, deviceType: enum__deviceType? = nil, deviceId: String? = nil, username: String? = nil, birthday: String? = nil, phoneNumber: String? = nil, email: String? = nil, bio: String? = nil, uid: String? = nil, imPassword: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, instagram: Instagram? = nil, facebook: Facebook? = nil, userType: enum__userType? = nil, pushNotifications: PushNotification? = nil) {
          self.init(unsafeResultMap: ["__typename": "userSelf", "_id": _id, "avatar": avatar, "gender": gender, "deviceType": deviceType, "deviceId": deviceId, "username": username, "birthday": birthday, "phoneNumber": phoneNumber, "email": email, "bio": bio, "uid": uid, "imPassword": imPassword, "createdAt": createdAt, "updatedAt": updatedAt, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "userType": userType, "pushNotifications": pushNotifications.flatMap { (value: PushNotification) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 性别
        public var gender: enum__gender? {
          get {
            return resultMap["gender"] as? enum__gender
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        /// 设备类型
        public var deviceType: enum__deviceType? {
          get {
            return resultMap["deviceType"] as? enum__deviceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceType")
          }
        }

        /// 手机唯一识别 id，安卓的 imei，ios 的 idfa
        public var deviceId: String? {
          get {
            return resultMap["deviceId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceId")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 生日 (日/月/年) 格式 DD/MM/YYYY
        public var birthday: String? {
          get {
            return resultMap["birthday"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthday")
          }
        }

        /// 手机号
        public var phoneNumber: String? {
          get {
            return resultMap["phoneNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        /// 邮箱
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 个人介绍
        public var bio: String? {
          get {
            return resultMap["bio"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bio")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 环信IM password
        public var imPassword: String? {
          get {
            return resultMap["imPassword"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "imPassword")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// instagram
        public var instagram: Instagram? {
          get {
            return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
          }
        }

        /// facebook
        public var facebook: Facebook? {
          get {
            return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
          }
        }

        /// 用户类型。可据此字段判断是否是卖家
        public var userType: enum__userType? {
          get {
            return resultMap["userType"] as? enum__userType
          }
          set {
            resultMap.updateValue(newValue, forKey: "userType")
          }
        }

        /// 推送相关配置
        public var pushNotifications: PushNotification? {
          get {
            return (resultMap["pushNotifications"] as? ResultMap).flatMap { PushNotification(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pushNotifications")
          }
        }

        public struct Instagram: GraphQLSelectionSet {
          public static let possibleTypes = ["user_instagram"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct Facebook: GraphQLSelectionSet {
          public static let possibleTypes = ["user_facebook"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct PushNotification: GraphQLSelectionSet {
          public static let possibleTypes = ["pushNotifications"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("interactions", type: .scalar(Bool.self)),
            GraphQLField("live", type: .scalar(Bool.self)),
            GraphQLField("video", type: .scalar(Bool.self)),
            GraphQLField("order", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(interactions: Bool? = nil, live: Bool? = nil, video: Bool? = nil, order: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "pushNotifications", "interactions": interactions, "live": live, "video": video, "order": order])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// follow、like、comment、mention 推送的开关
          public var interactions: Bool? {
            get {
              return resultMap["interactions"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "interactions")
            }
          }

          /// live
          public var live: Bool? {
            get {
              return resultMap["live"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "live")
            }
          }

          /// video
          public var video: Bool? {
            get {
              return resultMap["video"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// order
          public var order: Bool? {
            get {
              return resultMap["order"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "order")
            }
          }
        }
      }
    }
  }
}

public final class LoginMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation login($phoneNumber: String!, $password: String!) {
      login(phoneNumber: $phoneNumber, password: $password) {
        __typename
        sessionToken
        user {
          __typename
          _id
          avatar
          gender
          deviceType
          deviceId
          username
          birthday
          phoneNumber
          email
          website
          bio
          uid
          createdAt
          updatedAt
          instagram {
            __typename
            id
            username
            homePage
          }
          facebook {
            __typename
            id
            username
            homePage
          }
          userType
          imPassword
          pushNotifications {
            __typename
            interactions
            live
            video
            order
          }
        }
      }
    }
    """

  public let operationName = "login"

  public var phoneNumber: String
  public var password: String

  public init(phoneNumber: String, password: String) {
    self.phoneNumber = phoneNumber
    self.password = password
  }

  public var variables: GraphQLMap? {
    return ["phoneNumber": phoneNumber, "password": password]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("login", arguments: ["phoneNumber": GraphQLVariable("phoneNumber"), "password": GraphQLVariable("password")], type: .object(Login.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(login: Login? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "login": login.flatMap { (value: Login) -> ResultMap in value.resultMap }])
    }

    /// 登陆账号
    public var login: Login? {
      get {
        return (resultMap["login"] as? ResultMap).flatMap { Login(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "login")
      }
    }

    public struct Login: GraphQLSelectionSet {
      public static let possibleTypes = ["loginResult"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("sessionToken", type: .scalar(String.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(sessionToken: String? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "loginResult", "sessionToken": sessionToken, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 访问令牌
      public var sessionToken: String? {
        get {
          return resultMap["sessionToken"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sessionToken")
        }
      }

      /// 注册用户信息
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["userSelf"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(enum__gender.self)),
          GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
          GraphQLField("deviceId", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("birthday", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("bio", type: .scalar(String.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("instagram", type: .object(Instagram.selections)),
          GraphQLField("facebook", type: .object(Facebook.selections)),
          GraphQLField("userType", type: .scalar(enum__userType.self)),
          GraphQLField("imPassword", type: .scalar(String.self)),
          GraphQLField("pushNotifications", type: .object(PushNotification.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, gender: enum__gender? = nil, deviceType: enum__deviceType? = nil, deviceId: String? = nil, username: String? = nil, birthday: String? = nil, phoneNumber: String? = nil, email: String? = nil, website: String? = nil, bio: String? = nil, uid: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, instagram: Instagram? = nil, facebook: Facebook? = nil, userType: enum__userType? = nil, imPassword: String? = nil, pushNotifications: PushNotification? = nil) {
          self.init(unsafeResultMap: ["__typename": "userSelf", "_id": _id, "avatar": avatar, "gender": gender, "deviceType": deviceType, "deviceId": deviceId, "username": username, "birthday": birthday, "phoneNumber": phoneNumber, "email": email, "website": website, "bio": bio, "uid": uid, "createdAt": createdAt, "updatedAt": updatedAt, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "userType": userType, "imPassword": imPassword, "pushNotifications": pushNotifications.flatMap { (value: PushNotification) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 性别
        public var gender: enum__gender? {
          get {
            return resultMap["gender"] as? enum__gender
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        /// 设备类型
        public var deviceType: enum__deviceType? {
          get {
            return resultMap["deviceType"] as? enum__deviceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceType")
          }
        }

        /// 手机唯一识别 id，安卓的 imei，ios 的 idfa
        public var deviceId: String? {
          get {
            return resultMap["deviceId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceId")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 生日 (日/月/年) 格式 DD/MM/YYYY
        public var birthday: String? {
          get {
            return resultMap["birthday"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthday")
          }
        }

        /// 手机号
        public var phoneNumber: String? {
          get {
            return resultMap["phoneNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        /// 邮箱
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 个人网站
        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        /// 个人介绍
        public var bio: String? {
          get {
            return resultMap["bio"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bio")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// instagram
        public var instagram: Instagram? {
          get {
            return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
          }
        }

        /// facebook
        public var facebook: Facebook? {
          get {
            return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
          }
        }

        /// 用户类型。可据此字段判断是否是卖家
        public var userType: enum__userType? {
          get {
            return resultMap["userType"] as? enum__userType
          }
          set {
            resultMap.updateValue(newValue, forKey: "userType")
          }
        }

        /// 环信IM password
        public var imPassword: String? {
          get {
            return resultMap["imPassword"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "imPassword")
          }
        }

        /// 推送相关配置
        public var pushNotifications: PushNotification? {
          get {
            return (resultMap["pushNotifications"] as? ResultMap).flatMap { PushNotification(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pushNotifications")
          }
        }

        public struct Instagram: GraphQLSelectionSet {
          public static let possibleTypes = ["user_instagram"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct Facebook: GraphQLSelectionSet {
          public static let possibleTypes = ["user_facebook"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct PushNotification: GraphQLSelectionSet {
          public static let possibleTypes = ["pushNotifications"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("interactions", type: .scalar(Bool.self)),
            GraphQLField("live", type: .scalar(Bool.self)),
            GraphQLField("video", type: .scalar(Bool.self)),
            GraphQLField("order", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(interactions: Bool? = nil, live: Bool? = nil, video: Bool? = nil, order: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "pushNotifications", "interactions": interactions, "live": live, "video": video, "order": order])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// follow、like、comment、mention 推送的开关
          public var interactions: Bool? {
            get {
              return resultMap["interactions"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "interactions")
            }
          }

          /// live
          public var live: Bool? {
            get {
              return resultMap["live"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "live")
            }
          }

          /// video
          public var video: Bool? {
            get {
              return resultMap["video"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// order
          public var order: Bool? {
            get {
              return resultMap["order"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "order")
            }
          }
        }
      }
    }
  }
}

public final class LogoffUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation logoffUser($_id: ID!, $password: String!, $logoffedReason: enum_logoffedReason!) {
      logoffUser(_id: $_id, password: $password, logoffedReason: $logoffedReason) {
        __typename
        success
        logoffedAt
      }
    }
    """

  public let operationName = "logoffUser"

  public var _id: GraphQLID
  public var password: String
  public var logoffedReason: enum_logoffedReason

  public init(_id: GraphQLID, password: String, logoffedReason: enum_logoffedReason) {
    self._id = _id
    self.password = password
    self.logoffedReason = logoffedReason
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "password": password, "logoffedReason": logoffedReason]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("logoffUser", arguments: ["_id": GraphQLVariable("_id"), "password": GraphQLVariable("password"), "logoffedReason": GraphQLVariable("logoffedReason")], type: .object(LogoffUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(logoffUser: LogoffUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "logoffUser": logoffUser.flatMap { (value: LogoffUser) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 注销账户
    public var logoffUser: LogoffUser? {
      get {
        return (resultMap["logoffUser"] as? ResultMap).flatMap { LogoffUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "logoffUser")
      }
    }

    public struct LogoffUser: GraphQLSelectionSet {
      public static let possibleTypes = ["logoffUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
        GraphQLField("logoffedAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil, logoffedAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "logoffUser", "success": success, "logoffedAt": logoffedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }

      public var logoffedAt: Double? {
        get {
          return resultMap["logoffedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "logoffedAt")
        }
      }
    }
  }
}

public final class LogoutMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation logout {
      logout {
        __typename
        success
      }
    }
    """

  public let operationName = "logout"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("logout", type: .object(Logout.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(logout: Logout? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "logout": logout.flatMap { (value: Logout) -> ResultMap in value.resultMap }])
    }

    /// 登出
    public var logout: Logout? {
      get {
        return (resultMap["logout"] as? ResultMap).flatMap { Logout(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "logout")
      }
    }

    public struct Logout: GraphQLSelectionSet {
      public static let possibleTypes = ["logout"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "logout", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 是否退出成功
      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class FindLikeVideosQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findLikeVideos($page: Int, $pageSize: Int, $users: [ID], $status: Boolean) {
      findLikeVideos(page: $page, pageSize: $pageSize, users: $users, status: $status, sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        video {
          __typename
          _id
          coverImage
          teaserTitle
          video
          viewCount
          likeCount
          commentCount
          duration
          shareCount
          recommend
          allowComment
          liveStartAt
          liked
          updatedAt
          describe
          music {
            __typename
            _id
            title
          }
          user {
            __typename
            _id
            avatar
            username
            followed
            role
          }
          shareLink
          hasSubscribedLive
          videoType
          live {
            __typename
            _id
            coverImage
            title
            status
            scheduleStartAt
            streamingStatus
          }
        }
      }
    }
    """

  public let operationName = "findLikeVideos"

  public var page: Int?
  public var pageSize: Int?
  public var users: [GraphQLID?]?
  public var status: Bool?

  public init(page: Int? = nil, pageSize: Int? = nil, users: [GraphQLID?]? = nil, status: Bool? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.users = users
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "users": users, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findLikeVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "users": GraphQLVariable("users"), "status": GraphQLVariable("status"), "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(FindLikeVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findLikeVideos: [FindLikeVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findLikeVideos": findLikeVideos.flatMap { (value: [FindLikeVideo?]) -> [ResultMap?] in value.map { (value: FindLikeVideo?) -> ResultMap? in value.flatMap { (value: FindLikeVideo) -> ResultMap in value.resultMap } } }])
    }

    /// 查看别人主页点赞的短视频
    public var findLikeVideos: [FindLikeVideo?]? {
      get {
        return (resultMap["findLikeVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindLikeVideo?] in value.map { (value: ResultMap?) -> FindLikeVideo? in value.flatMap { (value: ResultMap) -> FindLikeVideo in FindLikeVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindLikeVideo?]) -> [ResultMap?] in value.map { (value: FindLikeVideo?) -> ResultMap? in value.flatMap { (value: FindLikeVideo) -> ResultMap in value.resultMap } } }, forKey: "findLikeVideos")
      }
    }

    public struct FindLikeVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["likeVideoItem"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("video", type: .object(Video.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, video: Video? = nil) {
        self.init(unsafeResultMap: ["__typename": "likeVideoItem", "_id": _id, "video": video.flatMap { (value: Video) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      public var video: Video? {
        get {
          return (resultMap["video"] as? ResultMap).flatMap { Video(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "video")
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["video"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("teaserTitle", type: .scalar(String.self)),
          GraphQLField("video", type: .scalar(String.self)),
          GraphQLField("viewCount", type: .scalar(Int.self)),
          GraphQLField("likeCount", type: .scalar(Int.self)),
          GraphQLField("commentCount", type: .scalar(Int.self)),
          GraphQLField("duration", type: .scalar(Double.self)),
          GraphQLField("shareCount", type: .scalar(Int.self)),
          GraphQLField("recommend", type: .scalar(Int.self)),
          GraphQLField("allowComment", type: .scalar(Bool.self)),
          GraphQLField("liveStartAt", type: .scalar(Double.self)),
          GraphQLField("liked", type: .scalar(Bool.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("describe", type: .scalar(String.self)),
          GraphQLField("music", type: .object(Music.selections)),
          GraphQLField("user", type: .object(User.selections)),
          GraphQLField("shareLink", type: .scalar(String.self)),
          GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
          GraphQLField("videoType", type: .scalar(VideoType.self)),
          GraphQLField("live", type: .object(Live.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, recommend: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, describe: String? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, hasSubscribedLive: Bool? = nil, videoType: VideoType? = nil, live: Live? = nil) {
          self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "recommend": recommend, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "describe": describe, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "hasSubscribedLive": hasSubscribedLive, "videoType": videoType, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 【teaser 短视频】预告直播标题
        public var teaserTitle: String? {
          get {
            return resultMap["teaserTitle"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "teaserTitle")
          }
        }

        /// 视频播放地址
        public var video: String? {
          get {
            return resultMap["video"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// 浏览次数
        public var viewCount: Int? {
          get {
            return resultMap["viewCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "viewCount")
          }
        }

        /// 点赞次数
        public var likeCount: Int? {
          get {
            return resultMap["likeCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "likeCount")
          }
        }

        /// 评论次数
        public var commentCount: Int? {
          get {
            return resultMap["commentCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "commentCount")
          }
        }

        /// 视频时长
        public var duration: Double? {
          get {
            return resultMap["duration"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "duration")
          }
        }

        /// 分享次数
        public var shareCount: Int? {
          get {
            return resultMap["shareCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "shareCount")
          }
        }

        /// 推荐
        @available(*, deprecated, message: "此字段已废弃，请从 query 中删除")
        public var recommend: Int? {
          get {
            return resultMap["recommend"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "recommend")
          }
        }

        /// 是否允许评论
        public var allowComment: Bool? {
          get {
            return resultMap["allowComment"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "allowComment")
          }
        }

        /// 【teaser / past show 短视频】直播开始日期
        public var liveStartAt: Double? {
          get {
            return resultMap["liveStartAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveStartAt")
          }
        }

        /// 是否点赞
        public var liked: Bool? {
          get {
            return resultMap["liked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "liked")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 描述
        public var describe: String? {
          get {
            return resultMap["describe"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "describe")
          }
        }

        /// 视频中搭配的音乐
        public var music: Music? {
          get {
            return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "music")
          }
        }

        /// 作者
        public var user: User? {
          get {
            return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "user")
          }
        }

        /// video 分享链接
        public var shareLink: String? {
          get {
            return resultMap["shareLink"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "shareLink")
          }
        }

        /// 【teaser 短视频】是否已订阅对应的 live
        public var hasSubscribedLive: Bool? {
          get {
            return resultMap["hasSubscribedLive"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
          }
        }

        /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
        public var videoType: VideoType? {
          get {
            return resultMap["videoType"] as? VideoType
          }
          set {
            resultMap.updateValue(newValue, forKey: "videoType")
          }
        }

        /// 【teaser / past show 短视频】直播预告关联的直播
        public var live: Live? {
          get {
            return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "live")
          }
        }

        public struct Music: GraphQLSelectionSet {
          public static let possibleTypes = ["music"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("title", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, title: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 音乐标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["type__user"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("followed", type: .scalar(Bool.self)),
            GraphQLField("role", type: .scalar(enum__userRole.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
            self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 是否关注
          public var followed: Bool? {
            get {
              return resultMap["followed"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }

          /// 用户角色
          public var role: enum__userRole? {
            get {
              return resultMap["role"] as? enum__userRole
            }
            set {
              resultMap.updateValue(newValue, forKey: "role")
            }
          }
        }

        public struct Live: GraphQLSelectionSet {
          public static let possibleTypes = ["live"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("title", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(Bool.self)),
            GraphQLField("scheduleStartAt", type: .scalar(String.self)),
            GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
            self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 标题
          public var title: String? {
            get {
              return resultMap["title"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "title")
            }
          }

          /// 是否正在直播
          public var status: Bool? {
            get {
              return resultMap["status"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// live schedule 开始时间
          public var scheduleStartAt: String? {
            get {
              return resultMap["scheduleStartAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "scheduleStartAt")
            }
          }

          /// 直播状态，可替代早期的 status
          public var streamingStatus: LiveStreamingStatus? {
            get {
              return resultMap["streamingStatus"] as? LiveStreamingStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "streamingStatus")
            }
          }
        }
      }
    }
  }
}

public final class UserInfoQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query userInfo($_id: ID!, $users: [ID]) {
      findUsers(_id: $_id) {
        __typename
        _id
        name
        avatar
        gender
        deviceType
        deviceId
        username
        birthday
        phoneNumber
        email
        website
        bio
        createdAt
        updatedAt
        followCount
        fansCount
        likeCount
        instagram {
          __typename
          id
          username
          homePage
        }
        facebook {
          __typename
          id
          username
          homePage
        }
        followed
        hasBlocked
        liveId
        shareLink
      }
      findFollowInterests(users: $users, page: 1, pageSize: 100) {
        __typename
        interest {
          __typename
          _id
          name
          followed
          hashtags {
            __typename
            _id
            name
            userCount
            followed
          }
        }
      }
    }
    """

  public let operationName = "userInfo"

  public var _id: GraphQLID
  public var users: [GraphQLID?]?

  public init(_id: GraphQLID, users: [GraphQLID?]? = nil) {
    self._id = _id
    self.users = users
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "users": users]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findUsers", arguments: ["_id": GraphQLVariable("_id")], type: .list(.object(FindUser.selections))),
      GraphQLField("findFollowInterests", arguments: ["users": GraphQLVariable("users"), "page": 1, "pageSize": 100], type: .list(.object(FindFollowInterest.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findUsers: [FindUser?]? = nil, findFollowInterests: [FindFollowInterest?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findUsers": findUsers.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, "findFollowInterests": findFollowInterests.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }])
    }

    /// 查询用户
    public var findUsers: [FindUser?]? {
      get {
        return (resultMap["findUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindUser?] in value.map { (value: ResultMap?) -> FindUser? in value.flatMap { (value: ResultMap) -> FindUser in FindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, forKey: "findUsers")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询兴趣与用户的关联关系。此接口会过滤已被删除的 interests，因 interests 数量有限，可以适当把 pageSize 设的大一点（最大 100）或不传分页参数
    public var findFollowInterests: [FindFollowInterest?]? {
      get {
        return (resultMap["findFollowInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindFollowInterest?] in value.map { (value: ResultMap?) -> FindFollowInterest? in value.flatMap { (value: ResultMap) -> FindFollowInterest in FindFollowInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }, forKey: "findFollowInterests")
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("gender", type: .scalar(enum__gender.self)),
        GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
        GraphQLField("deviceId", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("birthday", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("website", type: .scalar(String.self)),
        GraphQLField("bio", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("followCount", type: .scalar(Int.self)),
        GraphQLField("fansCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("instagram", type: .object(Instagram.selections)),
        GraphQLField("facebook", type: .object(Facebook.selections)),
        GraphQLField("followed", type: .scalar(Bool.self)),
        GraphQLField("hasBlocked", type: .scalar(Bool.self)),
        GraphQLField("liveId", type: .scalar(GraphQLID.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, name: String? = nil, avatar: String? = nil, gender: enum__gender? = nil, deviceType: enum__deviceType? = nil, deviceId: String? = nil, username: String? = nil, birthday: String? = nil, phoneNumber: String? = nil, email: String? = nil, website: String? = nil, bio: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, followCount: Int? = nil, fansCount: Int? = nil, likeCount: Int? = nil, instagram: Instagram? = nil, facebook: Facebook? = nil, followed: Bool? = nil, hasBlocked: Bool? = nil, liveId: GraphQLID? = nil, shareLink: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "name": name, "avatar": avatar, "gender": gender, "deviceType": deviceType, "deviceId": deviceId, "username": username, "birthday": birthday, "phoneNumber": phoneNumber, "email": email, "website": website, "bio": bio, "createdAt": createdAt, "updatedAt": updatedAt, "followCount": followCount, "fansCount": fansCount, "likeCount": likeCount, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "followed": followed, "hasBlocked": hasBlocked, "liveId": liveId, "shareLink": shareLink])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 用户名字
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 性别
      public var gender: enum__gender? {
        get {
          return resultMap["gender"] as? enum__gender
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      /// 设备类型
      public var deviceType: enum__deviceType? {
        get {
          return resultMap["deviceType"] as? enum__deviceType
        }
        set {
          resultMap.updateValue(newValue, forKey: "deviceType")
        }
      }

      /// 手机唯一识别 id，安卓的 imei，ios 的 idfa
      public var deviceId: String? {
        get {
          return resultMap["deviceId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "deviceId")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 生日 (日/月/年) 格式 DD/MM/YYYY
      public var birthday: String? {
        get {
          return resultMap["birthday"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthday")
        }
      }

      /// 手机号
      public var phoneNumber: String? {
        get {
          return resultMap["phoneNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      /// 邮箱
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 个人网站
      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      /// 个人简历
      public var bio: String? {
        get {
          return resultMap["bio"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "bio")
        }
      }

      /// 创建日期
      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 关注人数
      public var followCount: Int? {
        get {
          return resultMap["followCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "followCount")
        }
      }

      /// 粉丝数
      public var fansCount: Int? {
        get {
          return resultMap["fansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "fansCount")
        }
      }

      /// 获取的点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// instagram
      public var instagram: Instagram? {
        get {
          return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
        }
      }

      /// facebook
      public var facebook: Facebook? {
        get {
          return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }

      /// 请求用户信息时，指示是否已经把此用户屏蔽
      public var hasBlocked: Bool? {
        get {
          return resultMap["hasBlocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasBlocked")
        }
      }

      /// 此用户直播间 ID，未直播时返回 null
      public var liveId: GraphQLID? {
        get {
          return resultMap["liveId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveId")
        }
      }

      /// 用户 Profile 分享链接。用户在 app 上点击分享用户时，使用此链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      public struct Instagram: GraphQLSelectionSet {
        public static let possibleTypes = ["user_instagram"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct Facebook: GraphQLSelectionSet {
        public static let possibleTypes = ["user_facebook"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }
    }

    public struct FindFollowInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["FollowInterest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("interest", type: .nonNull(.object(Interest.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(interest: Interest) {
        self.init(unsafeResultMap: ["__typename": "FollowInterest", "interest": interest.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var interest: Interest {
        get {
          return Interest(unsafeResultMap: resultMap["interest"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "interest")
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("hashtags", type: .list(.object(Hashtag.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, followed: Bool, hashtags: [Hashtag?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "followed": followed, "hashtags": hashtags.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 用户是否关注该 interest
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 查询该兴趣下的话题，参数可选
        public var hashtags: [Hashtag?]? {
          get {
            return (resultMap["hashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Hashtag?] in value.map { (value: ResultMap?) -> Hashtag? in value.flatMap { (value: ResultMap) -> Hashtag in Hashtag(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }, forKey: "hashtags")
          }
        }

        public struct Hashtag: GraphQLSelectionSet {
          public static let possibleTypes = ["Hashtag"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("userCount", type: .scalar(Int.self)),
            GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String, userCount: Int? = nil, followed: Bool) {
            self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "followed": followed])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// name
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 关注该话题的用户数
          public var userCount: Int? {
            get {
              return resultMap["userCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "userCount")
            }
          }

          /// 当前用户是否关注此 hashtag
          public var followed: Bool {
            get {
              return resultMap["followed"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }
        }
      }
    }
  }
}

public final class NearBySearchQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query nearBySearch($location: String!, $radius: Int!, $keyword: String) {
      nearBySearch(location: $location, radius: $radius, keyword: $keyword) {
        __typename
        results {
          __typename
          geometry {
            __typename
            location {
              __typename
              lng
              lat
            }
          }
          name
          place_id
          reference
          types
          vicinity
          opening_hours {
            __typename
            open_now
          }
          icon
        }
      }
    }
    """

  public let operationName = "nearBySearch"

  public var location: String
  public var radius: Int
  public var keyword: String?

  public init(location: String, radius: Int, keyword: String? = nil) {
    self.location = location
    self.radius = radius
    self.keyword = keyword
  }

  public var variables: GraphQLMap? {
    return ["location": location, "radius": radius, "keyword": keyword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("nearBySearch", arguments: ["location": GraphQLVariable("location"), "radius": GraphQLVariable("radius"), "keyword": GraphQLVariable("keyword")], type: .object(NearBySearch.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nearBySearch: NearBySearch? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nearBySearch": nearBySearch.flatMap { (value: NearBySearch) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 根据经纬度查询附近地点
    /// 文档地址：https://developers.google.com/maps/documentation/places/web-service/search-nearby
    public var nearBySearch: NearBySearch? {
      get {
        return (resultMap["nearBySearch"] as? ResultMap).flatMap { NearBySearch(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nearBySearch")
      }
    }

    public struct NearBySearch: GraphQLSelectionSet {
      public static let possibleTypes = ["nearbysearch"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("results", type: .list(.object(Result.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(results: [Result?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "nearbysearch", "results": results.flatMap { (value: [Result?]) -> [ResultMap?] in value.map { (value: Result?) -> ResultMap? in value.flatMap { (value: Result) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var results: [Result?]? {
        get {
          return (resultMap["results"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Result?] in value.map { (value: ResultMap?) -> Result? in value.flatMap { (value: ResultMap) -> Result in Result(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Result?]) -> [ResultMap?] in value.map { (value: Result?) -> ResultMap? in value.flatMap { (value: Result) -> ResultMap in value.resultMap } } }, forKey: "results")
        }
      }

      public struct Result: GraphQLSelectionSet {
        public static let possibleTypes = ["nearbysearch_results"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("geometry", type: .object(Geometry.selections)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("place_id", type: .scalar(String.self)),
          GraphQLField("reference", type: .scalar(String.self)),
          GraphQLField("types", type: .list(.scalar(String.self))),
          GraphQLField("vicinity", type: .scalar(String.self)),
          GraphQLField("opening_hours", type: .object(OpeningHour.selections)),
          GraphQLField("icon", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(geometry: Geometry? = nil, name: String? = nil, placeId: String? = nil, reference: String? = nil, types: [String?]? = nil, vicinity: String? = nil, openingHours: OpeningHour? = nil, icon: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "nearbysearch_results", "geometry": geometry.flatMap { (value: Geometry) -> ResultMap in value.resultMap }, "name": name, "place_id": placeId, "reference": reference, "types": types, "vicinity": vicinity, "opening_hours": openingHours.flatMap { (value: OpeningHour) -> ResultMap in value.resultMap }, "icon": icon])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var geometry: Geometry? {
          get {
            return (resultMap["geometry"] as? ResultMap).flatMap { Geometry(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "geometry")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var placeId: String? {
          get {
            return resultMap["place_id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "place_id")
          }
        }

        public var reference: String? {
          get {
            return resultMap["reference"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "reference")
          }
        }

        public var types: [String?]? {
          get {
            return resultMap["types"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "types")
          }
        }

        public var vicinity: String? {
          get {
            return resultMap["vicinity"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "vicinity")
          }
        }

        public var openingHours: OpeningHour? {
          get {
            return (resultMap["opening_hours"] as? ResultMap).flatMap { OpeningHour(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "opening_hours")
          }
        }

        public var icon: String? {
          get {
            return resultMap["icon"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "icon")
          }
        }

        public struct Geometry: GraphQLSelectionSet {
          public static let possibleTypes = ["nearbysearch_geometry"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("location", type: .object(Location.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(location: Location? = nil) {
            self.init(unsafeResultMap: ["__typename": "nearbysearch_geometry", "location": location.flatMap { (value: Location) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var location: Location? {
            get {
              return (resultMap["location"] as? ResultMap).flatMap { Location(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "location")
            }
          }

          public struct Location: GraphQLSelectionSet {
            public static let possibleTypes = ["location"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("lng", type: .scalar(Double.self)),
              GraphQLField("lat", type: .scalar(Double.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(lng: Double? = nil, lat: Double? = nil) {
              self.init(unsafeResultMap: ["__typename": "location", "lng": lng, "lat": lat])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var lng: Double? {
              get {
                return resultMap["lng"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "lng")
              }
            }

            public var lat: Double? {
              get {
                return resultMap["lat"] as? Double
              }
              set {
                resultMap.updateValue(newValue, forKey: "lat")
              }
            }
          }
        }

        public struct OpeningHour: GraphQLSelectionSet {
          public static let possibleTypes = ["nearbysearch_opening_hours"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("open_now", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(openNow: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "nearbysearch_opening_hours", "open_now": openNow])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var openNow: Bool? {
            get {
              return resultMap["open_now"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "open_now")
            }
          }
        }
      }
    }
  }
}

public final class PlaceDetailsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query placeDetails($place_id: String!) {
      placeDetails(place_id: $place_id) {
        __typename
        name
        vicinity
        place_id
        geometry {
          __typename
          location {
            __typename
            lat
            lng
          }
        }
      }
    }
    """

  public let operationName = "placeDetails"

  public var place_id: String

  public init(place_id: String) {
    self.place_id = place_id
  }

  public var variables: GraphQLMap? {
    return ["place_id": place_id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("placeDetails", arguments: ["place_id": GraphQLVariable("place_id")], type: .object(PlaceDetail.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(placeDetails: PlaceDetail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "placeDetails": placeDetails.flatMap { (value: PlaceDetail) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 根据地点 id 查询地点详情
    /// 文档地址：https://developers.google.com/maps/documentation/places/web-service/details
    public var placeDetails: PlaceDetail? {
      get {
        return (resultMap["placeDetails"] as? ResultMap).flatMap { PlaceDetail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "placeDetails")
      }
    }

    public struct PlaceDetail: GraphQLSelectionSet {
      public static let possibleTypes = ["placeDetails"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("vicinity", type: .scalar(String.self)),
        GraphQLField("place_id", type: .scalar(String.self)),
        GraphQLField("geometry", type: .object(Geometry.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(name: String? = nil, vicinity: String? = nil, placeId: String? = nil, geometry: Geometry? = nil) {
        self.init(unsafeResultMap: ["__typename": "placeDetails", "name": name, "vicinity": vicinity, "place_id": placeId, "geometry": geometry.flatMap { (value: Geometry) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var vicinity: String? {
        get {
          return resultMap["vicinity"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "vicinity")
        }
      }

      public var placeId: String? {
        get {
          return resultMap["place_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "place_id")
        }
      }

      public var geometry: Geometry? {
        get {
          return (resultMap["geometry"] as? ResultMap).flatMap { Geometry(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "geometry")
        }
      }

      public struct Geometry: GraphQLSelectionSet {
        public static let possibleTypes = ["placeDetails_geometry"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("location", type: .object(Location.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(location: Location? = nil) {
          self.init(unsafeResultMap: ["__typename": "placeDetails_geometry", "location": location.flatMap { (value: Location) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var location: Location? {
          get {
            return (resultMap["location"] as? ResultMap).flatMap { Location(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "location")
          }
        }

        public struct Location: GraphQLSelectionSet {
          public static let possibleTypes = ["location"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("lat", type: .scalar(Double.self)),
            GraphQLField("lng", type: .scalar(Double.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(lat: Double? = nil, lng: Double? = nil) {
            self.init(unsafeResultMap: ["__typename": "location", "lat": lat, "lng": lng])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var lat: Double? {
            get {
              return resultMap["lat"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "lat")
            }
          }

          public var lng: Double? {
            get {
              return resultMap["lng"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "lng")
            }
          }
        }
      }
    }
  }
}

public final class SelfQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query self {
      self {
        __typename
        _id
        username
        imPassword
        phoneNumber
        email
        avatar
        userType
        uid
        pushNotifications {
          __typename
          interactions
          live
          video
          order
        }
      }
    }
    """

  public let operationName = "self"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("self", type: .object(`Self`.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(`self` _self: `Self`? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "self": _self.flatMap { (value: `Self`) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取登陆用户自己的用户信息
    public var `self`: `Self`? {
      get {
        return (resultMap["self"] as? ResultMap).flatMap { `Self`(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "self")
      }
    }

    public struct `Self`: GraphQLSelectionSet {
      public static let possibleTypes = ["userSelf"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("imPassword", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("userType", type: .scalar(enum__userType.self)),
        GraphQLField("uid", type: .scalar(String.self)),
        GraphQLField("pushNotifications", type: .object(PushNotification.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, username: String? = nil, imPassword: String? = nil, phoneNumber: String? = nil, email: String? = nil, avatar: String? = nil, userType: enum__userType? = nil, uid: String? = nil, pushNotifications: PushNotification? = nil) {
        self.init(unsafeResultMap: ["__typename": "userSelf", "_id": _id, "username": username, "imPassword": imPassword, "phoneNumber": phoneNumber, "email": email, "avatar": avatar, "userType": userType, "uid": uid, "pushNotifications": pushNotifications.flatMap { (value: PushNotification) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 环信IM password
      public var imPassword: String? {
        get {
          return resultMap["imPassword"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "imPassword")
        }
      }

      /// 手机号
      public var phoneNumber: String? {
        get {
          return resultMap["phoneNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      /// 邮箱
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 用户类型。可据此字段判断是否是卖家
      public var userType: enum__userType? {
        get {
          return resultMap["userType"] as? enum__userType
        }
        set {
          resultMap.updateValue(newValue, forKey: "userType")
        }
      }

      /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
      public var uid: String? {
        get {
          return resultMap["uid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uid")
        }
      }

      /// 推送相关配置
      public var pushNotifications: PushNotification? {
        get {
          return (resultMap["pushNotifications"] as? ResultMap).flatMap { PushNotification(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pushNotifications")
        }
      }

      public struct PushNotification: GraphQLSelectionSet {
        public static let possibleTypes = ["pushNotifications"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("interactions", type: .scalar(Bool.self)),
          GraphQLField("live", type: .scalar(Bool.self)),
          GraphQLField("video", type: .scalar(Bool.self)),
          GraphQLField("order", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(interactions: Bool? = nil, live: Bool? = nil, video: Bool? = nil, order: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "pushNotifications", "interactions": interactions, "live": live, "video": video, "order": order])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// follow、like、comment、mention 推送的开关
        public var interactions: Bool? {
          get {
            return resultMap["interactions"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "interactions")
          }
        }

        /// live
        public var live: Bool? {
          get {
            return resultMap["live"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "live")
          }
        }

        /// video
        public var video: Bool? {
          get {
            return resultMap["video"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "video")
          }
        }

        /// order
        public var order: Bool? {
          get {
            return resultMap["order"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }
      }
    }
  }
}

public final class SendCodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation sendCode($phoneNumber: String!, $action: enum__msmAction!) {
      sendCode(phoneNumber: $phoneNumber, action: $action) {
        __typename
        success
        verifyCode
      }
    }
    """

  public let operationName = "sendCode"

  public var phoneNumber: String
  public var action: enum__msmAction

  public init(phoneNumber: String, action: enum__msmAction) {
    self.phoneNumber = phoneNumber
    self.action = action
  }

  public var variables: GraphQLMap? {
    return ["phoneNumber": phoneNumber, "action": action]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("sendCode", arguments: ["phoneNumber": GraphQLVariable("phoneNumber"), "action": GraphQLVariable("action")], type: .object(SendCode.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(sendCode: SendCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "sendCode": sendCode.flatMap { (value: SendCode) -> ResultMap in value.resultMap }])
    }

    /// 发送验证码
    public var sendCode: SendCode? {
      get {
        return (resultMap["sendCode"] as? ResultMap).flatMap { SendCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "sendCode")
      }
    }

    public struct SendCode: GraphQLSelectionSet {
      public static let possibleTypes = ["sendCode"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
        GraphQLField("verifyCode", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil, verifyCode: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "sendCode", "success": success, "verifyCode": verifyCode])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }

      public var verifyCode: String? {
        get {
          return resultMap["verifyCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "verifyCode")
        }
      }
    }
  }
}

public final class ShareMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation share($objectId: ID!, $type: shareType!) {
      share(objectId: $objectId, type: $type) {
        __typename
        success
      }
    }
    """

  public let operationName = "share"

  public var objectId: GraphQLID
  public var type: shareType

  public init(objectId: GraphQLID, type: shareType) {
    self.objectId = objectId
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["objectId": objectId, "type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("share", arguments: ["objectId": GraphQLVariable("objectId"), "type": GraphQLVariable("type")], type: .object(Share.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(share: Share? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "share": share.flatMap { (value: Share) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 分享
    public var share: Share? {
      get {
        return (resultMap["share"] as? ResultMap).flatMap { Share(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "share")
      }
    }

    public struct Share: GraphQLSelectionSet {
      public static let possibleTypes = ["share"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "share", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class StartLiveRecordingQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query startLiveRecording($liveId: ID!) {
      startLiveRecording(liveId: $liveId) {
        __typename
        resourceId
      }
    }
    """

  public let operationName = "startLiveRecording"

  public var liveId: GraphQLID

  public init(liveId: GraphQLID) {
    self.liveId = liveId
  }

  public var variables: GraphQLMap? {
    return ["liveId": liveId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("startLiveRecording", arguments: ["liveId": GraphQLVariable("liveId")], type: .object(StartLiveRecording.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(startLiveRecording: StartLiveRecording? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "startLiveRecording": startLiveRecording.flatMap { (value: StartLiveRecording) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 开始录制直播片段
    public var startLiveRecording: StartLiveRecording? {
      get {
        return (resultMap["startLiveRecording"] as? ResultMap).flatMap { StartLiveRecording(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "startLiveRecording")
      }
    }

    public struct StartLiveRecording: GraphQLSelectionSet {
      public static let possibleTypes = ["startLiveRecording"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("resourceId", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(resourceId: String) {
        self.init(unsafeResultMap: ["__typename": "startLiveRecording", "resourceId": resourceId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var resourceId: String {
        get {
          return resultMap["resourceId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "resourceId")
        }
      }
    }
  }
}

public final class UpdateCouponMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateCoupon($_id: ID!, $update: UpdateCouponInput!) {
      updateCoupon(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateCoupon"

  public var _id: GraphQLID
  public var update: UpdateCouponInput

  public init(_id: GraphQLID, update: UpdateCouponInput) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCoupon", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateCoupon.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateCoupon: UpdateCoupon? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateCoupon": updateCoupon.flatMap { (value: UpdateCoupon) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新优惠劵
    public var updateCoupon: UpdateCoupon? {
      get {
        return (resultMap["updateCoupon"] as? ResultMap).flatMap { UpdateCoupon(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateCoupon")
      }
    }

    public struct UpdateCoupon: GraphQLSelectionSet {
      public static let possibleTypes = ["UpdateCouponResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "UpdateCouponResponse", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateOrderMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateOrder($_id: ID!, $update: inputUpdateOrder!) {
      updateOrder(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateOrder"

  public var _id: GraphQLID
  public var update: inputUpdateOrder

  public init(_id: GraphQLID, update: inputUpdateOrder) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateOrder", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateOrder: UpdateOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateOrder": updateOrder.flatMap { (value: UpdateOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// app 端更新订单
    public var updateOrder: UpdateOrder? {
      get {
        return (resultMap["updateOrder"] as? ResultMap).flatMap { UpdateOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateOrder")
      }
    }

    public struct UpdateOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["updateOrder"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "updateOrder", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateProductMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateProduct($_id: ID!, $update: ProductUpdatesInput!) {
      updateProduct(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateProduct"

  public var _id: GraphQLID
  public var update: ProductUpdatesInput

  public init(_id: GraphQLID, update: ProductUpdatesInput) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateProduct", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateProduct.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateProduct: UpdateProduct? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateProduct": updateProduct.flatMap { (value: UpdateProduct) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新产品
    public var updateProduct: UpdateProduct? {
      get {
        return (resultMap["updateProduct"] as? ResultMap).flatMap { UpdateProduct(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateProduct")
      }
    }

    public struct UpdateProduct: GraphQLSelectionSet {
      public static let possibleTypes = ["UpdateProductResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "UpdateProductResponse", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class VerifyCodeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query verifyCode($phoneNumber: String!, $code: String!, $action: enum__msmAction!) {
      verifyCode(phoneNumber: $phoneNumber, code: $code, action: $action) {
        __typename
        result
        token
      }
    }
    """

  public let operationName = "verifyCode"

  public var phoneNumber: String
  public var code: String
  public var action: enum__msmAction

  public init(phoneNumber: String, code: String, action: enum__msmAction) {
    self.phoneNumber = phoneNumber
    self.code = code
    self.action = action
  }

  public var variables: GraphQLMap? {
    return ["phoneNumber": phoneNumber, "code": code, "action": action]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("verifyCode", arguments: ["phoneNumber": GraphQLVariable("phoneNumber"), "code": GraphQLVariable("code"), "action": GraphQLVariable("action")], type: .object(VerifyCode.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(verifyCode: VerifyCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "verifyCode": verifyCode.flatMap { (value: VerifyCode) -> ResultMap in value.resultMap }])
    }

    /// 验证验证码
    public var verifyCode: VerifyCode? {
      get {
        return (resultMap["verifyCode"] as? ResultMap).flatMap { VerifyCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "verifyCode")
      }
    }

    public struct VerifyCode: GraphQLSelectionSet {
      public static let possibleTypes = ["verifyCode"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("result", type: .scalar(Bool.self)),
        GraphQLField("token", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(result: Bool? = nil, token: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "verifyCode", "result": result, "token": token])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var result: Bool? {
        get {
          return resultMap["result"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "result")
        }
      }

      /// action 为 REGISTER/RESET_PASSWORD/BIND_PHONE 时，这里的 token 不可直接用于身份鉴权，而是在登录等接口中传入，换取真正可用于鉴权的 token
      /// 
      /// action 为 LOGIN 时，这里的 token 可直接用于身份鉴权
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }
    }
  }
}

public final class ViewHashtagMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation viewHashtag($_id: ID!) {
      viewHashtag(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "viewHashtag"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("viewHashtag", arguments: ["_id": GraphQLVariable("_id")], type: .object(ViewHashtag.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(viewHashtag: ViewHashtag? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "viewHashtag": viewHashtag.flatMap { (value: ViewHashtag) -> ResultMap in value.resultMap }])
    }

    /// 浏览次数+1
    @available(*, deprecated, message: "需求改变，客户端不需要再主动请求此接口，hashtag viewCount 改为关联视频的 viewCount 总和，由后端统计")
    public var viewHashtag: ViewHashtag? {
      get {
        return (resultMap["viewHashtag"] as? ResultMap).flatMap { ViewHashtag(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "viewHashtag")
      }
    }

    public struct ViewHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class ViewVideoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation viewVideo($id: ID!) {
      viewVideo(_id: $id) {
        __typename
        success
      }
    }
    """

  public let operationName = "viewVideo"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("viewVideo", arguments: ["_id": GraphQLVariable("id")], type: .object(ViewVideo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(viewVideo: ViewVideo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "viewVideo": viewVideo.flatMap { (value: ViewVideo) -> ResultMap in value.resultMap }])
    }

    /// 浏览视频+1
    public var viewVideo: ViewVideo? {
      get {
        return (resultMap["viewVideo"] as? ResultMap).flatMap { ViewVideo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "viewVideo")
      }
    }

    public struct ViewVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["viewVideo"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "viewVideo", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class WalletQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query wallet($users: [ID]!) {
      appStore {
        __typename
        totalBalance
        nextPayoutDate
        storeBalanceHistory {
          __typename
          startAt
          endAt
          amount
        }
      }
      findLives(page: 1, pageSize: 7, users: $users) {
        __typename
        _id
        totalRevenue
        title
      }
      appListTransfers(page: 1, pageSize: 4) {
        __typename
        edges {
          __typename
          _id
          createdAt
          transferCode
          status
          amount
        }
      }
      appListTicketOrders(pageSize: 7, target: Selling, status: [CONFIRMED, PARTIALLY_ACTIVATED, ACTIVATED, COMPLETED]) {
        __typename
        edges {
          __typename
          orderCode
          paidPrice
        }
      }
    }
    """

  public let operationName = "wallet"

  public var users: [GraphQLID?]

  public init(users: [GraphQLID?]) {
    self.users = users
  }

  public var variables: GraphQLMap? {
    return ["users": users]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("appStore", type: .object(AppStore.selections)),
      GraphQLField("findLives", arguments: ["page": 1, "pageSize": 7, "users": GraphQLVariable("users")], type: .list(.object(FindLife.selections))),
      GraphQLField("appListTransfers", arguments: ["page": 1, "pageSize": 4], type: .nonNull(.object(AppListTransfer.selections))),
      GraphQLField("appListTicketOrders", arguments: ["pageSize": 7, "target": "Selling", "status": ["CONFIRMED", "PARTIALLY_ACTIVATED", "ACTIVATED", "COMPLETED"]], type: .object(AppListTicketOrder.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(appStore: AppStore? = nil, findLives: [FindLife?]? = nil, appListTransfers: AppListTransfer, appListTicketOrders: AppListTicketOrder? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "appStore": appStore.flatMap { (value: AppStore) -> ResultMap in value.resultMap }, "findLives": findLives.flatMap { (value: [FindLife?]) -> [ResultMap?] in value.map { (value: FindLife?) -> ResultMap? in value.flatMap { (value: FindLife) -> ResultMap in value.resultMap } } }, "appListTransfers": appListTransfers.resultMap, "appListTicketOrders": appListTicketOrders.flatMap { (value: AppListTicketOrder) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 卖家, 卖家子账号】***
    /// app 端获取自己的店铺信息。此接口限 seller 访问
    public var appStore: AppStore? {
      get {
        return (resultMap["appStore"] as? ResultMap).flatMap { AppStore(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appStore")
      }
    }

    /// 客户端查询 live 列表
    public var findLives: [FindLife?]? {
      get {
        return (resultMap["findLives"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindLife?] in value.map { (value: ResultMap?) -> FindLife? in value.flatMap { (value: ResultMap) -> FindLife in FindLife(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindLife?]) -> [ResultMap?] in value.map { (value: FindLife?) -> ResultMap? in value.flatMap { (value: FindLife) -> ResultMap in value.resultMap } } }, forKey: "findLives")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    public var appListTransfers: AppListTransfer {
      get {
        return AppListTransfer(unsafeResultMap: resultMap["appListTransfers"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "appListTransfers")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 【客户端专用接口】查找 ticket order 列表
    public var appListTicketOrders: AppListTicketOrder? {
      get {
        return (resultMap["appListTicketOrders"] as? ResultMap).flatMap { AppListTicketOrder(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "appListTicketOrders")
      }
    }

    public struct AppStore: GraphQLSelectionSet {
      public static let possibleTypes = ["AppStore"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("totalBalance", type: .nonNull(.scalar(Double.self))),
        GraphQLField("nextPayoutDate", type: .nonNull(.scalar(Double.self))),
        GraphQLField("storeBalanceHistory", type: .list(.object(StoreBalanceHistory.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalBalance: Double, nextPayoutDate: Double, storeBalanceHistory: [StoreBalanceHistory?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "AppStore", "totalBalance": totalBalance, "nextPayoutDate": nextPayoutDate, "storeBalanceHistory": storeBalanceHistory.flatMap { (value: [StoreBalanceHistory?]) -> [ResultMap?] in value.map { (value: StoreBalanceHistory?) -> ResultMap? in value.flatMap { (value: StoreBalanceHistory) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 总收入（总销售收入(用户实付款) - ezze 平台费和手续费等），单位：分
      public var totalBalance: Double {
        get {
          return resultMap["totalBalance"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalBalance")
        }
      }

      /// 下次 ezze 对 seller payout 时间的时间戳
      public var nextPayoutDate: Double {
        get {
          return resultMap["nextPayoutDate"]! as! Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "nextPayoutDate")
        }
      }

      /// Store balance 列表, 最多返回 7 条数据
      public var storeBalanceHistory: [StoreBalanceHistory?]? {
        get {
          return (resultMap["storeBalanceHistory"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [StoreBalanceHistory?] in value.map { (value: ResultMap?) -> StoreBalanceHistory? in value.flatMap { (value: ResultMap) -> StoreBalanceHistory in StoreBalanceHistory(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [StoreBalanceHistory?]) -> [ResultMap?] in value.map { (value: StoreBalanceHistory?) -> ResultMap? in value.flatMap { (value: StoreBalanceHistory) -> ResultMap in value.resultMap } } }, forKey: "storeBalanceHistory")
        }
      }

      public struct StoreBalanceHistory: GraphQLSelectionSet {
        public static let possibleTypes = ["StoreBalanceHistoryItem"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("startAt", type: .scalar(Double.self)),
          GraphQLField("endAt", type: .scalar(Double.self)),
          GraphQLField("amount", type: .scalar(Double.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(startAt: Double? = nil, endAt: Double? = nil, amount: Double? = nil) {
          self.init(unsafeResultMap: ["__typename": "StoreBalanceHistoryItem", "startAt": startAt, "endAt": endAt, "amount": amount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 周期开始时间，单位毫秒
        public var startAt: Double? {
          get {
            return resultMap["startAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "startAt")
          }
        }

        /// 周期结束时间时间戳，单位毫秒
        public var endAt: Double? {
          get {
            return resultMap["endAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "endAt")
          }
        }

        /// 数值，单位分
        public var amount: Double? {
          get {
            return resultMap["amount"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }
      }
    }

    public struct FindLife: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("totalRevenue", type: .scalar(Int.self)),
        GraphQLField("title", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, totalRevenue: Int? = nil, title: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "totalRevenue": totalRevenue, "title": title])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 本场直播的总收入
      public var totalRevenue: Int? {
        get {
          return resultMap["totalRevenue"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalRevenue")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }
    }

    public struct AppListTransfer: GraphQLSelectionSet {
      public static let possibleTypes = ["listTransfersResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge]) {
        self.init(unsafeResultMap: ["__typename": "listTransfersResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["Transfer"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("transferCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(TransferStatus.self)),
          GraphQLField("amount", type: .nonNull(.scalar(Int.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, createdAt: String, transferCode: String, status: TransferStatus? = nil, amount: Int) {
          self.init(unsafeResultMap: ["__typename": "Transfer", "_id": _id, "createdAt": createdAt, "transferCode": transferCode, "status": status, "amount": amount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var createdAt: String {
          get {
            return resultMap["createdAt"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 分帐编号
        public var transferCode: String {
          get {
            return resultMap["transferCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "transferCode")
          }
        }

        @available(*, deprecated, message: "由于设计变动，此字段不再需要")
        public var status: TransferStatus? {
          get {
            return resultMap["status"] as? TransferStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 实际分帐金额
        public var amount: Int {
          get {
            return resultMap["amount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "amount")
          }
        }
      }
    }

    public struct AppListTicketOrder: GraphQLSelectionSet {
      public static let possibleTypes = ["listTicketOrderResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .nonNull(.list(.nonNull(.object(Edge.selections))))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge]) {
        self.init(unsafeResultMap: ["__typename": "listTicketOrderResponse", "edges": edges.map { (value: Edge) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge] {
        get {
          return (resultMap["edges"] as! [ResultMap]).map { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Edge) -> ResultMap in value.resultMap }, forKey: "edges")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["TicketOrder"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("orderCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("paidPrice", type: .nonNull(.scalar(Int.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(orderCode: String, paidPrice: Int) {
          self.init(unsafeResultMap: ["__typename": "TicketOrder", "orderCode": orderCode, "paidPrice": paidPrice])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 订单编号
        public var orderCode: String {
          get {
            return resultMap["orderCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orderCode")
          }
        }

        /// 支付金额。订单计算页面的 Total，单位：分
        public var paidPrice: Int {
          get {
            return resultMap["paidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "paidPrice")
          }
        }
      }
    }
  }
}

public final class FindAddressQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query FindAddress($page: Int, $pageSize: Int, $addressType: enum__addressType, $isDefaultAddress: Boolean) {
      findAddress(page: $page, pageSize: $pageSize, addressType: $addressType, isDefaultAddress: $isDefaultAddress) {
        __typename
        _id
        firstName
        lastName
        phoneNumber
        addressLine1
        addressLine2
        city
        state
        country
        zipCode
        addressType
        isDefaultAddress
      }
    }
    """

  public let operationName = "FindAddress"

  public var page: Int?
  public var pageSize: Int?
  public var addressType: enum__addressType?
  public var isDefaultAddress: Bool?

  public init(page: Int? = nil, pageSize: Int? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.addressType = addressType
    self.isDefaultAddress = isDefaultAddress
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "addressType": addressType, "isDefaultAddress": isDefaultAddress]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findAddress", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "addressType": GraphQLVariable("addressType"), "isDefaultAddress": GraphQLVariable("isDefaultAddress")], type: .list(.object(FindAddress.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findAddress: [FindAddress?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findAddress": findAddress.flatMap { (value: [FindAddress?]) -> [ResultMap?] in value.map { (value: FindAddress?) -> ResultMap? in value.flatMap { (value: FindAddress) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询 address 列表
    public var findAddress: [FindAddress?]? {
      get {
        return (resultMap["findAddress"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindAddress?] in value.map { (value: ResultMap?) -> FindAddress? in value.flatMap { (value: ResultMap) -> FindAddress in FindAddress(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindAddress?]) -> [ResultMap?] in value.map { (value: FindAddress?) -> ResultMap? in value.flatMap { (value: FindAddress) -> ResultMap in value.resultMap } } }, forKey: "findAddress")
      }
    }

    public struct FindAddress: GraphQLSelectionSet {
      public static let possibleTypes = ["Address"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("firstName", type: .scalar(String.self)),
        GraphQLField("lastName", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("addressLine1", type: .scalar(String.self)),
        GraphQLField("addressLine2", type: .scalar(String.self)),
        GraphQLField("city", type: .scalar(String.self)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("country", type: .scalar(String.self)),
        GraphQLField("zipCode", type: .scalar(String.self)),
        GraphQLField("addressType", type: .scalar(enum__addressType.self)),
        GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// firstName
      public var firstName: String? {
        get {
          return resultMap["firstName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      /// lastName
      public var lastName: String? {
        get {
          return resultMap["lastName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      /// phoneNumber
      public var phoneNumber: String? {
        get {
          return resultMap["phoneNumber"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      /// addressLine1
      public var addressLine1: String? {
        get {
          return resultMap["addressLine1"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressLine1")
        }
      }

      /// addressLine2
      public var addressLine2: String? {
        get {
          return resultMap["addressLine2"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressLine2")
        }
      }

      /// city
      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      /// state
      public var state: String? {
        get {
          return resultMap["state"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "state")
        }
      }

      /// country
      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      /// zipCode
      public var zipCode: String? {
        get {
          return resultMap["zipCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zipCode")
        }
      }

      /// ShippingAddress or BillingAddress
      public var addressType: enum__addressType? {
        get {
          return resultMap["addressType"] as? enum__addressType
        }
        set {
          resultMap.updateValue(newValue, forKey: "addressType")
        }
      }

      /// 是否为默认
      public var isDefaultAddress: Bool? {
        get {
          return resultMap["isDefaultAddress"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefaultAddress")
        }
      }
    }
  }
}

public final class FindCardsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findCards($page: Int, $pageSize: Int, $isDefaultCard: Boolean) {
      findCards(page: $page, pageSize: $pageSize, isDefaultCard: $isDefaultCard) {
        __typename
        _id
        brand
        brandIcon
        firstName
        lastName
        expiryDate
        cvvCode
        stripePaymentMethodId
        last4
        isDefaultCard
        invalidCard
        invalidFields
      }
    }
    """

  public let operationName = "findCards"

  public var page: Int?
  public var pageSize: Int?
  public var isDefaultCard: Bool?

  public init(page: Int? = nil, pageSize: Int? = nil, isDefaultCard: Bool? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.isDefaultCard = isDefaultCard
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "isDefaultCard": isDefaultCard]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findCards", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "isDefaultCard": GraphQLVariable("isDefaultCard")], type: .list(.object(FindCard.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findCards: [FindCard?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findCards": findCards.flatMap { (value: [FindCard?]) -> [ResultMap?] in value.map { (value: FindCard?) -> ResultMap? in value.flatMap { (value: FindCard) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询card
    public var findCards: [FindCard?]? {
      get {
        return (resultMap["findCards"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindCard?] in value.map { (value: ResultMap?) -> FindCard? in value.flatMap { (value: ResultMap) -> FindCard in FindCard(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindCard?]) -> [ResultMap?] in value.map { (value: FindCard?) -> ResultMap? in value.flatMap { (value: FindCard) -> ResultMap in value.resultMap } } }, forKey: "findCards")
      }
    }

    public struct FindCard: GraphQLSelectionSet {
      public static let possibleTypes = ["Card"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("brand", type: .nonNull(.scalar(String.self))),
        GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
        GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
        GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
        GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
        GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
        GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
        GraphQLField("last4", type: .nonNull(.scalar(String.self))),
        GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
        GraphQLField("invalidFields", type: .nonNull(.list(.scalar(enum__cardInvalidField.self)))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, brand: String, brandIcon: String, firstName: String, lastName: String, expiryDate: String, cvvCode: String, stripePaymentMethodId: String, last4: String, isDefaultCard: Bool, invalidCard: Bool, invalidFields: [enum__cardInvalidField?]) {
        self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "brand": brand, "brandIcon": brandIcon, "firstName": firstName, "lastName": lastName, "expiryDate": expiryDate, "cvvCode": cvvCode, "stripePaymentMethodId": stripePaymentMethodId, "last4": last4, "isDefaultCard": isDefaultCard, "invalidCard": invalidCard, "invalidFields": invalidFields])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 发卡机构, 对应 UI 上的`Bank Name`
      public var brand: String {
        get {
          return resultMap["brand"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "brand")
        }
      }

      /// 发卡机构图片
      public var brandIcon: String {
        get {
          return resultMap["brandIcon"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "brandIcon")
        }
      }

      /// firstName
      public var firstName: String {
        get {
          return resultMap["firstName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "firstName")
        }
      }

      /// lastName
      public var lastName: String {
        get {
          return resultMap["lastName"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastName")
        }
      }

      /// expiryDate
      public var expiryDate: String {
        get {
          return resultMap["expiryDate"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiryDate")
        }
      }

      /// cvvCode
      public var cvvCode: String {
        get {
          return resultMap["cvvCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "cvvCode")
        }
      }

      /// stripe payment method id
      public var stripePaymentMethodId: String {
        get {
          return resultMap["stripePaymentMethodId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
        }
      }

      /// last4
      public var last4: String {
        get {
          return resultMap["last4"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "last4")
        }
      }

      /// 是否是默认信用卡
      public var isDefaultCard: Bool {
        get {
          return resultMap["isDefaultCard"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefaultCard")
        }
      }

      /// 卡片是否无效，true 表示无效，false 表示有效
      public var invalidCard: Bool {
        get {
          return resultMap["invalidCard"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "invalidCard")
        }
      }

      /// 卡片校验无效时，具体无效的字段. 有效时为空数组
      public var invalidFields: [enum__cardInvalidField?] {
        get {
          return resultMap["invalidFields"]! as! [enum__cardInvalidField?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "invalidFields")
        }
      }
    }
  }
}

public final class FindChatroomUsersByRoomIdQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findChatroomUsersByRoomId($chatroomId: String!) {
      findChatroomUsers(chatroomId: $chatroomId) {
        __typename
        _id
        username
        avatar
      }
    }
    """

  public let operationName = "findChatroomUsersByRoomId"

  public var chatroomId: String

  public init(chatroomId: String) {
    self.chatroomId = chatroomId
  }

  public var variables: GraphQLMap? {
    return ["chatroomId": chatroomId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findChatroomUsers", arguments: ["chatroomId": GraphQLVariable("chatroomId")], type: .list(.object(FindChatroomUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findChatroomUsers: [FindChatroomUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findChatroomUsers": findChatroomUsers.flatMap { (value: [FindChatroomUser?]) -> [ResultMap?] in value.map { (value: FindChatroomUser?) -> ResultMap? in value.flatMap { (value: FindChatroomUser) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取聊天室成员
    public var findChatroomUsers: [FindChatroomUser?]? {
      get {
        return (resultMap["findChatroomUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindChatroomUser?] in value.map { (value: ResultMap?) -> FindChatroomUser? in value.flatMap { (value: ResultMap) -> FindChatroomUser in FindChatroomUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindChatroomUser?]) -> [ResultMap?] in value.map { (value: FindChatroomUser?) -> ResultMap? in value.flatMap { (value: FindChatroomUser) -> ResultMap in value.resultMap } } }, forKey: "findChatroomUsers")
      }
    }

    public struct FindChatroomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["chatroomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: String? = nil, username: String? = nil, avatar: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "chatroomUser", "_id": _id, "username": username, "avatar": avatar])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: String? {
        get {
          return resultMap["_id"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }
    }
  }
}

public final class FindCommentsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findComments($video: ID, $page: Int, $pageSize: Int, $sort: [commentSort]) {
      findComments(video: $video, page: $page, pageSize: $pageSize, sort: $sort) {
        __typename
        _id
        user {
          __typename
          _id
          avatar
          username
        }
        video
        content
        likeCount
        liked
        deleted
        createdAt
        updatedAt
      }
    }
    """

  public let operationName = "findComments"

  public var video: GraphQLID?
  public var page: Int?
  public var pageSize: Int?
  public var sort: [commentSort?]?

  public init(video: GraphQLID? = nil, page: Int? = nil, pageSize: Int? = nil, sort: [commentSort?]? = nil) {
    self.video = video
    self.page = page
    self.pageSize = pageSize
    self.sort = sort
  }

  public var variables: GraphQLMap? {
    return ["video": video, "page": page, "pageSize": pageSize, "sort": sort]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findComments", arguments: ["video": GraphQLVariable("video"), "page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "sort": GraphQLVariable("sort")], type: .list(.object(FindComment.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findComments: [FindComment?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findComments": findComments.flatMap { (value: [FindComment?]) -> [ResultMap?] in value.map { (value: FindComment?) -> ResultMap? in value.flatMap { (value: FindComment) -> ResultMap in value.resultMap } } }])
    }

    /// 短视频评论列表
    public var findComments: [FindComment?]? {
      get {
        return (resultMap["findComments"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindComment?] in value.map { (value: ResultMap?) -> FindComment? in value.flatMap { (value: ResultMap) -> FindComment in FindComment(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindComment?]) -> [ResultMap?] in value.map { (value: FindComment?) -> ResultMap? in value.flatMap { (value: FindComment) -> ResultMap in value.resultMap } } }, forKey: "findComments")
      }
    }

    public struct FindComment: GraphQLSelectionSet {
      public static let possibleTypes = ["comment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("video", type: .scalar(GraphQLID.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, user: User? = nil, video: GraphQLID? = nil, content: String? = nil, likeCount: Int? = nil, liked: Bool? = nil, deleted: Bool? = nil, createdAt: Double? = nil, updatedAt: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "comment", "_id": _id, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "video": video, "content": content, "likeCount": likeCount, "liked": liked, "deleted": deleted, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 用户名
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频id
      public var video: GraphQLID? {
        get {
          return resultMap["video"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 评论内容
      public var content: String? {
        get {
          return resultMap["content"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 点赞数量
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 是否点赞了
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 创建日期
      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }
      }
    }
  }
}

public final class FindFollowInterestsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findFollowInterests($users: [ID]!) {
      findFollowInterests(users: $users) {
        __typename
        interest {
          __typename
          _id
          name
          followed
          hashtags {
            __typename
            _id
            name
            userCount
            followed
          }
        }
      }
    }
    """

  public let operationName = "findFollowInterests"

  public var users: [GraphQLID?]

  public init(users: [GraphQLID?]) {
    self.users = users
  }

  public var variables: GraphQLMap? {
    return ["users": users]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findFollowInterests", arguments: ["users": GraphQLVariable("users")], type: .list(.object(FindFollowInterest.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findFollowInterests: [FindFollowInterest?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findFollowInterests": findFollowInterests.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询兴趣与用户的关联关系。此接口会过滤已被删除的 interests，因 interests 数量有限，可以适当把 pageSize 设的大一点（最大 100）或不传分页参数
    public var findFollowInterests: [FindFollowInterest?]? {
      get {
        return (resultMap["findFollowInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindFollowInterest?] in value.map { (value: ResultMap?) -> FindFollowInterest? in value.flatMap { (value: ResultMap) -> FindFollowInterest in FindFollowInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }, forKey: "findFollowInterests")
      }
    }

    public struct FindFollowInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["FollowInterest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("interest", type: .nonNull(.object(Interest.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(interest: Interest) {
        self.init(unsafeResultMap: ["__typename": "FollowInterest", "interest": interest.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var interest: Interest {
        get {
          return Interest(unsafeResultMap: resultMap["interest"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "interest")
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("hashtags", type: .list(.object(Hashtag.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, followed: Bool, hashtags: [Hashtag?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "followed": followed, "hashtags": hashtags.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 用户是否关注该 interest
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 查询该兴趣下的话题，参数可选
        public var hashtags: [Hashtag?]? {
          get {
            return (resultMap["hashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Hashtag?] in value.map { (value: ResultMap?) -> Hashtag? in value.flatMap { (value: ResultMap) -> Hashtag in Hashtag(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }, forKey: "hashtags")
          }
        }

        public struct Hashtag: GraphQLSelectionSet {
          public static let possibleTypes = ["Hashtag"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("userCount", type: .scalar(Int.self)),
            GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String, userCount: Int? = nil, followed: Bool) {
            self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "followed": followed])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// name
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 关注该话题的用户数
          public var userCount: Int? {
            get {
              return resultMap["userCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "userCount")
            }
          }

          /// 当前用户是否关注此 hashtag
          public var followed: Bool {
            get {
              return resultMap["followed"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }
        }
      }
    }
  }
}

public final class GetFindFollowUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getFindFollowUsers($users: [ID]) {
      findFollowUsers(users: $users) {
        __typename
        _id
      }
    }
    """

  public let operationName = "getFindFollowUsers"

  public var users: [GraphQLID?]?

  public init(users: [GraphQLID?]? = nil) {
    self.users = users
  }

  public var variables: GraphQLMap? {
    return ["users": users]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findFollowUsers", arguments: ["users": GraphQLVariable("users")], type: .list(.object(FindFollowUser.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findFollowUsers: [FindFollowUser?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findFollowUsers": findFollowUsers.flatMap { (value: [FindFollowUser?]) -> [ResultMap?] in value.map { (value: FindFollowUser?) -> ResultMap? in value.flatMap { (value: FindFollowUser) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询 follower 或 following
    public var findFollowUsers: [FindFollowUser?]? {
      get {
        return (resultMap["findFollowUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindFollowUser?] in value.map { (value: ResultMap?) -> FindFollowUser? in value.flatMap { (value: ResultMap) -> FindFollowUser in FindFollowUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindFollowUser?]) -> [ResultMap?] in value.map { (value: FindFollowUser?) -> ResultMap? in value.flatMap { (value: FindFollowUser) -> ResultMap in value.resultMap } } }, forKey: "findFollowUsers")
      }
    }

    public struct FindFollowUser: GraphQLSelectionSet {
      public static let possibleTypes = ["findFollowUsers"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil) {
        self.init(unsafeResultMap: ["__typename": "findFollowUsers", "_id": _id])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }
    }
  }
}

public final class FindKeywordsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findKeywords($name: String!) {
      findKeywords(name: $name) {
        __typename
        _id
        name
        viewCount
        deleted
      }
    }
    """

  public let operationName = "findKeywords"

  public var name: String

  public init(name: String) {
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findKeywords", arguments: ["name": GraphQLVariable("name")], type: .list(.object(FindKeyword.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findKeywords: [FindKeyword?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findKeywords": findKeywords.flatMap { (value: [FindKeyword?]) -> [ResultMap?] in value.map { (value: FindKeyword?) -> ResultMap? in value.flatMap { (value: FindKeyword) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 搜索关键词
    public var findKeywords: [FindKeyword?]? {
      get {
        return (resultMap["findKeywords"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindKeyword?] in value.map { (value: ResultMap?) -> FindKeyword? in value.flatMap { (value: ResultMap) -> FindKeyword in FindKeyword(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindKeyword?]) -> [ResultMap?] in value.map { (value: FindKeyword?) -> ResultMap? in value.flatMap { (value: FindKeyword) -> ResultMap in value.resultMap } } }, forKey: "findKeywords")
      }
    }

    public struct FindKeyword: GraphQLSelectionSet {
      public static let possibleTypes = ["keyword"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("deleted", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, viewCount: Int, deleted: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "keyword", "_id": _id, "name": name, "viewCount": viewCount, "deleted": deleted])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 被搜索的次数
      public var viewCount: Int {
        get {
          return resultMap["viewCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 是否被删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }
    }
  }
}

public final class FindPaymentMethodsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query FindPaymentMethods($isFuturePaymentMethod: Boolean) {
      findPaymentMethods(isFuturePaymentMethod: $isFuturePaymentMethod) {
        __typename
        _id
        paymentMethod
        stripePaymentMethodId
        card {
          __typename
          _id
          brand
          brandIcon
          firstName
          lastName
          email
          expiryDate
          cvvCode
          stripePaymentMethodId
          last4
          isDefaultCard
          invalidCard
          invalidFields
          billingAddress {
            __typename
            _id
            firstName
            lastName
            phoneNumber
            addressLine1
            addressLine2
            city
            state
            country
            zipCode
            addressType
            isDefaultAddress
            card
          }
        }
      }
    }
    """

  public let operationName = "FindPaymentMethods"

  public var isFuturePaymentMethod: Bool?

  public init(isFuturePaymentMethod: Bool? = nil) {
    self.isFuturePaymentMethod = isFuturePaymentMethod
  }

  public var variables: GraphQLMap? {
    return ["isFuturePaymentMethod": isFuturePaymentMethod]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findPaymentMethods", arguments: ["isFuturePaymentMethod": GraphQLVariable("isFuturePaymentMethod")], type: .list(.object(FindPaymentMethod.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findPaymentMethods: [FindPaymentMethod?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findPaymentMethods": findPaymentMethods.flatMap { (value: [FindPaymentMethod?]) -> [ResultMap?] in value.map { (value: FindPaymentMethod?) -> ResultMap? in value.flatMap { (value: FindPaymentMethod) -> ResultMap in value.resultMap } } }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端获取支付方式列表
    public var findPaymentMethods: [FindPaymentMethod?]? {
      get {
        return (resultMap["findPaymentMethods"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindPaymentMethod?] in value.map { (value: ResultMap?) -> FindPaymentMethod? in value.flatMap { (value: ResultMap) -> FindPaymentMethod in FindPaymentMethod(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindPaymentMethod?]) -> [ResultMap?] in value.map { (value: FindPaymentMethod?) -> ResultMap? in value.flatMap { (value: FindPaymentMethod) -> ResultMap in value.resultMap } } }, forKey: "findPaymentMethods")
      }
    }

    public struct FindPaymentMethod: GraphQLSelectionSet {
      public static let possibleTypes = ["PaymentMethodModel"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("paymentMethod", type: .scalar(PaymentMethod.self)),
        GraphQLField("stripePaymentMethodId", type: .scalar(String.self)),
        GraphQLField("card", type: .object(Card.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, paymentMethod: PaymentMethod? = nil, stripePaymentMethodId: String? = nil, card: Card? = nil) {
        self.init(unsafeResultMap: ["__typename": "PaymentMethodModel", "_id": _id, "paymentMethod": paymentMethod, "stripePaymentMethodId": stripePaymentMethodId, "card": card.flatMap { (value: Card) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 支付方式名称
      public var paymentMethod: PaymentMethod? {
        get {
          return resultMap["paymentMethod"] as? PaymentMethod
        }
        set {
          resultMap.updateValue(newValue, forKey: "paymentMethod")
        }
      }

      /// stripe 的 paymentMethodId，用于 createPayment 接口传入的 paymentMethodId
      public var stripePaymentMethodId: String? {
        get {
          return resultMap["stripePaymentMethodId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
        }
      }

      /// 如果 paymentMethod 字段是 CARD，这里是关联的卡片信息
      public var card: Card? {
        get {
          return (resultMap["card"] as? ResultMap).flatMap { Card(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "card")
        }
      }

      public struct Card: GraphQLSelectionSet {
        public static let possibleTypes = ["Card"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("brand", type: .nonNull(.scalar(String.self))),
          GraphQLField("brandIcon", type: .nonNull(.scalar(String.self))),
          GraphQLField("firstName", type: .nonNull(.scalar(String.self))),
          GraphQLField("lastName", type: .nonNull(.scalar(String.self))),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("expiryDate", type: .nonNull(.scalar(String.self))),
          GraphQLField("cvvCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("stripePaymentMethodId", type: .nonNull(.scalar(String.self))),
          GraphQLField("last4", type: .nonNull(.scalar(String.self))),
          GraphQLField("isDefaultCard", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("invalidCard", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("invalidFields", type: .nonNull(.list(.scalar(enum__cardInvalidField.self)))),
          GraphQLField("billingAddress", type: .object(BillingAddress.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, brand: String, brandIcon: String, firstName: String, lastName: String, email: String? = nil, expiryDate: String, cvvCode: String, stripePaymentMethodId: String, last4: String, isDefaultCard: Bool, invalidCard: Bool, invalidFields: [enum__cardInvalidField?], billingAddress: BillingAddress? = nil) {
          self.init(unsafeResultMap: ["__typename": "Card", "_id": _id, "brand": brand, "brandIcon": brandIcon, "firstName": firstName, "lastName": lastName, "email": email, "expiryDate": expiryDate, "cvvCode": cvvCode, "stripePaymentMethodId": stripePaymentMethodId, "last4": last4, "isDefaultCard": isDefaultCard, "invalidCard": invalidCard, "invalidFields": invalidFields, "billingAddress": billingAddress.flatMap { (value: BillingAddress) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 发卡机构, 对应 UI 上的`Bank Name`
        public var brand: String {
          get {
            return resultMap["brand"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "brand")
          }
        }

        /// 发卡机构图片
        public var brandIcon: String {
          get {
            return resultMap["brandIcon"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "brandIcon")
          }
        }

        /// firstName
        public var firstName: String {
          get {
            return resultMap["firstName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "firstName")
          }
        }

        /// lastName
        public var lastName: String {
          get {
            return resultMap["lastName"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastName")
          }
        }

        /// 邮箱
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// expiryDate
        public var expiryDate: String {
          get {
            return resultMap["expiryDate"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "expiryDate")
          }
        }

        /// cvvCode
        public var cvvCode: String {
          get {
            return resultMap["cvvCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "cvvCode")
          }
        }

        /// stripe payment method id
        public var stripePaymentMethodId: String {
          get {
            return resultMap["stripePaymentMethodId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "stripePaymentMethodId")
          }
        }

        /// last4
        public var last4: String {
          get {
            return resultMap["last4"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "last4")
          }
        }

        /// 是否是默认信用卡
        public var isDefaultCard: Bool {
          get {
            return resultMap["isDefaultCard"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDefaultCard")
          }
        }

        /// 卡片是否无效，true 表示无效，false 表示有效
        public var invalidCard: Bool {
          get {
            return resultMap["invalidCard"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "invalidCard")
          }
        }

        /// 卡片校验无效时，具体无效的字段. 有效时为空数组
        public var invalidFields: [enum__cardInvalidField?] {
          get {
            return resultMap["invalidFields"]! as! [enum__cardInvalidField?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "invalidFields")
          }
        }

        /// 账单地址
        public var billingAddress: BillingAddress? {
          get {
            return (resultMap["billingAddress"] as? ResultMap).flatMap { BillingAddress(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "billingAddress")
          }
        }

        public struct BillingAddress: GraphQLSelectionSet {
          public static let possibleTypes = ["Address"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("firstName", type: .scalar(String.self)),
            GraphQLField("lastName", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("addressLine1", type: .scalar(String.self)),
            GraphQLField("addressLine2", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("zipCode", type: .scalar(String.self)),
            GraphQLField("addressType", type: .scalar(enum__addressType.self)),
            GraphQLField("isDefaultAddress", type: .scalar(Bool.self)),
            GraphQLField("card", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, addressType: enum__addressType? = nil, isDefaultAddress: Bool? = nil, card: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Address", "_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "addressType": addressType, "isDefaultAddress": isDefaultAddress, "card": card])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// firstName
          public var firstName: String? {
            get {
              return resultMap["firstName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "firstName")
            }
          }

          /// lastName
          public var lastName: String? {
            get {
              return resultMap["lastName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastName")
            }
          }

          /// phoneNumber
          public var phoneNumber: String? {
            get {
              return resultMap["phoneNumber"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          /// addressLine1
          public var addressLine1: String? {
            get {
              return resultMap["addressLine1"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine1")
            }
          }

          /// addressLine2
          public var addressLine2: String? {
            get {
              return resultMap["addressLine2"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressLine2")
            }
          }

          /// city
          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          /// state
          public var state: String? {
            get {
              return resultMap["state"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "state")
            }
          }

          /// country
          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          /// zipCode
          public var zipCode: String? {
            get {
              return resultMap["zipCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zipCode")
            }
          }

          /// ShippingAddress or BillingAddress
          public var addressType: enum__addressType? {
            get {
              return resultMap["addressType"] as? enum__addressType
            }
            set {
              resultMap.updateValue(newValue, forKey: "addressType")
            }
          }

          /// 是否为默认
          public var isDefaultAddress: Bool? {
            get {
              return resultMap["isDefaultAddress"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDefaultAddress")
            }
          }

          /// 当 addressType 为 BILLING 时, 有此字段，表示该账单地址和此 card 关联
          public var card: String? {
            get {
              return resultMap["card"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "card")
            }
          }
        }
      }
    }
  }
}

public final class FindRecommendInterestsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query FindRecommendInterests {
      findRecommendInterests {
        __typename
        _id
        name
        priority
        userCount
        hashtags {
          __typename
          _id
          name
          userCount
          followed
        }
      }
    }
    """

  public let operationName = "FindRecommendInterests"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findRecommendInterests", type: .list(.object(FindRecommendInterest.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findRecommendInterests: [FindRecommendInterest?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findRecommendInterests": findRecommendInterests.flatMap { (value: [FindRecommendInterest?]) -> [ResultMap?] in value.map { (value: FindRecommendInterest?) -> ResultMap? in value.flatMap { (value: FindRecommendInterest) -> ResultMap in value.resultMap } } }])
    }

    /// 查询推荐的兴趣. 用于客户端更改 insterests 时拉取推荐兴趣列表
    /// 根据兴趣的权重排序，只会返回最多17个
    public var findRecommendInterests: [FindRecommendInterest?]? {
      get {
        return (resultMap["findRecommendInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindRecommendInterest?] in value.map { (value: ResultMap?) -> FindRecommendInterest? in value.flatMap { (value: ResultMap) -> FindRecommendInterest in FindRecommendInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindRecommendInterest?]) -> [ResultMap?] in value.map { (value: FindRecommendInterest?) -> ResultMap? in value.flatMap { (value: FindRecommendInterest) -> ResultMap in value.resultMap } } }, forKey: "findRecommendInterests")
      }
    }

    public struct FindRecommendInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["Interest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("priority", type: .scalar(Int.self)),
        GraphQLField("userCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("hashtags", type: .list(.object(Hashtag.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, priority: Int? = nil, userCount: Int, hashtags: [Hashtag?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "priority": priority, "userCount": userCount, "hashtags": hashtags.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// interest 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 优先级
      public var priority: Int? {
        get {
          return resultMap["priority"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "priority")
        }
      }

      /// 对该 Interest 感兴趣的用户数量
      public var userCount: Int {
        get {
          return resultMap["userCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "userCount")
        }
      }

      /// 查询该兴趣下的话题，参数可选
      public var hashtags: [Hashtag?]? {
        get {
          return (resultMap["hashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Hashtag?] in value.map { (value: ResultMap?) -> Hashtag? in value.flatMap { (value: ResultMap) -> Hashtag in Hashtag(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }, forKey: "hashtags")
        }
      }

      public struct Hashtag: GraphQLSelectionSet {
        public static let possibleTypes = ["Hashtag"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("userCount", type: .scalar(Int.self)),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, userCount: Int? = nil, followed: Bool) {
          self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "followed": followed])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// name
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 关注该话题的用户数
        public var userCount: Int? {
          get {
            return resultMap["userCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "userCount")
          }
        }

        /// 当前用户是否关注此 hashtag
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }
      }
    }
  }
}

public final class FindVideoByVideoTypeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query findVideoByVideoType($page: Int, $pageSize: Int, $videoTypes: [VideoType]) {
      findVideos(page: $page, pageSize: $pageSize, videoTypes: $videoTypes, sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        videoType
        coverImage
        teaserTitle
        video
        viewCount
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        describe
        liveStartAt
        createdAt
        updatedAt
        deleted
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
        products {
          __typename
          product
          name
          description
          images {
            __typename
            image
            key
          }
          regularPrice
          livePrice
          productType
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
        }
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          avatar
          username
          followed
          role
        }
        shareLink
        hasSubscribedLive
      }
    }
    """

  public let operationName = "findVideoByVideoType"

  public var page: Int?
  public var pageSize: Int?
  public var videoTypes: [VideoType?]?

  public init(page: Int? = nil, pageSize: Int? = nil, videoTypes: [VideoType?]? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.videoTypes = videoTypes
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "videoTypes": videoTypes]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "videoTypes": GraphQLVariable("videoTypes"), "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(FindVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findVideos: [FindVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findVideos": findVideos.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }])
    }

    /// 客户端查询用户视频列表
    public var findVideos: [FindVideo?]? {
      get {
        return (resultMap["findVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindVideo?] in value.map { (value: ResultMap?) -> FindVideo? in value.flatMap { (value: ResultMap) -> FindVideo in FindVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }, forKey: "findVideos")
      }
    }

    public struct FindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("createdAt", type: .scalar(Double.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, describe: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, deleted: Bool? = nil, live: Live? = nil, products: [Product?]? = nil, music: Music? = nil, user: User? = nil, shareLink: String? = nil, hasSubscribedLive: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "describe": describe, "createdAt": createdAt, "updatedAt": updatedAt, "deleted": deleted, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "shareLink": shareLink, "hasSubscribedLive": hasSubscribedLive])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 创建日期
      public var createdAt: Double? {
        get {
          return resultMap["createdAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// ***【接口权限: 普通登录用户】***
      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["PastShowProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 商品 ID
        public var product: String? {
          get {
            return resultMap["product"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "product")
          }
        }

        /// 商品名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 商品描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 商品图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 商品直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }
    }
  }
}

public final class FindVideosQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query FindVideos($page: Int, $pageSize: Int, $users: [ID], $describe: String, $videoTypes: [VideoType]) {
      findVideos(page: $page, pageSize: $pageSize, users: $users, describe: $describe, sort: [{field: createdAt, value: DESC}], videoTypes: $videoTypes) {
        __typename
        _id
        videoType
        user {
          __typename
          username
          _id
          avatar
          followed
          role
        }
        coverImage
        video
        duration
        describe
        describeMapping {
          __typename
          users {
            __typename
            text
            id {
              __typename
              _id
            }
          }
        }
        viewCount
        likeCount
        commentCount
        shareCount
        recommend
        watch
        allowComment
        location
        placeName
        shareLink
        interests {
          __typename
          _id
          name
          priority
          videoCount
          userCount
          followed
          isSuspended
        }
        music {
          __typename
          _id
          title
        }
        deleted
        teaserTitle
        liveStartAt
        liked
        products {
          __typename
          product
          name
          description
          images {
            __typename
            image
            key
          }
          regularPrice
          livePrice
          productType
          variants {
            __typename
            _id
            name
            sku
            quantity
          }
        }
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
    }
    """

  public let operationName = "FindVideos"

  public var page: Int?
  public var pageSize: Int?
  public var users: [GraphQLID?]?
  public var describe: String?
  public var videoTypes: [VideoType?]?

  public init(page: Int? = nil, pageSize: Int? = nil, users: [GraphQLID?]? = nil, describe: String? = nil, videoTypes: [VideoType?]? = nil) {
    self.page = page
    self.pageSize = pageSize
    self.users = users
    self.describe = describe
    self.videoTypes = videoTypes
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize, "users": users, "describe": describe, "videoTypes": videoTypes]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "users": GraphQLVariable("users"), "describe": GraphQLVariable("describe"), "sort": [["field": "createdAt", "value": "DESC"]], "videoTypes": GraphQLVariable("videoTypes")], type: .list(.object(FindVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findVideos: [FindVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findVideos": findVideos.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }])
    }

    /// 客户端查询用户视频列表
    public var findVideos: [FindVideo?]? {
      get {
        return (resultMap["findVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindVideo?] in value.map { (value: ResultMap?) -> FindVideo? in value.flatMap { (value: ResultMap) -> FindVideo in FindVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }, forKey: "findVideos")
      }
    }

    public struct FindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("describeMapping", type: .object(DescribeMapping.selections)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("recommend", type: .scalar(Int.self)),
        GraphQLField("watch", type: .scalar(enumWatch.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("location", type: .list(.scalar(Double.self))),
        GraphQLField("placeName", type: .scalar(String.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("interests", type: .list(.object(Interest.selections))),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("deleted", type: .scalar(Bool.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("products", type: .list(.object(Product.selections))),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, user: User? = nil, coverImage: String? = nil, video: String? = nil, duration: Double? = nil, describe: String? = nil, describeMapping: DescribeMapping? = nil, viewCount: Int? = nil, likeCount: Int? = nil, commentCount: Int? = nil, shareCount: Int? = nil, recommend: Int? = nil, watch: enumWatch? = nil, allowComment: Bool? = nil, location: [Double?]? = nil, placeName: String? = nil, shareLink: String? = nil, interests: [Interest?]? = nil, music: Music? = nil, deleted: Bool? = nil, teaserTitle: String? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, products: [Product?]? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "videoType": videoType, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "coverImage": coverImage, "video": video, "duration": duration, "describe": describe, "describeMapping": describeMapping.flatMap { (value: DescribeMapping) -> ResultMap in value.resultMap }, "viewCount": viewCount, "likeCount": likeCount, "commentCount": commentCount, "shareCount": shareCount, "recommend": recommend, "watch": watch, "allowComment": allowComment, "location": location, "placeName": placeName, "shareLink": shareLink, "interests": interests.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "deleted": deleted, "teaserTitle": teaserTitle, "liveStartAt": liveStartAt, "liked": liked, "products": products.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 描述中 #hashtags 和 @users 的映射关系
      public var describeMapping: DescribeMapping? {
        get {
          return (resultMap["describeMapping"] as? ResultMap).flatMap { DescribeMapping(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "describeMapping")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 推荐
      @available(*, deprecated, message: "此字段已废弃，请从 query 中删除")
      public var recommend: Int? {
        get {
          return resultMap["recommend"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "recommend")
        }
      }

      /// 允许观看范围
      public var watch: enumWatch? {
        get {
          return resultMap["watch"] as? enumWatch
        }
        set {
          resultMap.updateValue(newValue, forKey: "watch")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 经纬度位置 type:[lng,lat] 经度，纬度
      public var location: [Double?]? {
        get {
          return resultMap["location"] as? [Double?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      /// 地名
      public var placeName: String? {
        get {
          return resultMap["placeName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeName")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 兴趣
      public var interests: [Interest?]? {
        get {
          return (resultMap["interests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Interest?] in value.map { (value: ResultMap?) -> Interest? in value.flatMap { (value: ResultMap) -> Interest in Interest(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, forKey: "interests")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// ***【接口权限: 普通登录用户】***
      /// 删除
      public var deleted: Bool? {
        get {
          return resultMap["deleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "deleted")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 【past show 短视频】直播回放视频中需要展示的当时直播售卖的商品
      public var products: [Product?]? {
        get {
          return (resultMap["products"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Product?] in value.map { (value: ResultMap?) -> Product? in value.flatMap { (value: ResultMap) -> Product in Product(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Product?]) -> [ResultMap?] in value.map { (value: Product?) -> ResultMap? in value.flatMap { (value: Product) -> ResultMap in value.resultMap } } }, forKey: "products")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, avatar: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "avatar": avatar, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct DescribeMapping: GraphQLSelectionSet {
        public static let possibleTypes = ["describeMapping"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", type: .list(.object(User.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(users: [User?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "describeMapping", "users": users.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var users: [User?]? {
          get {
            return (resultMap["users"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [User?] in value.map { (value: ResultMap?) -> User? in value.flatMap { (value: ResultMap) -> User in User(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }, forKey: "users")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["mappingUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("text", type: .scalar(String.self)),
            GraphQLField("id", type: .object(Id.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(text: String? = nil, id: Id? = nil) {
            self.init(unsafeResultMap: ["__typename": "mappingUser", "text": text, "id": id.flatMap { (value: Id) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var text: String? {
            get {
              return resultMap["text"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "text")
            }
          }

          public var id: Id? {
            get {
              return (resultMap["id"] as? ResultMap).flatMap { Id(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "id")
            }
          }

          public struct Id: GraphQLSelectionSet {
            public static let possibleTypes = ["mappingUserDetail"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil) {
              self.init(unsafeResultMap: ["__typename": "mappingUserDetail", "_id": _id])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }
          }
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("priority", type: .scalar(Int.self)),
          GraphQLField("videoCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("userCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("isSuspended", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, name: String, priority: Int? = nil, videoCount: Int, userCount: Int, followed: Bool, isSuspended: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "_id": _id, "name": name, "priority": priority, "videoCount": videoCount, "userCount": userCount, "followed": followed, "isSuspended": isSuspended])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 优先级
        public var priority: Int? {
          get {
            return resultMap["priority"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "priority")
          }
        }

        /// 携带该 interest 的视频数量
        public var videoCount: Int {
          get {
            return resultMap["videoCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "videoCount")
          }
        }

        /// 对该 Interest 感兴趣的用户数量
        public var userCount: Int {
          get {
            return resultMap["userCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "userCount")
          }
        }

        /// 用户是否关注该 interest
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 是否被封禁
        public var isSuspended: Bool? {
          get {
            return resultMap["isSuspended"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSuspended")
          }
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct Product: GraphQLSelectionSet {
        public static let possibleTypes = ["PastShowProduct"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("product", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("images", type: .list(.object(Image.selections))),
          GraphQLField("regularPrice", type: .scalar(Int.self)),
          GraphQLField("livePrice", type: .scalar(Int.self)),
          GraphQLField("productType", type: .scalar(enum__productType.self)),
          GraphQLField("variants", type: .list(.object(Variant.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(product: String? = nil, name: String? = nil, description: String? = nil, images: [Image?]? = nil, regularPrice: Int? = nil, livePrice: Int? = nil, productType: enum__productType? = nil, variants: [Variant?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PastShowProduct", "product": product, "name": name, "description": description, "images": images.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, "regularPrice": regularPrice, "livePrice": livePrice, "productType": productType, "variants": variants.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 商品 ID
        public var product: String? {
          get {
            return resultMap["product"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "product")
          }
        }

        /// 商品名称
        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 商品描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 商品图片
        public var images: [Image?]? {
          get {
            return (resultMap["images"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Image?] in value.map { (value: ResultMap?) -> Image? in value.flatMap { (value: ResultMap) -> Image in Image(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Image?]) -> [ResultMap?] in value.map { (value: Image?) -> ResultMap? in value.flatMap { (value: Image) -> ResultMap in value.resultMap } } }, forKey: "images")
          }
        }

        /// 商品常规价格
        public var regularPrice: Int? {
          get {
            return resultMap["regularPrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "regularPrice")
          }
        }

        /// 商品直播价格
        public var livePrice: Int? {
          get {
            return resultMap["livePrice"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品类型
        public var productType: enum__productType? {
          get {
            return resultMap["productType"] as? enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 商品属性
        public var variants: [Variant?]? {
          get {
            return (resultMap["variants"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Variant?] in value.map { (value: ResultMap?) -> Variant? in value.flatMap { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Variant?]) -> [ResultMap?] in value.map { (value: Variant?) -> ResultMap? in value.flatMap { (value: Variant) -> ResultMap in value.resultMap } } }, forKey: "variants")
          }
        }

        public struct Image: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("sku", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, sku: String? = nil, quantity: Int? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "sku": sku, "quantity": quantity])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// sku number
          public var sku: String? {
            get {
              return resultMap["sku"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "sku")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }
  }
}

public final class FollowHashtagMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation followHashtag($hashtags: [ID]!, $status: Boolean!) {
      followHashtag(hashtags: $hashtags, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "followHashtag"

  public var hashtags: [GraphQLID?]
  public var status: Bool

  public init(hashtags: [GraphQLID?], status: Bool) {
    self.hashtags = hashtags
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["hashtags": hashtags, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("followHashtag", arguments: ["hashtags": GraphQLVariable("hashtags"), "status": GraphQLVariable("status")], type: .object(FollowHashtag.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(followHashtag: FollowHashtag? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "followHashtag": followHashtag.flatMap { (value: FollowHashtag) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 用户批量关注/取关话题
    public var followHashtag: FollowHashtag? {
      get {
        return (resultMap["followHashtag"] as? ResultMap).flatMap { FollowHashtag(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "followHashtag")
      }
    }

    public struct FollowHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class FollowInterestMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation followInterest($interests: [ID]!, $status: Boolean!) {
      followInterest(interests: $interests, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "followInterest"

  public var interests: [GraphQLID?]
  public var status: Bool

  public init(interests: [GraphQLID?], status: Bool) {
    self.interests = interests
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["interests": interests, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("followInterest", arguments: ["interests": GraphQLVariable("interests"), "status": GraphQLVariable("status")], type: .object(FollowInterest.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(followInterest: FollowInterest? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "followInterest": followInterest.flatMap { (value: FollowInterest) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 用户批量关注/取关话题
    public var followInterest: FollowInterest? {
      get {
        return (resultMap["followInterest"] as? ResultMap).flatMap { FollowInterest(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "followInterest")
      }
    }

    public struct FollowInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class GetAppConfigQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query GetAppConfig {
      getAppConfig {
        __typename
        becomeSellerURL
      }
    }
    """

  public let operationName = "GetAppConfig"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getAppConfig", type: .object(GetAppConfig.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getAppConfig: GetAppConfig? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getAppConfig": getAppConfig.flatMap { (value: GetAppConfig) -> ResultMap in value.resultMap }])
    }

    /// app 端需要从服务端获取的配置。保存在服务端而不是 app 端方便新老版本的兼容
    public var getAppConfig: GetAppConfig? {
      get {
        return (resultMap["getAppConfig"] as? ResultMap).flatMap { GetAppConfig(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getAppConfig")
      }
    }

    public struct GetAppConfig: GraphQLSelectionSet {
      public static let possibleTypes = ["AppConfig"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("becomeSellerURL", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(becomeSellerUrl: String) {
        self.init(unsafeResultMap: ["__typename": "AppConfig", "becomeSellerURL": becomeSellerUrl])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// Settings ans privacy -> Become a seller 跳转的页面地址
      public var becomeSellerUrl: String {
        get {
          return resultMap["becomeSellerURL"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "becomeSellerURL")
        }
      }
    }
  }
}

public final class GetLiveTokenQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getLiveToken($liveId: ID!) {
      getLiveToken(liveId: $liveId) {
        __typename
        token
      }
    }
    """

  public let operationName = "getLiveToken"

  public var liveId: GraphQLID

  public init(liveId: GraphQLID) {
    self.liveId = liveId
  }

  public var variables: GraphQLMap? {
    return ["liveId": liveId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getLiveToken", arguments: ["liveId": GraphQLVariable("liveId")], type: .object(GetLiveToken.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getLiveToken: GetLiveToken? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getLiveToken": getLiveToken.flatMap { (value: GetLiveToken) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取声网直播音视频流 token
    public var getLiveToken: GetLiveToken? {
      get {
        return (resultMap["getLiveToken"] as? ResultMap).flatMap { GetLiveToken(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getLiveToken")
      }
    }

    public struct GetLiveToken: GraphQLSelectionSet {
      public static let possibleTypes = ["getLiveToken"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("token", type: .nonNull(.scalar(String.self))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String) {
        self.init(unsafeResultMap: ["__typename": "getLiveToken", "token": token])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String {
        get {
          return resultMap["token"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }
    }
  }
}

public final class GetServerTimeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query GetServerTime {
      getServerTime {
        __typename
        time
      }
    }
    """

  public let operationName = "GetServerTime"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getServerTime", type: .object(GetServerTime.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getServerTime: GetServerTime? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getServerTime": getServerTime.flatMap { (value: GetServerTime) -> ResultMap in value.resultMap }])
    }

    /// 获取服务器时间
    public var getServerTime: GetServerTime? {
      get {
        return (resultMap["getServerTime"] as? ResultMap).flatMap { GetServerTime(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getServerTime")
      }
    }

    public struct GetServerTime: GraphQLSelectionSet {
      public static let possibleTypes = ["getServerTime"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("time", type: .scalar(Double.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(time: Double? = nil) {
        self.init(unsafeResultMap: ["__typename": "getServerTime", "time": time])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var time: Double? {
        get {
          return resultMap["time"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "time")
        }
      }
    }
  }
}

public final class GetUploadUrlQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query getUploadURL($type: String) {
      getUploadURL(type: $type) {
        __typename
        uploadURL
        url
        key
      }
    }
    """

  public let operationName = "getUploadURL"

  public var type: String?

  public init(type: String? = nil) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUploadURL", arguments: ["type": GraphQLVariable("type")], type: .object(GetUploadUrl.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(getUploadUrl: GetUploadUrl? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "getUploadURL": getUploadUrl.flatMap { (value: GetUploadUrl) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 获取预授权的文件上传地址
    public var getUploadUrl: GetUploadUrl? {
      get {
        return (resultMap["getUploadURL"] as? ResultMap).flatMap { GetUploadUrl(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "getUploadURL")
      }
    }

    public struct GetUploadUrl: GraphQLSelectionSet {
      public static let possibleTypes = ["uploadURL"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("uploadURL", type: .scalar(String.self)),
        GraphQLField("url", type: .scalar(String.self)),
        GraphQLField("key", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(uploadUrl: String? = nil, url: String? = nil, key: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "uploadURL", "uploadURL": uploadUrl, "url": url, "key": key])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 文件上传地址
      public var uploadUrl: String? {
        get {
          return resultMap["uploadURL"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uploadURL")
        }
      }

      /// 文件下载地址
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }

      /// 文件名，将此字段传给后端保存(头像、短视频文件等…)，后端返回对应的字段时，应先使用ctx.helper.formatFileUrl方法拼接，方便后续启用aws的CDN功能。
      public var key: String? {
        get {
          return resultMap["key"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }
    }
  }
}

public final class HomePageDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query HomePageData($page: Int, $pageSize: Int) {
      algorithmFindBanners(page: $page, pageSize: $pageSize) {
        __typename
        _id
        cover
        value
        type
        valueObject {
          __typename
          ... on BannerVideoObject {
            _id
            videoType
            hasSubscribedLive
            user {
              __typename
              _id
              role
            }
            live {
              __typename
              _id
              coverImage
              title
              status
              scheduleStartAt
              streamingStatus
            }
          }
          ... on BannerLiveObject {
            _id
            status
          }
          ... on BannerEventObject {
            _id
          }
        }
      }
      algorithmFindLives(moduleName: whatsLiveRightNow, page: 1, pageSize: 11) {
        __typename
        title
        _id
        status
        coverImage
        ivsLiveAddress
        viewCount
        likeCount
        chatroomId
        newFansCount
        startAt
        endAt
        shareLink
        collaboratingUser
        user {
          __typename
          username
          _id
          uid
          avatar
          followed
          role
        }
      }
      algorithmFindUsers(page: $page, pageSize: $pageSize, moduleName: topCreatorsForYou) {
        __typename
        _id
        avatar
        name
        username
        followCount
        fansCount
        likeCount
        bio
        website
        facebook {
          __typename
          id
          username
          homePage
        }
        instagram {
          __typename
          id
          username
          homePage
        }
        followed
        liveId
        liveStatus
      }
      UpcomingLiveShow: algorithmFindVideos(page: 1, pageSize: 21, moduleName: teaser) {
        __typename
        _id
        coverImage
        teaserTitle
        video
        viewCount
        describe
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        updatedAt
        shareLink
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          uid
          avatar
          username
          followed
          role
        }
        videoType
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
      algorithmFindEvents(page: $page, pageSize: $pageSize) {
        __typename
        edges {
          __typename
          _id
          coverImages {
            __typename
            image
          }
          name
        }
        pageInfo {
          __typename
          hashNextPage
        }
      }
      pastLiveShowsTop: algorithmFindVideos(page: 1, pageSize: 21, moduleName: pastshow) {
        __typename
        _id
        coverImage
        teaserTitle
        video
        viewCount
        describe
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        updatedAt
        shareLink
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          avatar
          username
          followed
          role
        }
        videoType
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
      appFindFeatureHashtags {
        __typename
        _id
        name
        viewCount
        videos(page: 1, pageSize: 21) {
          __typename
          edges {
            __typename
            _id
            coverImage
            teaserTitle
            video
            viewCount
            describe
            likeCount
            commentCount
            duration
            shareCount
            allowComment
            liveStartAt
            liked
            shareLink
            updatedAt
            music {
              __typename
              _id
              title
            }
            user {
              __typename
              _id
              uid
              avatar
              username
              followed
              role
            }
            videoType
            hasSubscribedLive
            live {
              __typename
              _id
              coverImage
              title
              status
              scheduleStartAt
              streamingStatus
            }
          }
          pageInfo {
            __typename
            hashNextPage
          }
        }
      }
      algorithmFindVideos(page: $page, pageSize: $pageSize, moduleName: highlights) {
        __typename
        _id
        coverImage
        teaserTitle
        video
        viewCount
        describe
        likeCount
        commentCount
        duration
        shareCount
        allowComment
        liveStartAt
        liked
        shareLink
        updatedAt
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          _id
          uid
          avatar
          username
          followed
          role
        }
        videoType
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          scheduleStartAt
          streamingStatus
        }
      }
    }
    """

  public let operationName = "HomePageData"

  public var page: Int?
  public var pageSize: Int?

  public init(page: Int? = nil, pageSize: Int? = nil) {
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("algorithmFindBanners", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .list(.object(AlgorithmFindBanner.selections))),
      GraphQLField("algorithmFindLives", arguments: ["moduleName": "whatsLiveRightNow", "page": 1, "pageSize": 11], type: .list(.object(AlgorithmFindLife.selections))),
      GraphQLField("algorithmFindUsers", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "moduleName": "topCreatorsForYou"], type: .list(.object(AlgorithmFindUser.selections))),
      GraphQLField("algorithmFindVideos", alias: "UpcomingLiveShow", arguments: ["page": 1, "pageSize": 21, "moduleName": "teaser"], type: .list(.object(UpcomingLiveShow.selections))),
      GraphQLField("algorithmFindEvents", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize")], type: .object(AlgorithmFindEvent.selections)),
      GraphQLField("algorithmFindVideos", alias: "pastLiveShowsTop", arguments: ["page": 1, "pageSize": 21, "moduleName": "pastshow"], type: .list(.object(PastLiveShowsTop.selections))),
      GraphQLField("appFindFeatureHashtags", type: .list(.object(AppFindFeatureHashtag.selections))),
      GraphQLField("algorithmFindVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "moduleName": "highlights"], type: .list(.object(AlgorithmFindVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(algorithmFindBanners: [AlgorithmFindBanner?]? = nil, algorithmFindLives: [AlgorithmFindLife?]? = nil, algorithmFindUsers: [AlgorithmFindUser?]? = nil, upcomingLiveShow: [UpcomingLiveShow?]? = nil, algorithmFindEvents: AlgorithmFindEvent? = nil, pastLiveShowsTop: [PastLiveShowsTop?]? = nil, appFindFeatureHashtags: [AppFindFeatureHashtag?]? = nil, algorithmFindVideos: [AlgorithmFindVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "algorithmFindBanners": algorithmFindBanners.flatMap { (value: [AlgorithmFindBanner?]) -> [ResultMap?] in value.map { (value: AlgorithmFindBanner?) -> ResultMap? in value.flatMap { (value: AlgorithmFindBanner) -> ResultMap in value.resultMap } } }, "algorithmFindLives": algorithmFindLives.flatMap { (value: [AlgorithmFindLife?]) -> [ResultMap?] in value.map { (value: AlgorithmFindLife?) -> ResultMap? in value.flatMap { (value: AlgorithmFindLife) -> ResultMap in value.resultMap } } }, "algorithmFindUsers": algorithmFindUsers.flatMap { (value: [AlgorithmFindUser?]) -> [ResultMap?] in value.map { (value: AlgorithmFindUser?) -> ResultMap? in value.flatMap { (value: AlgorithmFindUser) -> ResultMap in value.resultMap } } }, "UpcomingLiveShow": upcomingLiveShow.flatMap { (value: [UpcomingLiveShow?]) -> [ResultMap?] in value.map { (value: UpcomingLiveShow?) -> ResultMap? in value.flatMap { (value: UpcomingLiveShow) -> ResultMap in value.resultMap } } }, "algorithmFindEvents": algorithmFindEvents.flatMap { (value: AlgorithmFindEvent) -> ResultMap in value.resultMap }, "pastLiveShowsTop": pastLiveShowsTop.flatMap { (value: [PastLiveShowsTop?]) -> [ResultMap?] in value.map { (value: PastLiveShowsTop?) -> ResultMap? in value.flatMap { (value: PastLiveShowsTop) -> ResultMap in value.resultMap } } }, "appFindFeatureHashtags": appFindFeatureHashtags.flatMap { (value: [AppFindFeatureHashtag?]) -> [ResultMap?] in value.map { (value: AppFindFeatureHashtag?) -> ResultMap? in value.flatMap { (value: AppFindFeatureHashtag) -> ResultMap in value.resultMap } } }, "algorithmFindVideos": algorithmFindVideos.flatMap { (value: [AlgorithmFindVideo?]) -> [ResultMap?] in value.map { (value: AlgorithmFindVideo?) -> ResultMap? in value.flatMap { (value: AlgorithmFindVideo) -> ResultMap in value.resultMap } } }])
    }

    /// 算法查询banner，显示规则由后端控制，前端仅需显示. 此接口无需翻页，仅保留分页参数以保持兼容
    public var algorithmFindBanners: [AlgorithmFindBanner?]? {
      get {
        return (resultMap["algorithmFindBanners"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindBanner?] in value.map { (value: ResultMap?) -> AlgorithmFindBanner? in value.flatMap { (value: ResultMap) -> AlgorithmFindBanner in AlgorithmFindBanner(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindBanner?]) -> [ResultMap?] in value.map { (value: AlgorithmFindBanner?) -> ResultMap? in value.flatMap { (value: AlgorithmFindBanner) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindBanners")
      }
    }

    /// 客户端根据页面模块查询直播列表
    public var algorithmFindLives: [AlgorithmFindLife?]? {
      get {
        return (resultMap["algorithmFindLives"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindLife?] in value.map { (value: ResultMap?) -> AlgorithmFindLife? in value.flatMap { (value: ResultMap) -> AlgorithmFindLife in AlgorithmFindLife(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindLife?]) -> [ResultMap?] in value.map { (value: AlgorithmFindLife?) -> ResultMap? in value.flatMap { (value: AlgorithmFindLife) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindLives")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    public var algorithmFindUsers: [AlgorithmFindUser?]? {
      get {
        return (resultMap["algorithmFindUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindUser?] in value.map { (value: ResultMap?) -> AlgorithmFindUser? in value.flatMap { (value: ResultMap) -> AlgorithmFindUser in AlgorithmFindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindUser?]) -> [ResultMap?] in value.map { (value: AlgorithmFindUser?) -> ResultMap? in value.flatMap { (value: AlgorithmFindUser) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindUsers")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端根据页面模块查询短视频列表
    public var upcomingLiveShow: [UpcomingLiveShow?]? {
      get {
        return (resultMap["UpcomingLiveShow"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [UpcomingLiveShow?] in value.map { (value: ResultMap?) -> UpcomingLiveShow? in value.flatMap { (value: ResultMap) -> UpcomingLiveShow in UpcomingLiveShow(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [UpcomingLiveShow?]) -> [ResultMap?] in value.map { (value: UpcomingLiveShow?) -> ResultMap? in value.flatMap { (value: UpcomingLiveShow) -> ResultMap in value.resultMap } } }, forKey: "UpcomingLiveShow")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    public var algorithmFindEvents: AlgorithmFindEvent? {
      get {
        return (resultMap["algorithmFindEvents"] as? ResultMap).flatMap { AlgorithmFindEvent(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "algorithmFindEvents")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端根据页面模块查询短视频列表
    public var pastLiveShowsTop: [PastLiveShowsTop?]? {
      get {
        return (resultMap["pastLiveShowsTop"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [PastLiveShowsTop?] in value.map { (value: ResultMap?) -> PastLiveShowsTop? in value.flatMap { (value: ResultMap) -> PastLiveShowsTop in PastLiveShowsTop(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [PastLiveShowsTop?]) -> [ResultMap?] in value.map { (value: PastLiveShowsTop?) -> ResultMap? in value.flatMap { (value: PastLiveShowsTop) -> ResultMap in value.resultMap } } }, forKey: "pastLiveShowsTop")
      }
    }

    /// Discover page hashtags 数据接口
    public var appFindFeatureHashtags: [AppFindFeatureHashtag?]? {
      get {
        return (resultMap["appFindFeatureHashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AppFindFeatureHashtag?] in value.map { (value: ResultMap?) -> AppFindFeatureHashtag? in value.flatMap { (value: ResultMap) -> AppFindFeatureHashtag in AppFindFeatureHashtag(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AppFindFeatureHashtag?]) -> [ResultMap?] in value.map { (value: AppFindFeatureHashtag?) -> ResultMap? in value.flatMap { (value: AppFindFeatureHashtag) -> ResultMap in value.resultMap } } }, forKey: "appFindFeatureHashtags")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 客户端根据页面模块查询短视频列表
    public var algorithmFindVideos: [AlgorithmFindVideo?]? {
      get {
        return (resultMap["algorithmFindVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [AlgorithmFindVideo?] in value.map { (value: ResultMap?) -> AlgorithmFindVideo? in value.flatMap { (value: ResultMap) -> AlgorithmFindVideo in AlgorithmFindVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [AlgorithmFindVideo?]) -> [ResultMap?] in value.map { (value: AlgorithmFindVideo?) -> ResultMap? in value.flatMap { (value: AlgorithmFindVideo) -> ResultMap in value.resultMap } } }, forKey: "algorithmFindVideos")
      }
    }

    public struct AlgorithmFindBanner: GraphQLSelectionSet {
      public static let possibleTypes = ["Banner"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("cover", type: .nonNull(.scalar(String.self))),
        GraphQLField("value", type: .scalar(String.self)),
        GraphQLField("type", type: .nonNull(.scalar(bannerTypeField.self))),
        GraphQLField("valueObject", type: .object(ValueObject.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, cover: String, value: String? = nil, type: bannerTypeField, valueObject: ValueObject? = nil) {
        self.init(unsafeResultMap: ["__typename": "Banner", "_id": _id, "cover": cover, "value": value, "type": type, "valueObject": valueObject.flatMap { (value: ValueObject) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var cover: String {
        get {
          return resultMap["cover"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "cover")
        }
      }

      /// 点击 banner 跳转页面时，跳转对象的值。比如跳转 VIDEO/TEASER，此值就是 video 的 id。当 type 为 BLANK 时，此值为 null
      public var value: String? {
        get {
          return resultMap["value"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      /// Banner 类型
      public var type: bannerTypeField {
        get {
          return resultMap["type"]! as! bannerTypeField
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 点击 banner 跳转页面时，跳转对象的完整值。比如跳转 VIDEO/TEASER，此值就是 video model。当 type 为 WEBVIEW/BLANK 时，此值为 null
      public var valueObject: ValueObject? {
        get {
          return (resultMap["valueObject"] as? ResultMap).flatMap { ValueObject(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "valueObject")
        }
      }

      public struct ValueObject: GraphQLSelectionSet {
        public static let possibleTypes = ["BannerVideoObject", "BannerLiveObject", "BannerEventObject", "Empty"]

        public static let selections: [GraphQLSelection] = [
          GraphQLTypeCase(
            variants: ["BannerVideoObject": AsBannerVideoObject.selections, "BannerLiveObject": AsBannerLiveObject.selections, "BannerEventObject": AsBannerEventObject.selections],
            default: [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            ]
          )
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public static func makeEmpty() -> ValueObject {
          return ValueObject(unsafeResultMap: ["__typename": "Empty"])
        }

        public static func makeBannerVideoObject(_id: GraphQLID? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, user: AsBannerVideoObject.User? = nil, live: AsBannerVideoObject.Live? = nil) -> ValueObject {
          return ValueObject(unsafeResultMap: ["__typename": "BannerVideoObject", "_id": _id, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "user": user.flatMap { (value: AsBannerVideoObject.User) -> ResultMap in value.resultMap }, "live": live.flatMap { (value: AsBannerVideoObject.Live) -> ResultMap in value.resultMap }])
        }

        public static func makeBannerLiveObject(_id: GraphQLID? = nil, status: Bool? = nil) -> ValueObject {
          return ValueObject(unsafeResultMap: ["__typename": "BannerLiveObject", "_id": _id, "status": status])
        }

        public static func makeBannerEventObject(_id: GraphQLID? = nil) -> ValueObject {
          return ValueObject(unsafeResultMap: ["__typename": "BannerEventObject", "_id": _id])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var asBannerVideoObject: AsBannerVideoObject? {
          get {
            if !AsBannerVideoObject.possibleTypes.contains(__typename) { return nil }
            return AsBannerVideoObject(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsBannerVideoObject: GraphQLSelectionSet {
          public static let possibleTypes = ["BannerVideoObject"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("videoType", type: .scalar(VideoType.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("live", type: .object(Live.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, user: User? = nil, live: Live? = nil) {
            self.init(unsafeResultMap: ["__typename": "BannerVideoObject", "_id": _id, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var videoType: VideoType? {
            get {
              return resultMap["videoType"] as? VideoType
            }
            set {
              resultMap.updateValue(newValue, forKey: "videoType")
            }
          }

          /// 【teaser 短视频】是否已订阅对应的 live
          public var hasSubscribedLive: Bool? {
            get {
              return resultMap["hasSubscribedLive"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
            }
          }

          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["SimpleUser"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("coverImage", type: .scalar(String.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("status", type: .scalar(Bool.self)),
              GraphQLField("scheduleStartAt", type: .scalar(String.self)),
              GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
              self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 封面图
            public var coverImage: String? {
              get {
                return resultMap["coverImage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "coverImage")
              }
            }

            /// 标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }

            /// 是否正在直播
            public var status: Bool? {
              get {
                return resultMap["status"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "status")
              }
            }

            /// live schedule 开始时间
            public var scheduleStartAt: String? {
              get {
                return resultMap["scheduleStartAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "scheduleStartAt")
              }
            }

            /// 直播状态，可替代早期的 status
            public var streamingStatus: LiveStreamingStatus? {
              get {
                return resultMap["streamingStatus"] as? LiveStreamingStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "streamingStatus")
              }
            }
          }
        }

        public var asBannerLiveObject: AsBannerLiveObject? {
          get {
            if !AsBannerLiveObject.possibleTypes.contains(__typename) { return nil }
            return AsBannerLiveObject(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsBannerLiveObject: GraphQLSelectionSet {
          public static let possibleTypes = ["BannerLiveObject"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("status", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, status: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "BannerLiveObject", "_id": _id, "status": status])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          public var status: Bool? {
            get {
              return resultMap["status"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }
        }

        public var asBannerEventObject: AsBannerEventObject? {
          get {
            if !AsBannerEventObject.possibleTypes.contains(__typename) { return nil }
            return AsBannerEventObject(unsafeResultMap: resultMap)
          }
          set {
            guard let newValue = newValue else { return }
            resultMap = newValue.resultMap
          }
        }

        public struct AsBannerEventObject: GraphQLSelectionSet {
          public static let possibleTypes = ["BannerEventObject"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil) {
            self.init(unsafeResultMap: ["__typename": "BannerEventObject", "_id": _id])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }
        }
      }
    }

    public struct AlgorithmFindLife: GraphQLSelectionSet {
      public static let possibleTypes = ["live"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("title", type: .scalar(String.self)),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("status", type: .scalar(Bool.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("ivsLiveAddress", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("chatroomId", type: .scalar(String.self)),
        GraphQLField("newFansCount", type: .scalar(Int.self)),
        GraphQLField("startAt", type: .scalar(Double.self)),
        GraphQLField("endAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("collaboratingUser", type: .scalar(GraphQLID.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(title: String? = nil, _id: GraphQLID? = nil, status: Bool? = nil, coverImage: String? = nil, ivsLiveAddress: String? = nil, viewCount: Int? = nil, likeCount: Int? = nil, chatroomId: String? = nil, newFansCount: Int? = nil, startAt: Double? = nil, endAt: Double? = nil, shareLink: String? = nil, collaboratingUser: GraphQLID? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "live", "title": title, "_id": _id, "status": status, "coverImage": coverImage, "ivsLiveAddress": ivsLiveAddress, "viewCount": viewCount, "likeCount": likeCount, "chatroomId": chatroomId, "newFansCount": newFansCount, "startAt": startAt, "endAt": endAt, "shareLink": shareLink, "collaboratingUser": collaboratingUser, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 标题
      public var title: String? {
        get {
          return resultMap["title"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "title")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 是否正在直播
      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 直播推流播放地址
      public var ivsLiveAddress: String? {
        get {
          return resultMap["ivsLiveAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ivsLiveAddress")
        }
      }

      /// 流量数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 环信聊天室的id
      public var chatroomId: String? {
        get {
          return resultMap["chatroomId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "chatroomId")
        }
      }

      /// 新增粉丝数
      public var newFansCount: Int? {
        get {
          return resultMap["newFansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "newFansCount")
        }
      }

      /// 直播开始日期
      public var startAt: Double? {
        get {
          return resultMap["startAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "startAt")
        }
      }

      /// 直播结束日期
      public var endAt: Double? {
        get {
          return resultMap["endAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "endAt")
        }
      }

      /// live 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 主播正在进行互动的用户。如果不为 null，则表示正在互动中，可以根据此字段来做互动 UI 变更判断
      public var collaboratingUser: GraphQLID? {
        get {
          return resultMap["collaboratingUser"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "collaboratingUser")
        }
      }

      /// 用户
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "uid": uid, "avatar": avatar, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }
    }

    public struct AlgorithmFindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("followCount", type: .scalar(Int.self)),
        GraphQLField("fansCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("bio", type: .scalar(String.self)),
        GraphQLField("website", type: .scalar(String.self)),
        GraphQLField("facebook", type: .object(Facebook.selections)),
        GraphQLField("instagram", type: .object(Instagram.selections)),
        GraphQLField("followed", type: .scalar(Bool.self)),
        GraphQLField("liveId", type: .scalar(GraphQLID.self)),
        GraphQLField("liveStatus", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, avatar: String? = nil, name: String? = nil, username: String? = nil, followCount: Int? = nil, fansCount: Int? = nil, likeCount: Int? = nil, bio: String? = nil, website: String? = nil, facebook: Facebook? = nil, instagram: Instagram? = nil, followed: Bool? = nil, liveId: GraphQLID? = nil, liveStatus: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "name": name, "username": username, "followCount": followCount, "fansCount": fansCount, "likeCount": likeCount, "bio": bio, "website": website, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "followed": followed, "liveId": liveId, "liveStatus": liveStatus])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 用户名字
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 关注人数
      public var followCount: Int? {
        get {
          return resultMap["followCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "followCount")
        }
      }

      /// 粉丝数
      public var fansCount: Int? {
        get {
          return resultMap["fansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "fansCount")
        }
      }

      /// 获取的点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 个人简历
      public var bio: String? {
        get {
          return resultMap["bio"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "bio")
        }
      }

      /// 个人网站
      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      /// facebook
      public var facebook: Facebook? {
        get {
          return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
        }
      }

      /// instagram
      public var instagram: Instagram? {
        get {
          return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }

      /// 此用户直播间 ID，未直播时返回 null
      public var liveId: GraphQLID? {
        get {
          return resultMap["liveId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveId")
        }
      }

      /// 此用户是否在直播中，true 直播中，false 未直播
      public var liveStatus: Bool? {
        get {
          return resultMap["liveStatus"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStatus")
        }
      }

      public struct Facebook: GraphQLSelectionSet {
        public static let possibleTypes = ["user_facebook"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct Instagram: GraphQLSelectionSet {
        public static let possibleTypes = ["user_instagram"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }
    }

    public struct UpcomingLiveShow: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, shareLink: String? = nil, music: Music? = nil, user: User? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "describe": describe, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "shareLink": shareLink, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "uid": uid, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }

    public struct AlgorithmFindEvent: GraphQLSelectionSet {
      public static let possibleTypes = ["AppListEventResponse"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("edges", type: .list(.object(Edge.selections))),
        GraphQLField("pageInfo", type: .object(PageInfo.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil) {
        self.init(unsafeResultMap: ["__typename": "AppListEventResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var edges: [Edge?]? {
        get {
          return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
        }
      }

      public var pageInfo: PageInfo? {
        get {
          return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
        }
      }

      public struct Edge: GraphQLSelectionSet {
        public static let possibleTypes = ["Event"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("coverImages", type: .nonNull(.list(.nonNull(.object(CoverImage.selections))))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID, coverImages: [CoverImage], name: String) {
          self.init(unsafeResultMap: ["__typename": "Event", "_id": _id, "coverImages": coverImages.map { (value: CoverImage) -> ResultMap in value.resultMap }, "name": name])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 活动描述图片
        public var coverImages: [CoverImage] {
          get {
            return (resultMap["coverImages"] as! [ResultMap]).map { (value: ResultMap) -> CoverImage in CoverImage(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: CoverImage) -> ResultMap in value.resultMap }, forKey: "coverImages")
          }
        }

        /// 活动标题
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public struct CoverImage: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }
        }
      }

      public struct PageInfo: GraphQLSelectionSet {
        public static let possibleTypes = ["PageInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("hashNextPage", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(hashNextPage: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
        public var hashNextPage: Bool? {
          get {
            return resultMap["hashNextPage"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "hashNextPage")
          }
        }
      }
    }

    public struct PastLiveShowsTop: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, updatedAt: Double? = nil, shareLink: String? = nil, music: Music? = nil, user: User? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "describe": describe, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "updatedAt": updatedAt, "shareLink": shareLink, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }

    public struct AppFindFeatureHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["Hashtag"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .nonNull(.scalar(String.self))),
        GraphQLField("viewCount", type: .nonNull(.scalar(Int.self))),
        GraphQLField("videos", arguments: ["page": 1, "pageSize": 21], type: .object(Video.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID, name: String, viewCount: Int, videos: Video? = nil) {
        self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "viewCount": viewCount, "videos": videos.flatMap { (value: Video) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID {
        get {
          return resultMap["_id"]! as! GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// name
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 带此 hashtag 的 video 浏览次数总和
      public var viewCount: Int {
        get {
          return resultMap["viewCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 该 hashtag 下的 video 列表
      public var videos: Video? {
        get {
          return (resultMap["videos"] as? ResultMap).flatMap { Video(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "videos")
        }
      }

      public struct Video: GraphQLSelectionSet {
        public static let possibleTypes = ["hashtagVideosResponse"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("edges", type: .list(.object(Edge.selections))),
          GraphQLField("pageInfo", type: .object(PageInfo.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(edges: [Edge?]? = nil, pageInfo: PageInfo? = nil) {
          self.init(unsafeResultMap: ["__typename": "hashtagVideosResponse", "edges": edges.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, "pageInfo": pageInfo.flatMap { (value: PageInfo) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var edges: [Edge?]? {
          get {
            return (resultMap["edges"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Edge?] in value.map { (value: ResultMap?) -> Edge? in value.flatMap { (value: ResultMap) -> Edge in Edge(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Edge?]) -> [ResultMap?] in value.map { (value: Edge?) -> ResultMap? in value.flatMap { (value: Edge) -> ResultMap in value.resultMap } } }, forKey: "edges")
          }
        }

        public var pageInfo: PageInfo? {
          get {
            return (resultMap["pageInfo"] as? ResultMap).flatMap { PageInfo(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pageInfo")
          }
        }

        public struct Edge: GraphQLSelectionSet {
          public static let possibleTypes = ["video"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("coverImage", type: .scalar(String.self)),
            GraphQLField("teaserTitle", type: .scalar(String.self)),
            GraphQLField("video", type: .scalar(String.self)),
            GraphQLField("viewCount", type: .scalar(Int.self)),
            GraphQLField("describe", type: .scalar(String.self)),
            GraphQLField("likeCount", type: .scalar(Int.self)),
            GraphQLField("commentCount", type: .scalar(Int.self)),
            GraphQLField("duration", type: .scalar(Double.self)),
            GraphQLField("shareCount", type: .scalar(Int.self)),
            GraphQLField("allowComment", type: .scalar(Bool.self)),
            GraphQLField("liveStartAt", type: .scalar(Double.self)),
            GraphQLField("liked", type: .scalar(Bool.self)),
            GraphQLField("shareLink", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(Double.self)),
            GraphQLField("music", type: .object(Music.selections)),
            GraphQLField("user", type: .object(User.selections)),
            GraphQLField("videoType", type: .scalar(VideoType.self)),
            GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
            GraphQLField("live", type: .object(Live.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, shareLink: String? = nil, updatedAt: Double? = nil, music: Music? = nil, user: User? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
            self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "describe": describe, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "shareLink": shareLink, "updatedAt": updatedAt, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 封面图
          public var coverImage: String? {
            get {
              return resultMap["coverImage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "coverImage")
            }
          }

          /// 【teaser 短视频】预告直播标题
          public var teaserTitle: String? {
            get {
              return resultMap["teaserTitle"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "teaserTitle")
            }
          }

          /// 视频播放地址
          public var video: String? {
            get {
              return resultMap["video"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// 浏览次数
          public var viewCount: Int? {
            get {
              return resultMap["viewCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "viewCount")
            }
          }

          /// 描述
          public var describe: String? {
            get {
              return resultMap["describe"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "describe")
            }
          }

          /// 点赞次数
          public var likeCount: Int? {
            get {
              return resultMap["likeCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "likeCount")
            }
          }

          /// 评论次数
          public var commentCount: Int? {
            get {
              return resultMap["commentCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "commentCount")
            }
          }

          /// 视频时长
          public var duration: Double? {
            get {
              return resultMap["duration"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "duration")
            }
          }

          /// 分享次数
          public var shareCount: Int? {
            get {
              return resultMap["shareCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareCount")
            }
          }

          /// 是否允许评论
          public var allowComment: Bool? {
            get {
              return resultMap["allowComment"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "allowComment")
            }
          }

          /// 【teaser / past show 短视频】直播开始日期
          public var liveStartAt: Double? {
            get {
              return resultMap["liveStartAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "liveStartAt")
            }
          }

          /// 是否点赞
          public var liked: Bool? {
            get {
              return resultMap["liked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "liked")
            }
          }

          /// video 分享链接
          public var shareLink: String? {
            get {
              return resultMap["shareLink"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shareLink")
            }
          }

          /// 更新日期
          public var updatedAt: Double? {
            get {
              return resultMap["updatedAt"] as? Double
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 视频中搭配的音乐
          public var music: Music? {
            get {
              return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "music")
            }
          }

          /// 作者
          public var user: User? {
            get {
              return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "user")
            }
          }

          /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
          public var videoType: VideoType? {
            get {
              return resultMap["videoType"] as? VideoType
            }
            set {
              resultMap.updateValue(newValue, forKey: "videoType")
            }
          }

          /// 【teaser 短视频】是否已订阅对应的 live
          public var hasSubscribedLive: Bool? {
            get {
              return resultMap["hasSubscribedLive"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
            }
          }

          /// 【teaser / past show 短视频】直播预告关联的直播
          public var live: Live? {
            get {
              return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "live")
            }
          }

          public struct Music: GraphQLSelectionSet {
            public static let possibleTypes = ["music"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("title", type: .scalar(String.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, title: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 音乐标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }
          }

          public struct User: GraphQLSelectionSet {
            public static let possibleTypes = ["type__user"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("uid", type: .scalar(String.self)),
              GraphQLField("avatar", type: .scalar(String.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("followed", type: .scalar(Bool.self)),
              GraphQLField("role", type: .scalar(enum__userRole.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
              self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "uid": uid, "avatar": avatar, "username": username, "followed": followed, "role": role])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// id
            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
            public var uid: String? {
              get {
                return resultMap["uid"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "uid")
              }
            }

            /// 头像
            public var avatar: String? {
              get {
                return resultMap["avatar"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "avatar")
              }
            }

            /// 用户名
            public var username: String? {
              get {
                return resultMap["username"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "username")
              }
            }

            /// 是否关注
            public var followed: Bool? {
              get {
                return resultMap["followed"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "followed")
              }
            }

            /// 用户角色
            public var role: enum__userRole? {
              get {
                return resultMap["role"] as? enum__userRole
              }
              set {
                resultMap.updateValue(newValue, forKey: "role")
              }
            }
          }

          public struct Live: GraphQLSelectionSet {
            public static let possibleTypes = ["live"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
              GraphQLField("coverImage", type: .scalar(String.self)),
              GraphQLField("title", type: .scalar(String.self)),
              GraphQLField("status", type: .scalar(Bool.self)),
              GraphQLField("scheduleStartAt", type: .scalar(String.self)),
              GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
              self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }

            /// 封面图
            public var coverImage: String? {
              get {
                return resultMap["coverImage"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "coverImage")
              }
            }

            /// 标题
            public var title: String? {
              get {
                return resultMap["title"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "title")
              }
            }

            /// 是否正在直播
            public var status: Bool? {
              get {
                return resultMap["status"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "status")
              }
            }

            /// live schedule 开始时间
            public var scheduleStartAt: String? {
              get {
                return resultMap["scheduleStartAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "scheduleStartAt")
              }
            }

            /// 直播状态，可替代早期的 status
            public var streamingStatus: LiveStreamingStatus? {
              get {
                return resultMap["streamingStatus"] as? LiveStreamingStatus
              }
              set {
                resultMap.updateValue(newValue, forKey: "streamingStatus")
              }
            }
          }
        }

        public struct PageInfo: GraphQLSelectionSet {
          public static let possibleTypes = ["PageInfo"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("hashNextPage", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(hashNextPage: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "PageInfo", "hashNextPage": hashNextPage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 是否还有下一页数据。=true 表示有下一页，可以继续拉；=false 表示数据已经加载完
          public var hashNextPage: Bool? {
            get {
              return resultMap["hashNextPage"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "hashNextPage")
            }
          }
        }
      }
    }

    public struct AlgorithmFindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("updatedAt", type: .scalar(Double.self)),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, coverImage: String? = nil, teaserTitle: String? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, likeCount: Int? = nil, commentCount: Int? = nil, duration: Double? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, liveStartAt: Double? = nil, liked: Bool? = nil, shareLink: String? = nil, updatedAt: Double? = nil, music: Music? = nil, user: User? = nil, videoType: VideoType? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "coverImage": coverImage, "teaserTitle": teaserTitle, "video": video, "viewCount": viewCount, "describe": describe, "likeCount": likeCount, "commentCount": commentCount, "duration": duration, "shareCount": shareCount, "allowComment": allowComment, "liveStartAt": liveStartAt, "liked": liked, "shareLink": shareLink, "updatedAt": updatedAt, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "videoType": videoType, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 更新日期
      public var updatedAt: Double? {
        get {
          return resultMap["updatedAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, uid: String? = nil, avatar: String? = nil, username: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "uid": uid, "avatar": avatar, "username": username, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, scheduleStartAt: String? = nil, streamingStatus: LiveStreamingStatus? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "scheduleStartAt": scheduleStartAt, "streamingStatus": streamingStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }
      }
    }
  }
}

public final class LikeCommentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation likeComment($comment: ID!, $status: Boolean!) {
      likeComment(comment: $comment, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "likeComment"

  public var comment: GraphQLID
  public var status: Bool

  public init(comment: GraphQLID, status: Bool) {
    self.comment = comment
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["comment": comment, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("likeComment", arguments: ["comment": GraphQLVariable("comment"), "status": GraphQLVariable("status")], type: .object(LikeComment.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(likeComment: LikeComment? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "likeComment": likeComment.flatMap { (value: LikeComment) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 点赞评论
    public var likeComment: LikeComment? {
      get {
        return (resultMap["likeComment"] as? ResultMap).flatMap { LikeComment(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "likeComment")
      }
    }

    public struct LikeComment: GraphQLSelectionSet {
      public static let possibleTypes = ["likeComment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "likeComment", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class LikeLiveMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation likeLive($_id: ID!) {
      likeLive(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "likeLive"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("likeLive", arguments: ["_id": GraphQLVariable("_id")], type: .object(LikeLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(likeLive: LikeLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "likeLive": likeLive.flatMap { (value: LikeLive) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 点赞了直播
    public var likeLive: LikeLive? {
      get {
        return (resultMap["likeLive"] as? ResultMap).flatMap { LikeLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "likeLive")
      }
    }

    public struct LikeLive: GraphQLSelectionSet {
      public static let possibleTypes = ["likeLive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "likeLive", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class LikeVideoMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation likeVideo($video: ID!, $status: Boolean!) {
      likeVideo(video: $video, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "likeVideo"

  public var video: GraphQLID
  public var status: Bool

  public init(video: GraphQLID, status: Bool) {
    self.video = video
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["video": video, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("likeVideo", arguments: ["video": GraphQLVariable("video"), "status": GraphQLVariable("status")], type: .object(LikeVideo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(likeVideo: LikeVideo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "likeVideo": likeVideo.flatMap { (value: LikeVideo) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 点赞视频
    public var likeVideo: LikeVideo? {
      get {
        return (resultMap["likeVideo"] as? ResultMap).flatMap { LikeVideo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "likeVideo")
      }
    }

    public struct LikeVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["likeVideo"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "likeVideo", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class LiveInfoSubscription: GraphQLSubscription {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    subscription LiveInfo($liveId: ID!) {
      liveInfo(liveId: $liveId) {
        __typename
        explainProduct {
          __typename
          eventId
          liveId
          productId
        }
        productChange {
          __typename
          eventId
          liveId
          _id
          productType
          stock
          livePrice
          variants {
            __typename
            _id
            name
            quantity
            shopifyProductVariantId
          }
        }
        productAdded {
          __typename
          eventId
          liveId
          productId
        }
        auctionProduct {
          __typename
          live
          productId
          auctionStatus
          endBidTime
          extendBidTime
          latestBidPrice
          recommendBidPrice
          bidsCount
          latestBidder {
            __typename
            _id
            avatar
            username
            name
            uid
            role
            userType
            phoneNumber
            email
          }
        }
      }
    }
    """

  public let operationName = "LiveInfo"

  public var liveId: GraphQLID

  public init(liveId: GraphQLID) {
    self.liveId = liveId
  }

  public var variables: GraphQLMap? {
    return ["liveId": liveId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("liveInfo", arguments: ["liveId": GraphQLVariable("liveId")], type: .object(LiveInfo.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(liveInfo: LiveInfo? = nil) {
      self.init(unsafeResultMap: ["__typename": "Subscription", "liveInfo": liveInfo.flatMap { (value: LiveInfo) -> ResultMap in value.resultMap }])
    }

    public var liveInfo: LiveInfo? {
      get {
        return (resultMap["liveInfo"] as? ResultMap).flatMap { LiveInfo(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "liveInfo")
      }
    }

    public struct LiveInfo: GraphQLSelectionSet {
      public static let possibleTypes = ["LiveInfo"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("explainProduct", type: .object(ExplainProduct.selections)),
        GraphQLField("productChange", type: .object(ProductChange.selections)),
        GraphQLField("productAdded", type: .object(ProductAdded.selections)),
        GraphQLField("auctionProduct", type: .object(AuctionProduct.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(explainProduct: ExplainProduct? = nil, productChange: ProductChange? = nil, productAdded: ProductAdded? = nil, auctionProduct: AuctionProduct? = nil) {
        self.init(unsafeResultMap: ["__typename": "LiveInfo", "explainProduct": explainProduct.flatMap { (value: ExplainProduct) -> ResultMap in value.resultMap }, "productChange": productChange.flatMap { (value: ProductChange) -> ResultMap in value.resultMap }, "productAdded": productAdded.flatMap { (value: ProductAdded) -> ResultMap in value.resultMap }, "auctionProduct": auctionProduct.flatMap { (value: AuctionProduct) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 主播正在讲解的商品更新. 可替代环信的 EXPLAIN_PRODUCT 事件
      public var explainProduct: ExplainProduct? {
        get {
          return (resultMap["explainProduct"] as? ResultMap).flatMap { ExplainProduct(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "explainProduct")
        }
      }

      /// 商品信息更新，如库存、价格等. 可替代环信的 PRODUCT_CHANGE 事件
      public var productChange: ProductChange? {
        get {
          return (resultMap["productChange"] as? ResultMap).flatMap { ProductChange(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "productChange")
        }
      }

      /// 主播在直播过程中添加了新的商品. 可替代环信的 PRODUCT_ADDED 事件
      public var productAdded: ProductAdded? {
        get {
          return (resultMap["productAdded"] as? ResultMap).flatMap { ProductAdded(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "productAdded")
        }
      }

      /// 拍卖商品更新
      public var auctionProduct: AuctionProduct? {
        get {
          return (resultMap["auctionProduct"] as? ResultMap).flatMap { AuctionProduct(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "auctionProduct")
        }
      }

      public struct ExplainProduct: GraphQLSelectionSet {
        public static let possibleTypes = ["ExplainProductChange"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("eventId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("liveId", type: .nonNull(.scalar(String.self))),
          GraphQLField("productId", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(eventId: GraphQLID, liveId: String, productId: String) {
          self.init(unsafeResultMap: ["__typename": "ExplainProductChange", "eventId": eventId, "liveId": liveId, "productId": productId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 事件排重 id
        public var eventId: GraphQLID {
          get {
            return resultMap["eventId"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "eventId")
          }
        }

        /// 为保持和 EXPLAIN_PRODUCT 兼容有此字段，实际基于 live id 订阅，此字段应该用不到，可以不写在 query 里
        public var liveId: String {
          get {
            return resultMap["liveId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveId")
          }
        }

        /// 正在讲解的商品 id
        public var productId: String {
          get {
            return resultMap["productId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "productId")
          }
        }
      }

      public struct ProductChange: GraphQLSelectionSet {
        public static let possibleTypes = ["ProductChange"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("eventId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("liveId", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(String.self))),
          GraphQLField("productType", type: .nonNull(.scalar(enum__productType.self))),
          GraphQLField("stock", type: .nonNull(.scalar(Int.self))),
          GraphQLField("livePrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("variants", type: .nonNull(.list(.nonNull(.object(Variant.selections))))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(eventId: GraphQLID, liveId: String, _id: String, productType: enum__productType, stock: Int, livePrice: Int, variants: [Variant]) {
          self.init(unsafeResultMap: ["__typename": "ProductChange", "eventId": eventId, "liveId": liveId, "_id": _id, "productType": productType, "stock": stock, "livePrice": livePrice, "variants": variants.map { (value: Variant) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 事件排重 id
        public var eventId: GraphQLID {
          get {
            return resultMap["eventId"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "eventId")
          }
        }

        /// 为保持和 EXPLAIN_PRODUCT 兼容有此字段，实际基于 live id 订阅，此字段应该用不到，可以不写在 query 里
        public var liveId: String {
          get {
            return resultMap["liveId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveId")
          }
        }

        /// product id
        public var _id: String {
          get {
            return resultMap["_id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 商品类型
        public var productType: enum__productType {
          get {
            return resultMap["productType"]! as! enum__productType
          }
          set {
            resultMap.updateValue(newValue, forKey: "productType")
          }
        }

        /// 商品总数量。是 variants 中各种款式商品数量总和
        public var stock: Int {
          get {
            return resultMap["stock"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "stock")
          }
        }

        /// 直播价格
        public var livePrice: Int {
          get {
            return resultMap["livePrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "livePrice")
          }
        }

        /// 商品属性
        public var variants: [Variant] {
          get {
            return (resultMap["variants"] as! [ResultMap]).map { (value: ResultMap) -> Variant in Variant(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Variant) -> ResultMap in value.resultMap }, forKey: "variants")
          }
        }

        public struct Variant: GraphQLSelectionSet {
          public static let possibleTypes = ["Variant"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("quantity", type: .scalar(Int.self)),
            GraphQLField("shopifyProductVariantId", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, name: String? = nil, quantity: Int? = nil, shopifyProductVariantId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Variant", "_id": _id, "name": name, "quantity": quantity, "shopifyProductVariantId": shopifyProductVariantId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// variant id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 属性名
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 库存
          public var quantity: Int? {
            get {
              return resultMap["quantity"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "quantity")
            }
          }

          /// 关联的 shopify product.variants.id
          public var shopifyProductVariantId: String? {
            get {
              return resultMap["shopifyProductVariantId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "shopifyProductVariantId")
            }
          }
        }
      }

      public struct ProductAdded: GraphQLSelectionSet {
        public static let possibleTypes = ["ProductAddedChange"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("eventId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("liveId", type: .nonNull(.scalar(String.self))),
          GraphQLField("productId", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(eventId: GraphQLID, liveId: String, productId: String) {
          self.init(unsafeResultMap: ["__typename": "ProductAddedChange", "eventId": eventId, "liveId": liveId, "productId": productId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 事件排重 id
        public var eventId: GraphQLID {
          get {
            return resultMap["eventId"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "eventId")
          }
        }

        /// 为保持和 EXPLAIN_PRODUCT 兼容有此字段，实际基于 live id 订阅，此字段应该用不到，可以不写在 query 里
        public var liveId: String {
          get {
            return resultMap["liveId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "liveId")
          }
        }

        /// 新增的商品 id
        public var productId: String {
          get {
            return resultMap["productId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "productId")
          }
        }
      }

      public struct AuctionProduct: GraphQLSelectionSet {
        public static let possibleTypes = ["AuctionBidInfo"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("live", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("productId", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("auctionStatus", type: .nonNull(.scalar(AuctionStatus.self))),
          GraphQLField("endBidTime", type: .nonNull(.scalar(String.self))),
          GraphQLField("extendBidTime", type: .scalar(Int.self)),
          GraphQLField("latestBidPrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("recommendBidPrice", type: .nonNull(.scalar(Int.self))),
          GraphQLField("bidsCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("latestBidder", type: .object(LatestBidder.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(live: GraphQLID, productId: GraphQLID, auctionStatus: AuctionStatus, endBidTime: String, extendBidTime: Int? = nil, latestBidPrice: Int, recommendBidPrice: Int, bidsCount: Int, latestBidder: LatestBidder? = nil) {
          self.init(unsafeResultMap: ["__typename": "AuctionBidInfo", "live": live, "productId": productId, "auctionStatus": auctionStatus, "endBidTime": endBidTime, "extendBidTime": extendBidTime, "latestBidPrice": latestBidPrice, "recommendBidPrice": recommendBidPrice, "bidsCount": bidsCount, "latestBidder": latestBidder.flatMap { (value: LatestBidder) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// live id
        public var live: GraphQLID {
          get {
            return resultMap["live"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "live")
          }
        }

        /// 商品 id
        public var productId: GraphQLID {
          get {
            return resultMap["productId"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "productId")
          }
        }

        /// 当前拍卖状态
        public var auctionStatus: AuctionStatus {
          get {
            return resultMap["auctionStatus"]! as! AuctionStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "auctionStatus")
          }
        }

        /// 当前出价结束时间
        public var endBidTime: String {
          get {
            return resultMap["endBidTime"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "endBidTime")
          }
        }

        /// 延长出价时间，单位：秒。此字段有值时，表示出价时间延长 {extendBidTime} 秒；为 null 时，表示无延长时间逻辑，即客户端不需要做处理
        public var extendBidTime: Int? {
          get {
            return resultMap["extendBidTime"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "extendBidTime")
          }
        }

        /// 最新出价
        public var latestBidPrice: Int {
          get {
            return resultMap["latestBidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "latestBidPrice")
          }
        }

        /// 建议出价
        public var recommendBidPrice: Int {
          get {
            return resultMap["recommendBidPrice"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "recommendBidPrice")
          }
        }

        /// 出价次数
        public var bidsCount: Int {
          get {
            return resultMap["bidsCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "bidsCount")
          }
        }

        /// 最新出价用户信息
        public var latestBidder: LatestBidder? {
          get {
            return (resultMap["latestBidder"] as? ResultMap).flatMap { LatestBidder(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "latestBidder")
          }
        }

        public struct LatestBidder: GraphQLSelectionSet {
          public static let possibleTypes = ["SimpleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .scalar(GraphQLID.self)),
            GraphQLField("avatar", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("uid", type: .scalar(String.self)),
            GraphQLField("role", type: .scalar(enum__userRole.self)),
            GraphQLField("userType", type: .scalar(enum__userType.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID? = nil, avatar: String? = nil, username: String? = nil, name: String? = nil, uid: String? = nil, role: enum__userRole? = nil, userType: enum__userType? = nil, phoneNumber: String? = nil, email: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "SimpleUser", "_id": _id, "avatar": avatar, "username": username, "name": name, "uid": uid, "role": role, "userType": userType, "phoneNumber": phoneNumber, "email": email])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID? {
            get {
              return resultMap["_id"] as? GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// 头像
          public var avatar: String? {
            get {
              return resultMap["avatar"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "avatar")
            }
          }

          /// 用户名
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 用户名字
          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
          public var uid: String? {
            get {
              return resultMap["uid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "uid")
            }
          }

          /// 用户角色
          public var role: enum__userRole? {
            get {
              return resultMap["role"] as? enum__userRole
            }
            set {
              resultMap.updateValue(newValue, forKey: "role")
            }
          }

          /// 用户类型
          public var userType: enum__userType? {
            get {
              return resultMap["userType"] as? enum__userType
            }
            set {
              resultMap.updateValue(newValue, forKey: "userType")
            }
          }

          /// 手机号
          public var phoneNumber: String? {
            get {
              return resultMap["phoneNumber"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          /// 邮箱
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }
        }
      }
    }
  }
}

public final class MePageQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query MePage($userID: ID, $username: String, $users: [ID], $page: Int, $pageSize: Int) {
      findUsers(_id: $userID, username: $username) {
        __typename
        _id
        uid
        hasBlocked
        avatar
        name
        username
        followCount
        fansCount
        likeCount
        bio
        website
        facebook {
          __typename
          id
          username
          homePage
        }
        newOrdersCount {
          __typename
          selling
          buying
          ticket
        }
        instagram {
          __typename
          id
          username
          homePage
        }
        followed
        liveStatus
        liveId
        store {
          __typename
          _id
          storeName
          storePicture {
            __typename
            image
            key
          }
          deleted
        }
        role
        recentSellerRequest {
          __typename
          reviewStatus
        }
      }
      findFollowInterests(users: $users, page: 1, pageSize: 100) {
        __typename
        interest {
          __typename
          name
          _id
          followed
          hashtags {
            __typename
            _id
            name
            userCount
            followed
          }
        }
      }
      findVideos(page: $page, pageSize: $pageSize, users: $users, sort: [{field: createdAt, value: DESC}]) {
        __typename
        _id
        video
        viewCount
        describe
        describeMapping {
          __typename
          users {
            __typename
            text
            id {
              __typename
              _id
            }
          }
        }
        watch
        coverImage
        liked
        duration
        likeCount
        commentCount
        shareCount
        allowComment
        teaserTitle
        liveStartAt
        videoType
        shareLink
        location
        placeId
        placeName
        placeAddress
        interests {
          __typename
          name
          _id
          hashtags {
            __typename
            _id
            name
          }
        }
        music {
          __typename
          _id
          title
        }
        user {
          __typename
          username
          _id
          avatar
          followed
          role
        }
        hasSubscribedLive
        live {
          __typename
          _id
          coverImage
          title
          status
          streamingStatus
          scheduleStartAt
        }
      }
    }
    """

  public let operationName = "MePage"

  public var userID: GraphQLID?
  public var username: String?
  public var users: [GraphQLID?]?
  public var page: Int?
  public var pageSize: Int?

  public init(userID: GraphQLID? = nil, username: String? = nil, users: [GraphQLID?]? = nil, page: Int? = nil, pageSize: Int? = nil) {
    self.userID = userID
    self.username = username
    self.users = users
    self.page = page
    self.pageSize = pageSize
  }

  public var variables: GraphQLMap? {
    return ["userID": userID, "username": username, "users": users, "page": page, "pageSize": pageSize]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("findUsers", arguments: ["_id": GraphQLVariable("userID"), "username": GraphQLVariable("username")], type: .list(.object(FindUser.selections))),
      GraphQLField("findFollowInterests", arguments: ["users": GraphQLVariable("users"), "page": 1, "pageSize": 100], type: .list(.object(FindFollowInterest.selections))),
      GraphQLField("findVideos", arguments: ["page": GraphQLVariable("page"), "pageSize": GraphQLVariable("pageSize"), "users": GraphQLVariable("users"), "sort": [["field": "createdAt", "value": "DESC"]]], type: .list(.object(FindVideo.selections))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findUsers: [FindUser?]? = nil, findFollowInterests: [FindFollowInterest?]? = nil, findVideos: [FindVideo?]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findUsers": findUsers.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, "findFollowInterests": findFollowInterests.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }, "findVideos": findVideos.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }])
    }

    /// 查询用户
    public var findUsers: [FindUser?]? {
      get {
        return (resultMap["findUsers"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindUser?] in value.map { (value: ResultMap?) -> FindUser? in value.flatMap { (value: ResultMap) -> FindUser in FindUser(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindUser?]) -> [ResultMap?] in value.map { (value: FindUser?) -> ResultMap? in value.flatMap { (value: FindUser) -> ResultMap in value.resultMap } } }, forKey: "findUsers")
      }
    }

    /// ***【接口权限: 普通登录用户】***
    /// 查询兴趣与用户的关联关系。此接口会过滤已被删除的 interests，因 interests 数量有限，可以适当把 pageSize 设的大一点（最大 100）或不传分页参数
    public var findFollowInterests: [FindFollowInterest?]? {
      get {
        return (resultMap["findFollowInterests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindFollowInterest?] in value.map { (value: ResultMap?) -> FindFollowInterest? in value.flatMap { (value: ResultMap) -> FindFollowInterest in FindFollowInterest(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindFollowInterest?]) -> [ResultMap?] in value.map { (value: FindFollowInterest?) -> ResultMap? in value.flatMap { (value: FindFollowInterest) -> ResultMap in value.resultMap } } }, forKey: "findFollowInterests")
      }
    }

    /// 客户端查询用户视频列表
    public var findVideos: [FindVideo?]? {
      get {
        return (resultMap["findVideos"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [FindVideo?] in value.map { (value: ResultMap?) -> FindVideo? in value.flatMap { (value: ResultMap) -> FindVideo in FindVideo(unsafeResultMap: value) } } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [FindVideo?]) -> [ResultMap?] in value.map { (value: FindVideo?) -> ResultMap? in value.flatMap { (value: FindVideo) -> ResultMap in value.resultMap } } }, forKey: "findVideos")
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes = ["type__user"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("uid", type: .scalar(String.self)),
        GraphQLField("hasBlocked", type: .scalar(Bool.self)),
        GraphQLField("avatar", type: .scalar(String.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("username", type: .scalar(String.self)),
        GraphQLField("followCount", type: .scalar(Int.self)),
        GraphQLField("fansCount", type: .scalar(Int.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("bio", type: .scalar(String.self)),
        GraphQLField("website", type: .scalar(String.self)),
        GraphQLField("facebook", type: .object(Facebook.selections)),
        GraphQLField("newOrdersCount", type: .object(NewOrdersCount.selections)),
        GraphQLField("instagram", type: .object(Instagram.selections)),
        GraphQLField("followed", type: .scalar(Bool.self)),
        GraphQLField("liveStatus", type: .scalar(Bool.self)),
        GraphQLField("liveId", type: .scalar(GraphQLID.self)),
        GraphQLField("store", type: .object(Store.selections)),
        GraphQLField("role", type: .scalar(enum__userRole.self)),
        GraphQLField("recentSellerRequest", type: .object(RecentSellerRequest.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, uid: String? = nil, hasBlocked: Bool? = nil, avatar: String? = nil, name: String? = nil, username: String? = nil, followCount: Int? = nil, fansCount: Int? = nil, likeCount: Int? = nil, bio: String? = nil, website: String? = nil, facebook: Facebook? = nil, newOrdersCount: NewOrdersCount? = nil, instagram: Instagram? = nil, followed: Bool? = nil, liveStatus: Bool? = nil, liveId: GraphQLID? = nil, store: Store? = nil, role: enum__userRole? = nil, recentSellerRequest: RecentSellerRequest? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__user", "_id": _id, "uid": uid, "hasBlocked": hasBlocked, "avatar": avatar, "name": name, "username": username, "followCount": followCount, "fansCount": fansCount, "likeCount": likeCount, "bio": bio, "website": website, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "newOrdersCount": newOrdersCount.flatMap { (value: NewOrdersCount) -> ResultMap in value.resultMap }, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "followed": followed, "liveStatus": liveStatus, "liveId": liveId, "store": store.flatMap { (value: Store) -> ResultMap in value.resultMap }, "role": role, "recentSellerRequest": recentSellerRequest.flatMap { (value: RecentSellerRequest) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// id
      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
      public var uid: String? {
        get {
          return resultMap["uid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "uid")
        }
      }

      /// 请求用户信息时，指示是否已经把此用户屏蔽
      public var hasBlocked: Bool? {
        get {
          return resultMap["hasBlocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasBlocked")
        }
      }

      /// 头像
      public var avatar: String? {
        get {
          return resultMap["avatar"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "avatar")
        }
      }

      /// 用户名字
      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 用户名
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 关注人数
      public var followCount: Int? {
        get {
          return resultMap["followCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "followCount")
        }
      }

      /// 粉丝数
      public var fansCount: Int? {
        get {
          return resultMap["fansCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "fansCount")
        }
      }

      /// 获取的点赞数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 个人简历
      public var bio: String? {
        get {
          return resultMap["bio"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "bio")
        }
      }

      /// 个人网站
      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      /// facebook
      public var facebook: Facebook? {
        get {
          return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
        }
      }

      /// 新订单提醒数量
      public var newOrdersCount: NewOrdersCount? {
        get {
          return (resultMap["newOrdersCount"] as? ResultMap).flatMap { NewOrdersCount(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "newOrdersCount")
        }
      }

      /// instagram
      public var instagram: Instagram? {
        get {
          return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
        }
      }

      /// 是否关注
      public var followed: Bool? {
        get {
          return resultMap["followed"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "followed")
        }
      }

      /// 此用户是否在直播中，true 直播中，false 未直播
      public var liveStatus: Bool? {
        get {
          return resultMap["liveStatus"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStatus")
        }
      }

      /// 此用户直播间 ID，未直播时返回 null
      public var liveId: GraphQLID? {
        get {
          return resultMap["liveId"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveId")
        }
      }

      /// 商店
      public var store: Store? {
        get {
          return (resultMap["store"] as? ResultMap).flatMap { Store(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "store")
        }
      }

      /// 用户角色
      public var role: enum__userRole? {
        get {
          return resultMap["role"] as? enum__userRole
        }
        set {
          resultMap.updateValue(newValue, forKey: "role")
        }
      }

      /// 最近一次 seller request
      public var recentSellerRequest: RecentSellerRequest? {
        get {
          return (resultMap["recentSellerRequest"] as? ResultMap).flatMap { RecentSellerRequest(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "recentSellerRequest")
        }
      }

      public struct Facebook: GraphQLSelectionSet {
        public static let possibleTypes = ["user_facebook"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct NewOrdersCount: GraphQLSelectionSet {
        public static let possibleTypes = ["UserNewOrdersCount"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("selling", type: .scalar(Int.self)),
          GraphQLField("buying", type: .scalar(Int.self)),
          GraphQLField("ticket", type: .scalar(Int.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(selling: Int? = nil, buying: Int? = nil, ticket: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserNewOrdersCount", "selling": selling, "buying": buying, "ticket": ticket])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 未查看的新 selling 订单数
        public var selling: Int? {
          get {
            return resultMap["selling"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "selling")
          }
        }

        /// 未查看的新 buying 订单数
        public var buying: Int? {
          get {
            return resultMap["buying"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "buying")
          }
        }

        /// 未查看的新 ticket 订单数
        public var ticket: Int? {
          get {
            return resultMap["ticket"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticket")
          }
        }
      }

      public struct Instagram: GraphQLSelectionSet {
        public static let possibleTypes = ["user_instagram"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("homePage", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        public var homePage: String? {
          get {
            return resultMap["homePage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "homePage")
          }
        }
      }

      public struct Store: GraphQLSelectionSet {
        public static let possibleTypes = ["type__userStore"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("storeName", type: .scalar(String.self)),
          GraphQLField("storePicture", type: .object(StorePicture.selections)),
          GraphQLField("deleted", type: .scalar(Bool.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, storeName: String? = nil, storePicture: StorePicture? = nil, deleted: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__userStore", "_id": _id, "storeName": storeName, "storePicture": storePicture.flatMap { (value: StorePicture) -> ResultMap in value.resultMap }, "deleted": deleted])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        public var storeName: String? {
          get {
            return resultMap["storeName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "storeName")
          }
        }

        public var storePicture: StorePicture? {
          get {
            return (resultMap["storePicture"] as? ResultMap).flatMap { StorePicture(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "storePicture")
          }
        }

        public var deleted: Bool? {
          get {
            return resultMap["deleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "deleted")
          }
        }

        public struct StorePicture: GraphQLSelectionSet {
          public static let possibleTypes = ["ImageWithKey"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("key", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(image: String? = nil, key: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "ImageWithKey", "image": image, "key": key])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var image: String? {
            get {
              return resultMap["image"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "image")
            }
          }

          public var key: String? {
            get {
              return resultMap["key"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }
        }
      }

      public struct RecentSellerRequest: GraphQLSelectionSet {
        public static let possibleTypes = ["SellerRequest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("reviewStatus", type: .nonNull(.scalar(SellerRequestReviewStatus.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(reviewStatus: SellerRequestReviewStatus) {
          self.init(unsafeResultMap: ["__typename": "SellerRequest", "reviewStatus": reviewStatus])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 申请审核的状态
        public var reviewStatus: SellerRequestReviewStatus {
          get {
            return resultMap["reviewStatus"]! as! SellerRequestReviewStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "reviewStatus")
          }
        }
      }
    }

    public struct FindFollowInterest: GraphQLSelectionSet {
      public static let possibleTypes = ["FollowInterest"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("interest", type: .nonNull(.object(Interest.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(interest: Interest) {
        self.init(unsafeResultMap: ["__typename": "FollowInterest", "interest": interest.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var interest: Interest {
        get {
          return Interest(unsafeResultMap: resultMap["interest"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "interest")
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("hashtags", type: .list(.object(Hashtag.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(name: String, _id: GraphQLID, followed: Bool, hashtags: [Hashtag?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "name": name, "_id": _id, "followed": followed, "hashtags": hashtags.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 用户是否关注该 interest
        public var followed: Bool {
          get {
            return resultMap["followed"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 查询该兴趣下的话题，参数可选
        public var hashtags: [Hashtag?]? {
          get {
            return (resultMap["hashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Hashtag?] in value.map { (value: ResultMap?) -> Hashtag? in value.flatMap { (value: ResultMap) -> Hashtag in Hashtag(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }, forKey: "hashtags")
          }
        }

        public struct Hashtag: GraphQLSelectionSet {
          public static let possibleTypes = ["Hashtag"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("userCount", type: .scalar(Int.self)),
            GraphQLField("followed", type: .nonNull(.scalar(Bool.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String, userCount: Int? = nil, followed: Bool) {
            self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name, "userCount": userCount, "followed": followed])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// name
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 关注该话题的用户数
          public var userCount: Int? {
            get {
              return resultMap["userCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "userCount")
            }
          }

          /// 当前用户是否关注此 hashtag
          public var followed: Bool {
            get {
              return resultMap["followed"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "followed")
            }
          }
        }
      }
    }

    public struct FindVideo: GraphQLSelectionSet {
      public static let possibleTypes = ["video"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("_id", type: .scalar(GraphQLID.self)),
        GraphQLField("video", type: .scalar(String.self)),
        GraphQLField("viewCount", type: .scalar(Int.self)),
        GraphQLField("describe", type: .scalar(String.self)),
        GraphQLField("describeMapping", type: .object(DescribeMapping.selections)),
        GraphQLField("watch", type: .scalar(enumWatch.self)),
        GraphQLField("coverImage", type: .scalar(String.self)),
        GraphQLField("liked", type: .scalar(Bool.self)),
        GraphQLField("duration", type: .scalar(Double.self)),
        GraphQLField("likeCount", type: .scalar(Int.self)),
        GraphQLField("commentCount", type: .scalar(Int.self)),
        GraphQLField("shareCount", type: .scalar(Int.self)),
        GraphQLField("allowComment", type: .scalar(Bool.self)),
        GraphQLField("teaserTitle", type: .scalar(String.self)),
        GraphQLField("liveStartAt", type: .scalar(Double.self)),
        GraphQLField("videoType", type: .scalar(VideoType.self)),
        GraphQLField("shareLink", type: .scalar(String.self)),
        GraphQLField("location", type: .list(.scalar(Double.self))),
        GraphQLField("placeId", type: .scalar(String.self)),
        GraphQLField("placeName", type: .scalar(String.self)),
        GraphQLField("placeAddress", type: .scalar(String.self)),
        GraphQLField("interests", type: .list(.object(Interest.selections))),
        GraphQLField("music", type: .object(Music.selections)),
        GraphQLField("user", type: .object(User.selections)),
        GraphQLField("hasSubscribedLive", type: .scalar(Bool.self)),
        GraphQLField("live", type: .object(Live.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(_id: GraphQLID? = nil, video: String? = nil, viewCount: Int? = nil, describe: String? = nil, describeMapping: DescribeMapping? = nil, watch: enumWatch? = nil, coverImage: String? = nil, liked: Bool? = nil, duration: Double? = nil, likeCount: Int? = nil, commentCount: Int? = nil, shareCount: Int? = nil, allowComment: Bool? = nil, teaserTitle: String? = nil, liveStartAt: Double? = nil, videoType: VideoType? = nil, shareLink: String? = nil, location: [Double?]? = nil, placeId: String? = nil, placeName: String? = nil, placeAddress: String? = nil, interests: [Interest?]? = nil, music: Music? = nil, user: User? = nil, hasSubscribedLive: Bool? = nil, live: Live? = nil) {
        self.init(unsafeResultMap: ["__typename": "video", "_id": _id, "video": video, "viewCount": viewCount, "describe": describe, "describeMapping": describeMapping.flatMap { (value: DescribeMapping) -> ResultMap in value.resultMap }, "watch": watch, "coverImage": coverImage, "liked": liked, "duration": duration, "likeCount": likeCount, "commentCount": commentCount, "shareCount": shareCount, "allowComment": allowComment, "teaserTitle": teaserTitle, "liveStartAt": liveStartAt, "videoType": videoType, "shareLink": shareLink, "location": location, "placeId": placeId, "placeName": placeName, "placeAddress": placeAddress, "interests": interests.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, "music": music.flatMap { (value: Music) -> ResultMap in value.resultMap }, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }, "hasSubscribedLive": hasSubscribedLive, "live": live.flatMap { (value: Live) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var _id: GraphQLID? {
        get {
          return resultMap["_id"] as? GraphQLID
        }
        set {
          resultMap.updateValue(newValue, forKey: "_id")
        }
      }

      /// 视频播放地址
      public var video: String? {
        get {
          return resultMap["video"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "video")
        }
      }

      /// 浏览次数
      public var viewCount: Int? {
        get {
          return resultMap["viewCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "viewCount")
        }
      }

      /// 描述
      public var describe: String? {
        get {
          return resultMap["describe"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "describe")
        }
      }

      /// 描述中 #hashtags 和 @users 的映射关系
      public var describeMapping: DescribeMapping? {
        get {
          return (resultMap["describeMapping"] as? ResultMap).flatMap { DescribeMapping(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "describeMapping")
        }
      }

      /// 允许观看范围
      public var watch: enumWatch? {
        get {
          return resultMap["watch"] as? enumWatch
        }
        set {
          resultMap.updateValue(newValue, forKey: "watch")
        }
      }

      /// 封面图
      public var coverImage: String? {
        get {
          return resultMap["coverImage"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "coverImage")
        }
      }

      /// 是否点赞
      public var liked: Bool? {
        get {
          return resultMap["liked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "liked")
        }
      }

      /// 视频时长
      public var duration: Double? {
        get {
          return resultMap["duration"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "duration")
        }
      }

      /// 点赞次数
      public var likeCount: Int? {
        get {
          return resultMap["likeCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "likeCount")
        }
      }

      /// 评论次数
      public var commentCount: Int? {
        get {
          return resultMap["commentCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "commentCount")
        }
      }

      /// 分享次数
      public var shareCount: Int? {
        get {
          return resultMap["shareCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareCount")
        }
      }

      /// 是否允许评论
      public var allowComment: Bool? {
        get {
          return resultMap["allowComment"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowComment")
        }
      }

      /// 【teaser 短视频】预告直播标题
      public var teaserTitle: String? {
        get {
          return resultMap["teaserTitle"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "teaserTitle")
        }
      }

      /// 【teaser / past show 短视频】直播开始日期
      public var liveStartAt: Double? {
        get {
          return resultMap["liveStartAt"] as? Double
        }
        set {
          resultMap.updateValue(newValue, forKey: "liveStartAt")
        }
      }

      /// 短视频类型；NORMAL 表示普通短视频；NORMAL 表示普通短视频；TEASER 表示 live 预告短视频；PAST_SHOW 表示 live 回放
      public var videoType: VideoType? {
        get {
          return resultMap["videoType"] as? VideoType
        }
        set {
          resultMap.updateValue(newValue, forKey: "videoType")
        }
      }

      /// video 分享链接
      public var shareLink: String? {
        get {
          return resultMap["shareLink"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "shareLink")
        }
      }

      /// 经纬度位置 type:[lng,lat] 经度，纬度
      public var location: [Double?]? {
        get {
          return resultMap["location"] as? [Double?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "location")
        }
      }

      /// nearBySearch 接口返回的地点 id
      public var placeId: String? {
        get {
          return resultMap["placeId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeId")
        }
      }

      /// 地名
      public var placeName: String? {
        get {
          return resultMap["placeName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeName")
        }
      }

      /// 地址详情
      public var placeAddress: String? {
        get {
          return resultMap["placeAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "placeAddress")
        }
      }

      /// 兴趣
      public var interests: [Interest?]? {
        get {
          return (resultMap["interests"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Interest?] in value.map { (value: ResultMap?) -> Interest? in value.flatMap { (value: ResultMap) -> Interest in Interest(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Interest?]) -> [ResultMap?] in value.map { (value: Interest?) -> ResultMap? in value.flatMap { (value: Interest) -> ResultMap in value.resultMap } } }, forKey: "interests")
        }
      }

      /// 视频中搭配的音乐
      public var music: Music? {
        get {
          return (resultMap["music"] as? ResultMap).flatMap { Music(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "music")
        }
      }

      /// 作者
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      /// 【teaser 短视频】是否已订阅对应的 live
      public var hasSubscribedLive: Bool? {
        get {
          return resultMap["hasSubscribedLive"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasSubscribedLive")
        }
      }

      /// 【teaser / past show 短视频】直播预告关联的直播
      public var live: Live? {
        get {
          return (resultMap["live"] as? ResultMap).flatMap { Live(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "live")
        }
      }

      public struct DescribeMapping: GraphQLSelectionSet {
        public static let possibleTypes = ["describeMapping"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", type: .list(.object(User.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(users: [User?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "describeMapping", "users": users.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var users: [User?]? {
          get {
            return (resultMap["users"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [User?] in value.map { (value: ResultMap?) -> User? in value.flatMap { (value: ResultMap) -> User in User(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [User?]) -> [ResultMap?] in value.map { (value: User?) -> ResultMap? in value.flatMap { (value: User) -> ResultMap in value.resultMap } } }, forKey: "users")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["mappingUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("text", type: .scalar(String.self)),
            GraphQLField("id", type: .object(Id.selections)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(text: String? = nil, id: Id? = nil) {
            self.init(unsafeResultMap: ["__typename": "mappingUser", "text": text, "id": id.flatMap { (value: Id) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var text: String? {
            get {
              return resultMap["text"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "text")
            }
          }

          public var id: Id? {
            get {
              return (resultMap["id"] as? ResultMap).flatMap { Id(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "id")
            }
          }

          public struct Id: GraphQLSelectionSet {
            public static let possibleTypes = ["mappingUserDetail"]

            public static let selections: [GraphQLSelection] = [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("_id", type: .scalar(GraphQLID.self)),
            ]

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(_id: GraphQLID? = nil) {
              self.init(unsafeResultMap: ["__typename": "mappingUserDetail", "_id": _id])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var _id: GraphQLID? {
              get {
                return resultMap["_id"] as? GraphQLID
              }
              set {
                resultMap.updateValue(newValue, forKey: "_id")
              }
            }
          }
        }
      }

      public struct Interest: GraphQLSelectionSet {
        public static let possibleTypes = ["Interest"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("hashtags", type: .list(.object(Hashtag.selections))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(name: String, _id: GraphQLID, hashtags: [Hashtag?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Interest", "name": name, "_id": _id, "hashtags": hashtags.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// interest 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// id
        public var _id: GraphQLID {
          get {
            return resultMap["_id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 查询该兴趣下的话题，参数可选
        public var hashtags: [Hashtag?]? {
          get {
            return (resultMap["hashtags"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Hashtag?] in value.map { (value: ResultMap?) -> Hashtag? in value.flatMap { (value: ResultMap) -> Hashtag in Hashtag(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Hashtag?]) -> [ResultMap?] in value.map { (value: Hashtag?) -> ResultMap? in value.flatMap { (value: Hashtag) -> ResultMap in value.resultMap } } }, forKey: "hashtags")
          }
        }

        public struct Hashtag: GraphQLSelectionSet {
          public static let possibleTypes = ["Hashtag"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("_id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(_id: GraphQLID, name: String) {
            self.init(unsafeResultMap: ["__typename": "Hashtag", "_id": _id, "name": name])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// id
          public var _id: GraphQLID {
            get {
              return resultMap["_id"]! as! GraphQLID
            }
            set {
              resultMap.updateValue(newValue, forKey: "_id")
            }
          }

          /// name
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }
        }
      }

      public struct Music: GraphQLSelectionSet {
        public static let possibleTypes = ["music"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("title", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, title: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "music", "_id": _id, "title": title])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 音乐标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["type__user"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("followed", type: .scalar(Bool.self)),
          GraphQLField("role", type: .scalar(enum__userRole.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(username: String? = nil, _id: GraphQLID? = nil, avatar: String? = nil, followed: Bool? = nil, role: enum__userRole? = nil) {
          self.init(unsafeResultMap: ["__typename": "type__user", "username": username, "_id": _id, "avatar": avatar, "followed": followed, "role": role])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 是否关注
        public var followed: Bool? {
          get {
            return resultMap["followed"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "followed")
          }
        }

        /// 用户角色
        public var role: enum__userRole? {
          get {
            return resultMap["role"] as? enum__userRole
          }
          set {
            resultMap.updateValue(newValue, forKey: "role")
          }
        }
      }

      public struct Live: GraphQLSelectionSet {
        public static let possibleTypes = ["live"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("coverImage", type: .scalar(String.self)),
          GraphQLField("title", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("streamingStatus", type: .scalar(LiveStreamingStatus.self)),
          GraphQLField("scheduleStartAt", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, coverImage: String? = nil, title: String? = nil, status: Bool? = nil, streamingStatus: LiveStreamingStatus? = nil, scheduleStartAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "live", "_id": _id, "coverImage": coverImage, "title": title, "status": status, "streamingStatus": streamingStatus, "scheduleStartAt": scheduleStartAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 封面图
        public var coverImage: String? {
          get {
            return resultMap["coverImage"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "coverImage")
          }
        }

        /// 标题
        public var title: String? {
          get {
            return resultMap["title"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "title")
          }
        }

        /// 是否正在直播
        public var status: Bool? {
          get {
            return resultMap["status"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 直播状态，可替代早期的 status
        public var streamingStatus: LiveStreamingStatus? {
          get {
            return resultMap["streamingStatus"] as? LiveStreamingStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "streamingStatus")
          }
        }

        /// live schedule 开始时间
        public var scheduleStartAt: String? {
          get {
            return resultMap["scheduleStartAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "scheduleStartAt")
          }
        }
      }
    }
  }
}

public final class RegisterMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation register($token: String!, $username: String!, $password: String!, $birthday: String, $phoneNumber: String!, $deviceType: enum__deviceType) {
      register(token: $token, username: $username, password: $password, birthday: $birthday, phoneNumber: $phoneNumber, deviceType: $deviceType) {
        __typename
        sessionToken
        user {
          __typename
          _id
          avatar
          gender
          deviceType
          deviceId
          username
          birthday
          phoneNumber
          email
          website
          bio
          uid
          createdAt
          updatedAt
          instagram {
            __typename
            id
            username
            homePage
          }
          facebook {
            __typename
            id
            username
            homePage
          }
          imPassword
          userType
          pushNotifications {
            __typename
            interactions
            live
            video
            order
          }
        }
      }
    }
    """

  public let operationName = "register"

  public var token: String
  public var username: String
  public var password: String
  public var birthday: String?
  public var phoneNumber: String
  public var deviceType: enum__deviceType?

  public init(token: String, username: String, password: String, birthday: String? = nil, phoneNumber: String, deviceType: enum__deviceType? = nil) {
    self.token = token
    self.username = username
    self.password = password
    self.birthday = birthday
    self.phoneNumber = phoneNumber
    self.deviceType = deviceType
  }

  public var variables: GraphQLMap? {
    return ["token": token, "username": username, "password": password, "birthday": birthday, "phoneNumber": phoneNumber, "deviceType": deviceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("register", arguments: ["token": GraphQLVariable("token"), "username": GraphQLVariable("username"), "password": GraphQLVariable("password"), "birthday": GraphQLVariable("birthday"), "phoneNumber": GraphQLVariable("phoneNumber"), "deviceType": GraphQLVariable("deviceType")], type: .object(Register.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(register: Register? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "register": register.flatMap { (value: Register) -> ResultMap in value.resultMap }])
    }

    /// 注册账号
    public var register: Register? {
      get {
        return (resultMap["register"] as? ResultMap).flatMap { Register(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "register")
      }
    }

    public struct Register: GraphQLSelectionSet {
      public static let possibleTypes = ["register"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("sessionToken", type: .scalar(String.self)),
        GraphQLField("user", type: .object(User.selections)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(sessionToken: String? = nil, user: User? = nil) {
        self.init(unsafeResultMap: ["__typename": "register", "sessionToken": sessionToken, "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 访问令牌
      public var sessionToken: String? {
        get {
          return resultMap["sessionToken"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sessionToken")
        }
      }

      /// 注册用户信息
      public var user: User? {
        get {
          return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "user")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["userSelf"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("_id", type: .scalar(GraphQLID.self)),
          GraphQLField("avatar", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(enum__gender.self)),
          GraphQLField("deviceType", type: .scalar(enum__deviceType.self)),
          GraphQLField("deviceId", type: .scalar(String.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("birthday", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("bio", type: .scalar(String.self)),
          GraphQLField("uid", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(Double.self)),
          GraphQLField("updatedAt", type: .scalar(Double.self)),
          GraphQLField("instagram", type: .object(Instagram.selections)),
          GraphQLField("facebook", type: .object(Facebook.selections)),
          GraphQLField("imPassword", type: .scalar(String.self)),
          GraphQLField("userType", type: .scalar(enum__userType.self)),
          GraphQLField("pushNotifications", type: .object(PushNotification.selections)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(_id: GraphQLID? = nil, avatar: String? = nil, gender: enum__gender? = nil, deviceType: enum__deviceType? = nil, deviceId: String? = nil, username: String? = nil, birthday: String? = nil, phoneNumber: String? = nil, email: String? = nil, website: String? = nil, bio: String? = nil, uid: String? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, instagram: Instagram? = nil, facebook: Facebook? = nil, imPassword: String? = nil, userType: enum__userType? = nil, pushNotifications: PushNotification? = nil) {
          self.init(unsafeResultMap: ["__typename": "userSelf", "_id": _id, "avatar": avatar, "gender": gender, "deviceType": deviceType, "deviceId": deviceId, "username": username, "birthday": birthday, "phoneNumber": phoneNumber, "email": email, "website": website, "bio": bio, "uid": uid, "createdAt": createdAt, "updatedAt": updatedAt, "instagram": instagram.flatMap { (value: Instagram) -> ResultMap in value.resultMap }, "facebook": facebook.flatMap { (value: Facebook) -> ResultMap in value.resultMap }, "imPassword": imPassword, "userType": userType, "pushNotifications": pushNotifications.flatMap { (value: PushNotification) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// id
        public var _id: GraphQLID? {
          get {
            return resultMap["_id"] as? GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "_id")
          }
        }

        /// 头像
        public var avatar: String? {
          get {
            return resultMap["avatar"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "avatar")
          }
        }

        /// 性别
        public var gender: enum__gender? {
          get {
            return resultMap["gender"] as? enum__gender
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        /// 设备类型
        public var deviceType: enum__deviceType? {
          get {
            return resultMap["deviceType"] as? enum__deviceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceType")
          }
        }

        /// 手机唯一识别 id，安卓的 imei，ios 的 idfa
        public var deviceId: String? {
          get {
            return resultMap["deviceId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "deviceId")
          }
        }

        /// 用户名
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 生日 (日/月/年) 格式 DD/MM/YYYY
        public var birthday: String? {
          get {
            return resultMap["birthday"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthday")
          }
        }

        /// 手机号
        public var phoneNumber: String? {
          get {
            return resultMap["phoneNumber"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        /// 邮箱
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 个人网站
        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        /// 个人介绍
        public var bio: String? {
          get {
            return resultMap["bio"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "bio")
          }
        }

        /// 全局唯一 uid，内容数字，类型 String，随着用户增长位数可能会变
        public var uid: String? {
          get {
            return resultMap["uid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "uid")
          }
        }

        /// 创建日期
        public var createdAt: Double? {
          get {
            return resultMap["createdAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 更新日期
        public var updatedAt: Double? {
          get {
            return resultMap["updatedAt"] as? Double
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// instagram
        public var instagram: Instagram? {
          get {
            return (resultMap["instagram"] as? ResultMap).flatMap { Instagram(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "instagram")
          }
        }

        /// facebook
        public var facebook: Facebook? {
          get {
            return (resultMap["facebook"] as? ResultMap).flatMap { Facebook(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "facebook")
          }
        }

        /// 环信IM password
        public var imPassword: String? {
          get {
            return resultMap["imPassword"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "imPassword")
          }
        }

        /// 用户类型。可据此字段判断是否是卖家
        public var userType: enum__userType? {
          get {
            return resultMap["userType"] as? enum__userType
          }
          set {
            resultMap.updateValue(newValue, forKey: "userType")
          }
        }

        /// 推送相关配置
        public var pushNotifications: PushNotification? {
          get {
            return (resultMap["pushNotifications"] as? ResultMap).flatMap { PushNotification(unsafeResultMap: $0) }
          }
          set {
            resultMap.updateValue(newValue?.resultMap, forKey: "pushNotifications")
          }
        }

        public struct Instagram: GraphQLSelectionSet {
          public static let possibleTypes = ["user_instagram"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_instagram", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct Facebook: GraphQLSelectionSet {
          public static let possibleTypes = ["user_facebook"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("homePage", type: .scalar(String.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String? = nil, username: String? = nil, homePage: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "user_facebook", "id": id, "username": username, "homePage": homePage])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String? {
            get {
              return resultMap["id"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          public var homePage: String? {
            get {
              return resultMap["homePage"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "homePage")
            }
          }
        }

        public struct PushNotification: GraphQLSelectionSet {
          public static let possibleTypes = ["pushNotifications"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("interactions", type: .scalar(Bool.self)),
            GraphQLField("live", type: .scalar(Bool.self)),
            GraphQLField("video", type: .scalar(Bool.self)),
            GraphQLField("order", type: .scalar(Bool.self)),
          ]

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(interactions: Bool? = nil, live: Bool? = nil, video: Bool? = nil, order: Bool? = nil) {
            self.init(unsafeResultMap: ["__typename": "pushNotifications", "interactions": interactions, "live": live, "video": video, "order": order])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// follow、like、comment、mention 推送的开关
          public var interactions: Bool? {
            get {
              return resultMap["interactions"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "interactions")
            }
          }

          /// live
          public var live: Bool? {
            get {
              return resultMap["live"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "live")
            }
          }

          /// video
          public var video: Bool? {
            get {
              return resultMap["video"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "video")
            }
          }

          /// order
          public var order: Bool? {
            get {
              return resultMap["order"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "order")
            }
          }
        }
      }
    }
  }
}

public final class ResetPasswordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation resetPassword($phoneNumber: String!, $token: String!, $newPassword: String!) {
      resetPassword(phoneNumber: $phoneNumber, token: $token, newPassword: $newPassword) {
        __typename
        updated
      }
    }
    """

  public let operationName = "resetPassword"

  public var phoneNumber: String
  public var token: String
  public var newPassword: String

  public init(phoneNumber: String, token: String, newPassword: String) {
    self.phoneNumber = phoneNumber
    self.token = token
    self.newPassword = newPassword
  }

  public var variables: GraphQLMap? {
    return ["phoneNumber": phoneNumber, "token": token, "newPassword": newPassword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("resetPassword", arguments: ["phoneNumber": GraphQLVariable("phoneNumber"), "token": GraphQLVariable("token"), "newPassword": GraphQLVariable("newPassword")], type: .object(ResetPassword.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(resetPassword: ResetPassword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "resetPassword": resetPassword.flatMap { (value: ResetPassword) -> ResultMap in value.resultMap }])
    }

    /// 重置密码
    public var resetPassword: ResetPassword? {
      get {
        return (resultMap["resetPassword"] as? ResultMap).flatMap { ResetPassword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "resetPassword")
      }
    }

    public struct ResetPassword: GraphQLSelectionSet {
      public static let possibleTypes = ["resetPassword"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("updated", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(updated: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "resetPassword", "updated": updated])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var updated: Bool? {
        get {
          return resultMap["updated"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "updated")
        }
      }
    }
  }
}

public final class ScoreLiveMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation scoreLive($live: ID!, $score: Int!) {
      scoreLive(live: $live, score: $score) {
        __typename
        success
      }
    }
    """

  public let operationName = "scoreLive"

  public var live: GraphQLID
  public var score: Int

  public init(live: GraphQLID, score: Int) {
    self.live = live
    self.score = score
  }

  public var variables: GraphQLMap? {
    return ["live": live, "score": score]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("scoreLive", arguments: ["live": GraphQLVariable("live"), "score": GraphQLVariable("score")], type: .object(ScoreLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(scoreLive: ScoreLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "scoreLive": scoreLive.flatMap { (value: ScoreLive) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 给直播打分
    public var scoreLive: ScoreLive? {
      get {
        return (resultMap["scoreLive"] as? ResultMap).flatMap { ScoreLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "scoreLive")
      }
    }

    public struct ScoreLive: GraphQLSelectionSet {
      public static let possibleTypes = ["scoreLive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "scoreLive", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateAddressMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateAddress($_id: ID!, $firstName: String, $lastName: String, $phoneNumber: String, $addressLine1: String, $addressLine2: String, $city: String, $state: String, $country: String, $zipCode: String, $isDefaultAddress: Boolean) {
      updateAddress(_id: $_id, firstName: $firstName, lastName: $lastName, phoneNumber: $phoneNumber, addressLine1: $addressLine1, addressLine2: $addressLine2, city: $city, state: $state, country: $country, zipCode: $zipCode, isDefaultAddress: $isDefaultAddress) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateAddress"

  public var _id: GraphQLID
  public var firstName: String?
  public var lastName: String?
  public var phoneNumber: String?
  public var addressLine1: String?
  public var addressLine2: String?
  public var city: String?
  public var state: String?
  public var country: String?
  public var zipCode: String?
  public var isDefaultAddress: Bool?

  public init(_id: GraphQLID, firstName: String? = nil, lastName: String? = nil, phoneNumber: String? = nil, addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zipCode: String? = nil, isDefaultAddress: Bool? = nil) {
    self._id = _id
    self.firstName = firstName
    self.lastName = lastName
    self.phoneNumber = phoneNumber
    self.addressLine1 = addressLine1
    self.addressLine2 = addressLine2
    self.city = city
    self.state = state
    self.country = country
    self.zipCode = zipCode
    self.isDefaultAddress = isDefaultAddress
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "firstName": firstName, "lastName": lastName, "phoneNumber": phoneNumber, "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode, "isDefaultAddress": isDefaultAddress]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateAddress", arguments: ["_id": GraphQLVariable("_id"), "firstName": GraphQLVariable("firstName"), "lastName": GraphQLVariable("lastName"), "phoneNumber": GraphQLVariable("phoneNumber"), "addressLine1": GraphQLVariable("addressLine1"), "addressLine2": GraphQLVariable("addressLine2"), "city": GraphQLVariable("city"), "state": GraphQLVariable("state"), "country": GraphQLVariable("country"), "zipCode": GraphQLVariable("zipCode"), "isDefaultAddress": GraphQLVariable("isDefaultAddress")], type: .object(UpdateAddress.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateAddress: UpdateAddress? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateAddress": updateAddress.flatMap { (value: UpdateAddress) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新address。创建前需要先调用 validateAddress 校验地址。未通过校验的地址调用此接口会报错
    public var updateAddress: UpdateAddress? {
      get {
        return (resultMap["updateAddress"] as? ResultMap).flatMap { UpdateAddress(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateAddress")
      }
    }

    public struct UpdateAddress: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateCardMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateCard($_id: ID!, $update: updateCardInput) {
      updateCard(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateCard"

  public var _id: GraphQLID
  public var update: updateCardInput?

  public init(_id: GraphQLID, update: updateCardInput? = nil) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateCard", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateCard.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateCard: UpdateCard? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateCard": updateCard.flatMap { (value: UpdateCard) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新card
    public var updateCard: UpdateCard? {
      get {
        return (resultMap["updateCard"] as? ResultMap).flatMap { UpdateCard(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateCard")
      }
    }

    public struct UpdateCard: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateCommentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation UpdateComment($_id: ID) {
      updateComment(_id: $_id, update: {deleted: true}) {
        __typename
        success
      }
    }
    """

  public let operationName = "UpdateComment"

  public var _id: GraphQLID?

  public init(_id: GraphQLID? = nil) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateComment", arguments: ["_id": GraphQLVariable("_id"), "update": ["deleted": true]], type: .object(UpdateComment.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateComment: UpdateComment? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateComment": updateComment.flatMap { (value: UpdateComment) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新评论
    public var updateComment: UpdateComment? {
      get {
        return (resultMap["updateComment"] as? ResultMap).flatMap { UpdateComment(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateComment")
      }
    }

    public struct UpdateComment: GraphQLSelectionSet {
      public static let possibleTypes = ["updateComment"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "updateComment", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateLiveMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateLive($_id: ID!, $update: inputUpdateLive!) {
      updateLive(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateLive"

  public var _id: GraphQLID
  public var update: inputUpdateLive

  public init(_id: GraphQLID, update: inputUpdateLive) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateLive", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateLive: UpdateLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateLive": updateLive.flatMap { (value: UpdateLive) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新直播
    public var updateLive: UpdateLive? {
      get {
        return (resultMap["updateLive"] as? ResultMap).flatMap { UpdateLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateLive")
      }
    }

    public struct UpdateLive: GraphQLSelectionSet {
      public static let possibleTypes = ["updateLive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "updateLive", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UpdateUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation updateUser($_id: ID!, $update: inputUpdateUser!) {
      updateUser(_id: $_id, update: $update) {
        __typename
        success
      }
    }
    """

  public let operationName = "updateUser"

  public var _id: GraphQLID
  public var update: inputUpdateUser

  public init(_id: GraphQLID, update: inputUpdateUser) {
    self._id = _id
    self.update = update
  }

  public var variables: GraphQLMap? {
    return ["_id": _id, "update": update]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUser", arguments: ["_id": GraphQLVariable("_id"), "update": GraphQLVariable("update")], type: .object(UpdateUser.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateUser: UpdateUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateUser": updateUser.flatMap { (value: UpdateUser) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 更新用户资料
    public var updateUser: UpdateUser? {
      get {
        return (resultMap["updateUser"] as? ResultMap).flatMap { UpdateUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "updateUser")
      }
    }

    public struct UpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["updateUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "updateUser", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class UserFollowHashtagMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation UserFollowHashtag($hashtags: [ID!]!, $status: Boolean!) {
      followHashtag(hashtags: $hashtags, status: $status) {
        __typename
        success
      }
    }
    """

  public let operationName = "UserFollowHashtag"

  public var hashtags: [GraphQLID]
  public var status: Bool

  public init(hashtags: [GraphQLID], status: Bool) {
    self.hashtags = hashtags
    self.status = status
  }

  public var variables: GraphQLMap? {
    return ["hashtags": hashtags, "status": status]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("followHashtag", arguments: ["hashtags": GraphQLVariable("hashtags"), "status": GraphQLVariable("status")], type: .object(FollowHashtag.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(followHashtag: FollowHashtag? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "followHashtag": followHashtag.flatMap { (value: FollowHashtag) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 用户批量关注/取关话题
    public var followHashtag: FollowHashtag? {
      get {
        return (resultMap["followHashtag"] as? ResultMap).flatMap { FollowHashtag(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "followHashtag")
      }
    }

    public struct FollowHashtag: GraphQLSelectionSet {
      public static let possibleTypes = ["type__result"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "type__result", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class ValidateAddressQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    query validateAddress($addressLine1: String!, $addressLine2: String, $city: String!, $state: String!, $country: String!, $zipCode: String!) {
      validateAddress(addressLine1: $addressLine1, addressLine2: $addressLine2, city: $city, state: $state, country: $country, zipCode: $zipCode) {
        __typename
        isValidAddress
        newAddress {
          __typename
          addressLine1
          addressLine2
          city
          state
          country
          zipCode
        }
      }
    }
    """

  public let operationName = "validateAddress"

  public var addressLine1: String
  public var addressLine2: String?
  public var city: String
  public var state: String
  public var country: String
  public var zipCode: String

  public init(addressLine1: String, addressLine2: String? = nil, city: String, state: String, country: String, zipCode: String) {
    self.addressLine1 = addressLine1
    self.addressLine2 = addressLine2
    self.city = city
    self.state = state
    self.country = country
    self.zipCode = zipCode
  }

  public var variables: GraphQLMap? {
    return ["addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("validateAddress", arguments: ["addressLine1": GraphQLVariable("addressLine1"), "addressLine2": GraphQLVariable("addressLine2"), "city": GraphQLVariable("city"), "state": GraphQLVariable("state"), "country": GraphQLVariable("country"), "zipCode": GraphQLVariable("zipCode")], type: .object(ValidateAddress.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(validateAddress: ValidateAddress? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "validateAddress": validateAddress.flatMap { (value: ValidateAddress) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    /// 验证地址，有三种返回结果
    /// 
    /// 1. isValidAddress = true，地址验证通过，可直接请求 createAddress 接口保存
    /// 
    /// 2. isValidAddress = false, newAddress = [],
    /// 地址验证不通过，且无法给出推荐地址，表示这个地址很可能是一个错的比较厉害的地址，比如 state 和 city
    /// 完全不匹配，此时应提示用户无法保存，需要重新输入
    /// 
    /// 3. isValidAddress = false, newAddress =
    /// [{...suggestAddress}]，地址验证不通过，且有推荐地址返回，表示这个地址可能有一些错误，如 city 和 zipcode
    /// 不能完全匹配，此时应给用户展示推荐地址列表，让用户选择一个
    public var validateAddress: ValidateAddress? {
      get {
        return (resultMap["validateAddress"] as? ResultMap).flatMap { ValidateAddress(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "validateAddress")
      }
    }

    public struct ValidateAddress: GraphQLSelectionSet {
      public static let possibleTypes = ["validateAddress"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("isValidAddress", type: .scalar(Bool.self)),
        GraphQLField("newAddress", type: .list(.object(NewAddress.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(isValidAddress: Bool? = nil, newAddress: [NewAddress?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "validateAddress", "isValidAddress": isValidAddress, "newAddress": newAddress.flatMap { (value: [NewAddress?]) -> [ResultMap?] in value.map { (value: NewAddress?) -> ResultMap? in value.flatMap { (value: NewAddress) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 地址是否通过验证。
      /// 
      /// 如果为 false，则需要让用户选择 newAddress 中列出的地址。
      /// 
      /// 如果为 true，但 newAddress 不为空，表示需要询问用户是否替换为更准确的地址
      public var isValidAddress: Bool? {
        get {
          return resultMap["isValidAddress"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isValidAddress")
        }
      }

      /// 修正的新地址，如果不为空表示对原地址做了准确性修正，需要询问用户是否替换。此数组最多返回 3 个地址
      public var newAddress: [NewAddress?]? {
        get {
          return (resultMap["newAddress"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [NewAddress?] in value.map { (value: ResultMap?) -> NewAddress? in value.flatMap { (value: ResultMap) -> NewAddress in NewAddress(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [NewAddress?]) -> [ResultMap?] in value.map { (value: NewAddress?) -> ResultMap? in value.flatMap { (value: NewAddress) -> ResultMap in value.resultMap } } }, forKey: "newAddress")
        }
      }

      public struct NewAddress: GraphQLSelectionSet {
        public static let possibleTypes = ["validateAddress_address"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("addressLine1", type: .nonNull(.scalar(String.self))),
          GraphQLField("addressLine2", type: .scalar(String.self)),
          GraphQLField("city", type: .nonNull(.scalar(String.self))),
          GraphQLField("state", type: .nonNull(.scalar(String.self))),
          GraphQLField("country", type: .nonNull(.scalar(String.self))),
          GraphQLField("zipCode", type: .nonNull(.scalar(String.self))),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(addressLine1: String, addressLine2: String? = nil, city: String, state: String, country: String, zipCode: String) {
          self.init(unsafeResultMap: ["__typename": "validateAddress_address", "addressLine1": addressLine1, "addressLine2": addressLine2, "city": city, "state": state, "country": country, "zipCode": zipCode])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var addressLine1: String {
          get {
            return resultMap["addressLine1"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "addressLine1")
          }
        }

        public var addressLine2: String? {
          get {
            return resultMap["addressLine2"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "addressLine2")
          }
        }

        public var city: String {
          get {
            return resultMap["city"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var state: String {
          get {
            return resultMap["state"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "state")
          }
        }

        public var country: String {
          get {
            return resultMap["country"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var zipCode: String {
          get {
            return resultMap["zipCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zipCode")
          }
        }
      }
    }
  }
}

public final class VerifyOAuthTokenMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation verifyOAuthToken($provider: enum__oauthProvider!, $idToken: String!) {
      verifyOAuthToken(provider: $provider, idToken: $idToken) {
        __typename
        isNew
      }
    }
    """

  public let operationName = "verifyOAuthToken"

  public var provider: enum__oauthProvider
  public var idToken: String

  public init(provider: enum__oauthProvider, idToken: String) {
    self.provider = provider
    self.idToken = idToken
  }

  public var variables: GraphQLMap? {
    return ["provider": provider, "idToken": idToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("verifyOAuthToken", arguments: ["provider": GraphQLVariable("provider"), "idToken": GraphQLVariable("idToken")], type: .object(VerifyOAuthToken.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(verifyOAuthToken: VerifyOAuthToken? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "verifyOAuthToken": verifyOAuthToken.flatMap { (value: VerifyOAuthToken) -> ResultMap in value.resultMap }])
    }

    /// 检测第三方登录信息
    public var verifyOAuthToken: VerifyOAuthToken? {
      get {
        return (resultMap["verifyOAuthToken"] as? ResultMap).flatMap { VerifyOAuthToken(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "verifyOAuthToken")
      }
    }

    public struct VerifyOAuthToken: GraphQLSelectionSet {
      public static let possibleTypes = ["verifyOAuthToken"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("isNew", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(isNew: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "verifyOAuthToken", "isNew": isNew])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var isNew: Bool? {
        get {
          return resultMap["isNew"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isNew")
        }
      }
    }
  }
}

public final class ViewKeywordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation viewKeyword($name: String!) {
      viewKeyword(name: $name) {
        __typename
        success
      }
    }
    """

  public let operationName = "viewKeyword"

  public var name: String

  public init(name: String) {
    self.name = name
  }

  public var variables: GraphQLMap? {
    return ["name": name]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("viewKeyword", arguments: ["name": GraphQLVariable("name")], type: .object(ViewKeyword.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(viewKeyword: ViewKeyword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "viewKeyword": viewKeyword.flatMap { (value: ViewKeyword) -> ResultMap in value.resultMap }])
    }

    /// ***【接口权限: 普通登录用户】***
    public var viewKeyword: ViewKeyword? {
      get {
        return (resultMap["viewKeyword"] as? ResultMap).flatMap { ViewKeyword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "viewKeyword")
      }
    }

    public struct ViewKeyword: GraphQLSelectionSet {
      public static let possibleTypes = ["viewKeyword"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "viewKeyword", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}

public final class ViewLiveMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition =
    """
    mutation viewLive($_id: ID!) {
      viewLive(_id: $_id) {
        __typename
        success
      }
    }
    """

  public let operationName = "viewLive"

  public var _id: GraphQLID

  public init(_id: GraphQLID) {
    self._id = _id
  }

  public var variables: GraphQLMap? {
    return ["_id": _id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("viewLive", arguments: ["_id": GraphQLVariable("_id")], type: .object(ViewLive.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(viewLive: ViewLive? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "viewLive": viewLive.flatMap { (value: ViewLive) -> ResultMap in value.resultMap }])
    }

    /// 浏览直播次数+1
    public var viewLive: ViewLive? {
      get {
        return (resultMap["viewLive"] as? ResultMap).flatMap { ViewLive(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "viewLive")
      }
    }

    public struct ViewLive: GraphQLSelectionSet {
      public static let possibleTypes = ["viewLive"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("success", type: .scalar(Bool.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(success: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "viewLive", "success": success])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var success: Bool? {
        get {
          return resultMap["success"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "success")
        }
      }
    }
  }
}
